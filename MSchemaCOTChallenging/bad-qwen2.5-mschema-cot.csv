Question,hardness,Gold,Prediction_0.1,Prediction_0.5,Prediction_1.0,EX_0.1,EX_0.5,EX_1.0
Which element is the least numerous in non-carcinogenic molecules?,challenging,"SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",select the top 1 element.  Please generate the optimized SQLite query for this question.  :                                                                                                                                  e   e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e ,"select non-carcinogenic molecules.    - Needed calculations: Count the occurrences of each element.    - Required sorting or limiting: Determine the element with the least count.  3. **Query Construction**:    - Start by selecting the necessary columns: `element` from the `atom` table.    - Join the tables to link `atom` with `molecule` to filter by `label`.    - Apply the filter `label = '-'` to select non-carcinogenic molecules.    - Group the results by `element` to count occurrences.    - Order the results by the count in ascending order.    - Limit the results to the first row to get the least numerous element.  4. **Query Review**:    - Verify all table/column references: `atom.element`, `molecule.label`, `atom.molecule_id`.    - Check join conditions: `atom.molecule_id = molecule.molecule_id`.    - Confirm aggregations and groupings: `COUNT(atom.element)`.    - Validate against requirements: Correctly identifies the least numerous element in non-carcinogenic molecules.  sql SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY atom.element ORDER BY COUNT(atom.element) ASC LIMIT 1","select only those molecules with `label = '-'` from the `molecule` table. 2. **Join with atom table**: To find the elements of these molecules, we need to join the filtered `molecule` table with the `atom` table. 3. **Group by element**: To count the occurrences of each element, we need to group the results by the `element` column. 4. **Count elements**: For each group, we count the number of elements. 5. **Order by count**: We order the results by the count in ascending order to get the least numerous element at the top. 6. **Limit the results**: Since we are only interested in the least numerous element, we limit the results to one row.  Let's construct the SQL query based on these steps:  sql SELECT element FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE label = '-' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1",0,0,0
What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?,challenging,SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social',"Select the `event_name` from the `event` table.  To generate the optimized SQLite query, follow the steps below:  1. Schema Analysis:    - Relevant tables: `event`, `attendance`, `member`, `major`, `zip_code`    - Relationships: `event` to `attendance` via `event_id`, `attendance` to `member` via `member_id`, `member` to `major` via `link_to_major`, `member` to `zip_code` via `zip`    - Constraints: `event_id` is primary key in `event`, `member_id` is primary key in `member`, `major_id` is primary key in `major`, `zip_code` is primary key in `zip_code`  2. Question Breakdown:    - Core data requirements: `event_name` from `event`    - Required filters: `type = 'Social'`, `position = 'Vice President'`, `location = '900 E. Washington St.'`    - Needed calculations or aggregations: None    - Required sorting or limiting: None  3. Query Construction:    - Start with the `event` table and join it with the `attendance` table on `event_id`    - Join the `member` table with the `attendance` table on `member_id`    - Join the `major` table with the `member` table on `link_to_major`    - Join the `zip_code` table with the `member` table on `zip`    - Apply the filters: `type = 'Social'`, `position = 'Vice President'`, `location = '900 E. Washington St.'`    - Select the `event_name` from the `event` table  4. Query Review:    - Verify all table/column references: `event`, `attendance`, `member`, `major`, `zip_code`    - Check join conditions: `event_id`, `member_id`, `link_to_major`, `zip`    - Confirm aggregations and groupings: None    - Validate against requirements: ",NULL,NULL,0,0,0
List all carcinogenic molecules and their elements.,challenging,"SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'","SELECT DISTINCT m.molecule_id, m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+'",NULL,"Select Unique Elements**: Ensure each element is listed only once for each molecule.  Here is the SQL query:  sql SELECT DISTINCT atom.molecule_id, atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' ORDER BY atom.molecule_id, atom.element",0,0,0
"What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",challenging,SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1,"SELECT Diagnosis, COUNT(*) AS DiagnosisCount FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1",SELECT Diagnosis  FROM Examination  JOIN Patient ON Examination.ID = Patient.ID  WHERE Examination.Date BETWEEN '1985-01-01' AND '1995-12-31'  GROUP BY Diagnosis  ORDER BY COUNT(Diagnosis) DESC  LIMIT 1,NULL,0,0,0
What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?,challenging,"SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",Select Full Name**: Select `forename` and `surname` from the `drivers` table.  ### Step 4: Query Review - **Table/Column References**: All referenced columns exist in the schema. - **Join Conditions**: Joins are based on the identified relationships. - **Aggregations and Groupings**: No aggregations or groupings are needed. - **Validation**: ,NULL,NULL,0,0,0
What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.,challenging,"WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label","SELECT      SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) / COUNT(*) AS hydrogen_ratio,     CASE          WHEN SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) / COUNT(*) > 0.5 THEN 'Carcinogenic'         ELSE 'Non-Carcinogenic'     END AS label FROM      atom WHERE      molecule_id = 'TR006'",NULL,"SELECT      CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(atom_id) AS ratio,     molecule.label FROM      atom JOIN      molecule ON atom.molecule_id = molecule.molecule_id WHERE      molecule_id = 'TR006'",0,0,0
"List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",challenging,"SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1","SELECT c.client_id, a.account_id, d.A11     FROM client c     JOIN disp d ON c.client_id = d.client_id     JOIN account a ON d.account_id = a.account_id     WHERE c.gender = 'F' ), oldest_female_client AS (     SELECT account_id, AVG(A11) AS avg_salary     FROM female_clients     GROUP BY account_id     ORDER BY MIN(birth_date) DESC, AVG(A11) ASC     LIMIT 1 ) SELECT account_id, avg_salary,        (SELECT MAX(avg_salary) FROM oldest_female_client) - MIN(avg_salary) AS salary_gap FROM oldest_female_client","SELECT          c.client_id,          c.gender,          c.birth_date,          a.account_id,          d.A11 AS average_salary     FROM          client c     JOIN          account a ON c.client_id = a.client_id     JOIN          disp d ON a.account_id = d.account_id     WHERE          c.gender = 'F' ), oldest_youngest AS (     SELECT          client_id,          account_id,          average_salary,          RANK() OVER (ORDER BY birth_date) AS birth_rank,         RANK() OVER (ORDER BY average_salary DESC) AS salary_rank     FROM          female_clients ) SELECT      account_id AS oldest_youngest_account,     MIN(average_salary) AS lowest_average_salary,     MAX(average_salary) AS highest_average_salary,     MAX(average_salary) - MIN(average_salary) AS salary_gap FROM      oldest_youngest WHERE      birth_rank = 1 OR salary_rank = 1","SELECT         a.account_id,        AVG(t.amount) AS avg_salary    FROM         client c    JOIN         account a ON c.client_id = a.client_id    JOIN         trans t ON a.account_id = t.account_id    WHERE         c.gender = 'F'    GROUP BY         a.account_id    ORDER BY         c.birth_date ASC, avg_salary ASC    LIMIT 1",0,0,0
List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.,challenging,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%',SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.Date LIKE '1991-10%' AND Laboratory.T-BIL < 2.0,"SELECT P.ID, P.SEX, P.Diagnosis    FROM Patient P    JOIN Examination E ON P.ID = E.ID    JOIN Laboratory L ON P.ID = L.ID    WHERE E.Admission = '-'      AND L.Date LIKE '1991-10%'      AND L.T-BIL < 2.0",NULL,0,0,0
What are the elements of the atoms of TR144_8_19?,challenging,SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19',"Select the element column from the atom table    - Join the connected table with the atom table on atom_id and atom_id2    - Apply the filter for bond_id = 'TR144_8_19'  4. Query Review:    - Verify all table/column references: connected, atom, bond_id, atom_id, atom_id2, element    - Check join conditions: connected.atom_id = atom.atom_id and connected.atom_id2 = atom.atom_id    - Confirm aggregations and groupings: None    - Validate against requirements: Correctly retrieves elements of atoms connected by bond TR144_8_19  Final optimized SQLite query:  sql SELECT T2.element  FROM connected AS T1  JOIN atom AS T2 ON T1.atom_id = T2.atom_id  WHERE T1.bond_id = 'TR144_8_19'",NULL,NULL,0,0,0
How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?,challenging,"SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",NULL,"SELECT COUNT(*) AS request_count, SUM(amount) AS total_debit, k_symbol FROM trans JOIN account ON trans.account_id = account.account_id WHERE account_id = 3 AND type = 'VYBER' UNION ALL SELECT COUNT(*) AS request_count, SUM(amount) AS total_debit, k_symbol FROM trans JOIN account ON trans.account_id = account.account_id WHERE account_id = 3 AND type = 'VYDAJ' AND amount = 3539   ",NULL,0,0,0
How many atoms with iodine and with sulfur type elements are there in single bond molecules?,challenging,"SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",SELECT COUNT(DISTINCT atom_id) FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE bond_type = '-' AND (element = 'i' OR element = 's'),NULL,NULL,0,0,0
What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?,challenging,"SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'","SELECT      (SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) -       SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) /      SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) * 100 AS growth_rate FROM      client JOIN      loan ON client.client_id = loan.account_id WHERE      client.gender = 'M'",NULL,NULL,0,0,0
"Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",challenging,"SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",SELECT      (r1.fastestLapSpeed - r2.fastestLapSpeed) * 100 / r2.fastestLapSpeed AS percentage_difference FROM      results r1 JOIN      results r2 ON      r1.driverId = r2.driverId WHERE      r1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')     AND r1.raceId = 853     AND r2.raceId = 854,NULL,SELECT      (SUM(CASE WHEN T1.raceId = 853 THEN T1.fastestLapSpeed ELSE 0 END) -       SUM(CASE WHEN T1.raceId = 854 THEN T1.fastestLapSpeed ELSE 0 END)) * 100 /      SUM(CASE WHEN T1.raceId = 853 THEN T1.fastestLapSpeed ELSE 0 END) AS percentage FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Paul' AND T2.surname = 'di Resta',0,0,1
"From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",challenging,"SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",SELECT      CAST(SUM(CASE WHEN T1.dob < '1985-01-01' AND T2.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 /      COUNT(CASE WHEN T1.dob BETWEEN '2000-01-01' AND '2005-12-31' THEN 1 ELSE NULL END) AS percentage FROM      drivers AS T1 JOIN      results AS T2 ON T1.driverId = T2.driverId WHERE      T2.year BETWEEN 2000 AND 2005,"SELECT      ROUND(         (CAST(SUM(CASE WHEN drivers.dob < '1985-01-01' AND results.laps > 50 THEN 1 ELSE 0 END) AS REAL) /           SUM(CASE WHEN drivers.dob BETWEEN '2000-01-01' AND '2005-12-31' THEN 1 ELSE 0 END)) * 100,          2     ) AS percentage FROM      drivers JOIN      results ON drivers.driverId = results.driverId",NULL,0,0,0
Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.,challenging,"SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",NULL,NULL,NULL,0,0,0
"Among all the posts posted by the most influential user, identify the percentage with a score above 50.",challenging,SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation,NULL,NULL,"SELECT OwnerUserId     FROM posts     WHERE OwnerUserId = (         SELECT Id         FROM users         ORDER BY Reputation DESC         LIMIT 1     ) ), HighScorePosts AS (     SELECT COUNT(*) AS HighScoreCount     FROM posts     WHERE OwnerUserId = (         SELECT OwnerUserId         FROM MostInfluentialUser     ) AND Score > 50 ) SELECT      (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT OwnerUserId FROM MostInfluentialUser)) AS TotalPosts,     (SELECT HighScoreCount FROM HighScorePosts) AS HighScorePosts,     CAST((SELECT HighScoreCount FROM HighScorePosts) AS REAL) * 100 / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT OwnerUserId FROM MostInfluentialUser)) AS Percentage   ### Step 4: Query Review - Verify all table/column references: Correctly references `posts` and `users` - Check join conditions: No need for joins as it's a subquery approach - Confirm aggregations and groupings: Correctly uses `COUNT` and `CAST` for percentage calculation - Validate against requirements: Matches the requirement for identifying the percentage of high-score posts by the most influential user  ",0,0,0
"List all the elements of the toxicology of the molecule ""TR004"".",challenging,SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004',NULL,NULL,NULL,0,0,0
"What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye
?",challenging,SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id,SELECT      (AVG(CASE WHEN player_name = 'Abdou Diallo' THEN ball_control ELSE 0 END) -      AVG(CASE WHEN player_name = 'Aaron Appindangoye' THEN ball_control ELSE 0 END)) AS difference FROM      Player JOIN      Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id,SELECT      (SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control ELSE 0 END) / COUNT(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.id ELSE NULL END)) -     (SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control ELSE 0 END) / COUNT(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.id ELSE NULL END)) AS difference FROM      Player AS T1 JOIN      Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id,NULL,0,0,0
Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.,challenging,"SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'","Select the first_name, last_name, and link_to_event from the member and attendance tables.  SQLite Query: sql SELECT T2.first_name, T2.last_name, T1.link_to_event  FROM attendance AS T1  JOIN member AS T2 ON T1.link_to_member = T2.member_id  JOIN expense AS T3 ON T1.link_to_member = T3.link_to_member  WHERE T3.approved = 'true' AND T3.expense_date BETWEEN '2019-01-10' AND '2019-11-19'   ",NULL,NULL,0,0,0
What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?,challenging,SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-',NULL,NULL,NULL,0,0,0
Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.,challenging,SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-',NULL,"SELECT         P.ID AS PatientID,         L.RBC AS AbnormalRBC,         E.ExaminationDate AS ExaminationDate    FROM         Examination E    JOIN         Laboratory L ON E.ID = L.ID    JOIN         Patient P ON E.ID = P.ID    WHERE         (L.RBC < 3.5 OR L.RBC > 6.0)        AND P.Admission = '-'",NULL,0,0,0
For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.,challenging,"SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'","SELECT      cards.id AS card_id,     cards.artist,     rulings.text AS ruling_text,     cards.hasContentWarning FROM      cards JOIN      rulings ON cards.uuid = rulings.uuid WHERE      cards.artist = 'Jim Pavelec'",NULL,NULL,0,0,0
How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?,challenging,"SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'",SELECT COUNT(DISTINCT p.ID) AS MaleBehcetPatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M'   AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'   AND e.Diagnosis = 'Behcet'   AND p.Admission = '-',NULL,NULL,1,0,0
Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.,challenging,SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010,SELECT      CAST(COUNT(CASE WHEN position > 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) AS percentage FROM      driverStandings JOIN      drivers ON driverStandings.driverId = drivers.driverId JOIN      races ON driverStandings.raceId = races.raceId WHERE      drivers.surname = 'Hamilton' AND races.year >= 2010,NULL,NULL,1,0,0
What is the percentage of cards whose language is French among the Story Spotlight cards?,challenging,SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1,SELECT      CAST(COUNT(CASE WHEN ft.language = 'French' THEN 1 ELSE NULL END) AS REAL) * 100 /      COUNT(ct.uuid) AS percentage FROM      cards ct JOIN      set_translations st ON ct.uuid = st.uuid JOIN      foreign_data ft ON ct.uuid = ft.uuid WHERE      ct.isStorySpotlight = 1,NULL,NULL,0,0,0
"Among all the lap records set on various circuits, what is the time for the fastest one?",challenging,"SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",NULL,NULL,"Select the minimum lap time, circuit name, and driver's first and last name    - Order by the lap time in ascending order    - Limit the result to 1 record  4. **Query Review**:    - Verify all table/column references are correct    - Check join conditions and ensure they align with the schema    - Confirm that the aggregation (min) and groupings are correctly applied    - Validate that the query meets all requirements  ",0,0,0
"What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",challenging,"SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312","SELECT      Segment,      AVG(Consumption) AS AnnualAverageConsumption FROM      yearmonth JOIN      customers ON yearmonth.CustomerID = customers.CustomerID WHERE      Date BETWEEN '201301' AND '201312' GROUP BY      Segment",NULL,NULL,0,0,0
What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?,challenging,SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30,SELECT      (COUNT(CASE WHEN UA <= 6.5 THEN 1 ELSE NULL END) * 100.0 / COUNT(*)) AS Percentage FROM      Laboratory L JOIN      Patient P ON L.ID = P.ID WHERE      L.`U-PRO` > 0 AND L.`U-PRO` < 30,SELECT CAST(SUM(CASE WHEN T2.UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) AS Percentage FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.U-PRO > 0 AND T1.U-PRO < 30,SELECT    (SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Percentage FROM    Examination JOIN    Laboratory ON Examination.ID = Laboratory.ID WHERE    U-PRO > 0 AND U-PRO < 30,1,0,0
What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?,challenging,SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18,SELECT COUNT(DISTINCT T1.CDSCode) AS TotalNonCharteredSchools FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T2.Charter = 0   AND T2.County = 'Los Angeles'   AND (T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`) < 0.18   AND T3.AvgScrRead >= 500   AND T3.AvgScrMath >= 500,SELECT COUNT(*)  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.County = 'Los Angeles'    AND schools.Charter = 0    AND frpm.[Percent (%) Eligible Free (K-12)] < 0.18,"SELECT         COUNT(schools.School) AS TotalNonCharteredSchools,        AVG(satscores.AvgScrRead) AS AvgReadingScore    FROM         frpm    JOIN         schools ON frpm.CDSCode = schools.CDSCode    JOIN         satscores ON schools.CDSCode = satscores.cds    WHERE         schools.Charter = 0        AND schools.County = 'Los Angeles'        AND frpm.[Percent (%) Eligible Free (K-12)] * 100 / frpm.[Enrollment (K-12)] < 0.18",0,0,0
"What is the average time in seconds of champion for each year, before year 1975?",challenging,"WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",NULL,NULL,"SELECT      r.year,      AVG(         (CAST(SUBSTR(r.time, 1, 2) AS REAL) * 3600) +          (CAST(SUBSTR(r.time, 4, 2) AS REAL) * 60) +          CAST(SUBSTR(r.time, 7, 4) AS REAL)     ) AS avg_time_seconds FROM      results r JOIN      drivers d ON r.driverId = d.driverId JOIN      races rs ON r.raceId = rs.raceId JOIN      status s ON r.statusId = s.statusId WHERE      s.status = 'Finished'      AND rs.year < 1975 GROUP BY      rs.year",0,0,0
What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?,challenging,"SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",NULL,NULL,"SELECT      customers.Currency,     SUM(yearmonth.Consumption) AS TotalConsumption FROM      yearmonth JOIN      customers ON yearmonth.CustomerID = customers.CustomerID WHERE      yearmonth.Date BETWEEN '201201' AND '201212' GROUP BY      customers.Currency",0,0,0
"For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",challenging,SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18',NULL,NULL,SELECT      (SUM(CASE WHEN L.Date LIKE '1981-11-%' THEN L.`T-CHO` ELSE 0 END) -      SUM(CASE WHEN L.Date LIKE '1981-12-%' THEN L.`T-CHO` ELSE 0 END)) * 100.0 /      SUM(CASE WHEN L.Date LIKE '1981-11-%' THEN L.`T-CHO` ELSE 0 END) AS decrease_rate FROM      Patient P JOIN      Examination E ON P.ID = E.ID JOIN      Laboratory L ON P.ID = L.ID WHERE      P.Birthday = '1959-02-18'   ### 4. Query Review - **Table/column references**: All relevant tables and columns are correctly referenced. - **Joins**: Proper joins are included based on the schema. - **Filters**: ,0,0,0
"For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",challenging,SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1,SELECT      (CAST(SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100) / COUNT(client_id) AS percentage_male_clients FROM      district JOIN      client ON district.district_id = client.district_id WHERE      A3 = 'south Bohemia',NULL,"SELECT         d.A3 AS region,        (SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(c.client_id)) AS percentage_male_clients,        AVG(JULIANDAY('now') - JULIANDAY(c.birth_date)) / 365 AS average_age,        AVG(t.amount / 30) AS average_transactions_per_month    FROM         client c    JOIN         district d ON c.district_id = d.district_id    JOIN         trans t ON c.client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM trans))    WHERE         d.A3 = 'south Bohemia'    GROUP BY         d.A3      4. **Query Review**:    - Table/column references: All used tables and columns are present in the schema.    - Joins: Joins are based on the identified relationships.    - Filters: Filter for `A3 = 'south Bohemia'` is applied.    - Calculations: Percentage of male clients, average age, and average transactions per month are calculated.    - Grouping: Grouping by region ensures the calculations are done per branch.  ",0,0,0
Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.,challenging,"SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1","Select the full names of the administrators from the `schools` table.  Here is the SQL query to achieve this:  sql SELECT      AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3 FROM      schools JOIN      satscores ON schools.CDSCode = satscores.cds WHERE      NumGE1500 >= 1500 ORDER BY      NumGE1500 DESC LIMIT 1","SELECT      s.School AS SchoolName,     s.District AS DistrictName,     s.AdmFName1 || ' ' || s.AdmLName1 AS Admin1,     s.AdmFName2 || ' ' || s.AdmLName2 AS Admin2,     s.AdmFName3 || ' ' || s.AdmLName3 AS Admin3 FROM      schools s JOIN      satscores ss ON s.CDSCode = ss.cds WHERE      ss.NumGE1500 >= 1 ORDER BY      ss.enroll12 DESC LIMIT 1",NULL,0,0,0
List the long name of teams with above-average build-up play passing in 2012.,challenging,"SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",NULL,"SELECT      T.team_long_name,     AVG(TA.buildUpPlayPassing) AS avg_buildUpPlayPassing FROM      Team AS T JOIN      Team_Attributes AS TA ON T.team_api_id = TA.team_api_id JOIN      Match AS M ON T.team_api_id = M.home_team_api_id OR T.team_api_id = M.away_team_api_id WHERE      strftime('%Y', TA.date) = '2012' GROUP BY      T.team_long_name HAVING      AVG(TA.buildUpPlayPassing) > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL)",NULL,0,0,0
Are there more male patients with creatinine not within the normal range than female? True or False?,challenging,SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5,"SELECT      SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) AS MaleCount,     SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS FemaleCount FROM      Patient AS T1 JOIN      Laboratory AS T2 ON T1.ID = T2.ID WHERE      T2.CRE >= 1.5",NULL,NULL,0,0,0
"For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",challenging,"SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )","SELECT      t1.CustomerID,      t1.Amount,      ym1.Consumption AS Consumption_2012,      ym2.Consumption AS Consumption_2013,      ((ym1.Consumption - ym2.Consumption) / ym1.Consumption) AS Consumption_Decrease_Rate FROM      transactions_1k t1 JOIN      yearmonth ym1 ON t1.Date = ym1.Date AND t1.CustomerID = ym1.CustomerID JOIN      yearmonth ym2 ON t1.CustomerID = ym2.CustomerID AND ym2.Date = '2013-08-25' WHERE      t1.Date = '2012-08-25' AND t1.Amount = 634.8",SELECT      (y1.Consumption - y2.Consumption) / y1.Consumption AS ConsumptionDecreaseRate FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID JOIN      yearmonth y1 ON t.CustomerID = y1.CustomerID AND t.Date = '2012-08-25' JOIN      yearmonth y2 ON t.CustomerID = y2.CustomerID AND t.Date = '2012-08-25' WHERE      t.Amount = 634.8 AND      c.Segment = 'SME' AND      c.Currency = 'EUR',SELECT      (SELECT SUM(Price) FROM transactions_1k AS t1 INNER JOIN yearmonth AS ym ON t1.Date = ym.Date WHERE t1.CustomerID = 634.8 AND ym.Date LIKE '2012%') -      (SELECT SUM(Price) FROM transactions_1k AS t1 INNER JOIN yearmonth AS ym ON t1.Date = ym.Date WHERE t1.CustomerID = 634.8 AND ym.Date LIKE '2013%') AS consumption_decrease_rate,0,0,0
Name the elements that comprise the atoms of bond TR001_2_4.,challenging,SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4',SELECT DISTINCT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_2_4',"Select the `element` from the `atom` table and the `label` from the `molecule` table.    - Apply the filter condition `bond_id = 'TR001_2_4'`.  Here is the constructed SQL query:  sql SELECT      atom.element,      molecule.label FROM      bond JOIN      atom ON bond.bond_id = atom.bond_id JOIN      molecule ON atom.molecule_id = molecule.molecule_id WHERE      bond.bond_id = 'TR001_2_4'",NULL,1,0,0
What percentage of cards without power are in French?,challenging,SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*',SELECT      CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.power) AS percentage FROM      set_translations AS T1 JOIN      cards AS T2 ON T1.setCode = T2.setCode WHERE      T2.power IS NULL OR T2.power = '*',SELECT      CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.power) FROM      set_translations AS T1 JOIN      cards AS T2 ON T1.setCode = T2.setCode WHERE      T2.power IS NULL OR T2.power = '*',NULL,0,0,0
List the superheroes from Marvel Comics who have the super power of 'Super Strength'.,challenging,SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id),SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength',"SELECT s.superhero_name, s.full_name, s.height_cm FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength'",NULL,1,0,0
What is the percentage of carcinogenic molecules in triple type bonds?,challenging,SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#',SELECT      CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percent FROM      molecule AS T1 JOIN      bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE      T1.label = '+',SELECT      CAST(SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond_id) AS percent FROM      bond JOIN      molecule ON bond.molecule_id = molecule.molecule_id JOIN      connected ON bond.bond_id = connected.bond_id WHERE      molecule.label = '+',NULL,0,0,0
Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?,challenging,"SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",NULL,NULL,"SELECT      bond.bond_type,      COUNT(bond.bond_type) AS bond_count,      molecule.label FROM      connected JOIN      bond ON connected.bond_id = bond.bond_id JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      bond.molecule_id = 'TR010' GROUP BY      bond.bond_type,      molecule.label ORDER BY      bond_count DESC LIMIT 1",0,0,0
What elements are in the TR004_8_9 bond atoms?,challenging,SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9',"Select the element column from the atom table    - Apply the filter for bond_id = 'TR004_8_9'  4. Query Review:    - Verify all table/column references: connected, bond, atom, molecule    - Check join conditions: connected.bond_id = bond.bond_id, connected.atom_id = atom.atom_id    - Confirm aggregations and groupings: None    - Validate against requirements: Correctly finds elements of atoms involved in the bond with bond_id 'TR004_8_9'  Final Query: sql SELECT T3.element FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_id = 'TR004_8_9'",Select distinct elements from the joined atom table  4. Query Review:    - All table/column references are correct    - Join conditions are valid    - No aggregations or groupings are needed    - ,NULL,0,0,0
Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.,challenging,SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id,SELECT superhero_count FROM (SELECT superhero_count FROM superhero GROUP BY publisher.publisher_name ORDER BY superhero_count DESC LIMIT 2) AS T1 9: - (SELECT superhero_count FROM (SELECT superhero_count FROM superhero GROUP BY publisher.publisher_name ORDER BY superhero_count DESC LIMIT 2) AS T2 WHERE T2.publisher_name = 'Marvel Comics') 10: AS difference  Final Query: sql SELECT superhero_count FROM (SELECT superhero_count FROM superhero GROUP BY publisher.publisher_name ORDER BY superhero_count DESC LIMIT 2) AS T1 - (SELECT superhero_count FROM (SELECT superhero_count FROM superhero GROUP BY publisher.publisher_name ORDER BY superhero_count DESC LIMIT 2) AS T2 WHERE T2.publisher_name = 'Marvel Comics') AS difference,NULL,SELECT      SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) -      SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM      superhero AS T1 INNER JOIN      publisher AS T2 ON T1.publisher_id = T2.id,0,0,1
Who has the highest average finishing rate between the highest and shortest football player?,challenging,"SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1","SELECT p.player_name, AVG(pa.finishing) AS avg_finishing_rate FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height IN (SELECT MAX(height) FROM Player), (SELECT MIN(height) FROM Player) GROUP BY p.player_name ORDER BY avg_finishing_rate DESC LIMIT 1","SELECT MIN(height) AS min_height, MAX(height) AS max_height     FROM Player ), FilteredPlayers AS (     SELECT p.player_name, pa.finishing     FROM Player p     JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id     JOIN HeightBounds hb ON p.height BETWEEN hb.min_height AND hb.max_height ) SELECT player_name, AVG(finishing) AS average_finishing_rate FROM FilteredPlayers GROUP BY player_name ORDER BY average_finishing_rate DESC LIMIT 1",NULL,0,0,0
"What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",challenging,SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S'),SELECT COUNT(DISTINCT Patient.ID) AS PatientCount FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 2 AND Examination.ANA = 'S' AND Examination.`aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination WHERE Thrombosis = 2 AND ANA = 'S') * 1.2,SELECT AVG(`aCL IgM`) AS avg_aCL_IgM FROM Examination WHERE Thrombosis = 2 AND ANA = 'S',NULL,0,0,0
On average how many carcinogenic molecules are single bonded?,challenging,"SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",NULL,NULL,NULL,0,0,0
How many percent of female heroes were published by Marvel Comics?,challenging,SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female',SELECT      CAST(SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM      superhero AS T1 JOIN      gender AS T2 ON T1.gender_id = T2.id JOIN      publisher AS T3 ON T1.publisher_id = T3.id WHERE      T3.publisher_name = 'Marvel Comics',"SELECT      ROUND(         CAST(SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id),          2     ) AS percentage_female_heroes FROM      superhero AS T1 JOIN      gender AS T2 ON T1.gender_id = T2.id JOIN      publisher AS T3 ON T1.publisher_id = T3.id WHERE      T3.publisher_name = 'Marvel Comics'",NULL,0,0,0
"Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",challenging,SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id,"SELECT publisher_name, COUNT(superhero_name) AS superhero_count,         SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) -         SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS difference FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id GROUP BY publisher_name ORDER BY difference DESC LIMIT 1",NULL,NULL,0,0,0
What are the elements of the toxicology and label of molecule TR060?,challenging,"SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",NULL,NULL,NULL,0,0,0
