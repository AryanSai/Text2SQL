Question,hardness,Gold,Prediction_0.1,Prediction_0.5,Prediction_1.0,EX_0.1,EX_0.5,EX_1.0
"Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",challenging,"SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",SELECT CAST((T1.fastestlapspeed - T2.fastestlapspeed) AS REAL) * 100 / T2.fastestlapspeed FROM results AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid AND T1.raceid = T2.raceid WHERE T1.driverid = ( SELECT driverid FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta' ) AND T1.number = 853 AND T2.number = 853 AND T1.fastestlapspeed IS NOT NULL AND T2.fastestlapspeed IS NOT NULL AND T1.raceid < T2.raceid ORDER BY T1.raceid DESC LIMIT 1,NULL,NULL,0,0,0
"For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",challenging,"SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",SELECT      (T2.consumption - T3.consumption) / T3.consumption AS decrease_rate FROM      transactions_1k AS T1 JOIN      yearmonth AS T2 ON T1.customerid = T2.customerid AND T1.date = T2.date JOIN      yearmonth AS T3 ON T1.customerid = T3.customerid AND T1.date = '2013-08-25' WHERE      T1.amount = 634.8 AND T1.date = '2012-08-25',NULL,NULL,0,0,0
What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?,challenging,"SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",SELECT CAST((T1.overall_rating - T2.overall_rating) AS REAL) * 100 / T2.overall_rating FROM player_attributes AS T1 JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date = '2013-07-12' AND T2.date = '2013-07-12' AND T1.player_name = 'Landon Donovan' AND T2.player_name = 'Jordan Bowery',SELECT ((SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') - (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12')) * 100 / (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12'),NULL,0,0,0
"Among the members who incurred expenses in more than one event, who paid the most amount?",challenging,SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1,"Select the member's first name, last name, and the total amount they paid across all events. Order the results by the total amount in descending order, and limit the output to the top 1 member. To achieve this, join the 'member' table with the 'expense' table on the 'link_to_member' column, group the results by the member's ID, and sum the 'cost' column for each member. Finally, order the grouped results by the sum in descending order and limit the output to 1 row.  Assistant: sql SELECT m.first_name, m.last_name, SUM(e.cost) AS total_amount FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_amount DESC LIMIT 1","SELECT m.member_id, m.first_name, m.last_name, SUM(e.cost) AS total_expense FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_expense DESC LIMIT 1",NULL,0,0,0
Name the elements that comprise the atoms of bond TR001_2_4.,challenging,SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4',SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4',SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4',Select T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4',1,1,1
"List all the elements with double bond, consisted in molecule TR024.",challenging,SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '=',SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T3.bond_type = 'double' AND T4.label = 'TR024',SELECT T1.element FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = 'double' AND T1.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR024'),NULL,0,0,0
"For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",challenging,"SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",SELECT T1.team_long_name FROM team AS T1 JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplaydribblingclass = 'Normal' AND T2.season = '2014' AND T2.chancecreationpassing < ( SELECT AVG(chancecreationpassing) FROM team_attributes WHERE season = '2014' ) ORDER BY T2.chancecreationpassing DESC,NULL,NULL,0,0,0
"Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",challenging,SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist,"SELECT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND setcode = 'Coldsnap'","Select artist from cards where artist in ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') and setcode = 'Coldsnap'","Select artist from cards where artist in ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') and setcode = 'Coldsnap'",0,0,0
What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.,challenging,"WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label","SELECT CAST(SUM(CASE WHEN T1.element = 'H' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) ,  'H_ratio' FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR006'",NULL,"SELECT CAST(SUM(CASE WHEN T1.element = 'H' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) AS ratio, 'TR006' AS label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR006'",0,0,0
"From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",challenging,"SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",SELECT CAST(SUM(CASE WHEN T1.dob < '1985-01-01' AND T2.lap > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.driverid) FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T1.year BETWEEN 2000 AND 2005,NULL,NULL,0,0,0
How many underage patients were examined during the course of the three-year period from 1990 to 1993?,challenging,"SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.sex = 'F' AND T1.birthday BETWEEN '1990-01-01' AND '1993-12-31',Select count(DISTINCT T1.id) from patient AS T1 JOIN examination AS T2 ON T1.id = T2.id WHERE T1.sex = 'F' AND T1.birthday BETWEEN '1990-01-01' AND '1993-12-31',SELECT COUNT(DISTINCT p.id)  FROM patient p  JOIN examination e ON p.id = e.id  WHERE p.birthday > '1993-12-31' AND e.`examination date` BETWEEN '1990-01-01' AND '1993-12-31',0,0,0
Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?,challenging,"SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T","SELECT bond_type, COUNT(*) as bond_count,         CASE WHEN MAX(COUNT(*)) OVER () > COUNT(*) THEN 'No' ELSE 'Yes' END as is_majority,        (SELECT label FROM molecule WHERE molecule_id = 'TR010') as molecule_label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule_id = 'TR010' GROUP BY bond_type","SELECT T2.bond_type, T3.carcinogenic FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id JOIN molecule_properties AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.label = 'TR010' GROUP BY T2.bond_type ORDER BY COUNT(*) DESC LIMIT 1",NULL,0,0,0
Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.,challenging,SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010,SELECT      (CAST(SUM(CASE WHEN r.position != 1 THEN 1 ELSE 0 END) AS REAL) * 100) / COUNT(r.raceid) AS percentage_not_at_first_track FROM      results r JOIN      drivers d ON r.driverid = d.driverid JOIN      races ra ON r.raceid = ra.raceid WHERE      d.surname = 'Hamilton' AND ra.year >= 2010,Select count(*) from ( Select * from results r inner join drivers d on r.driverid = d.driverid inner join races rc on r.raceid = rc.raceid where d.surname = 'Hamilton' and rc.year >= 2010 and r.position != 1 ) / ( select count(*) from results r inner join drivers d on r.driverid = d.driverid inner join races rc on r.raceid = rc.raceid where d.surname = 'Hamilton' and rc.year >= 2010 ) * 100 ,SELECT COUNT(*) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T3.driverid = T2.driverid WHERE T3.surname = 'Hamilton' AND T2.position != 1 AND T1.year >= 2010) / (SELECT COUNT(*) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T3.driverid = T2.driverid WHERE T3.surname = 'Hamilton' AND T1.year >= 2010) * 100,0,0,0
Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.,challenging,SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h',SELECT CAST(SUM(CASE WHEN T1.bond_type = 'triple' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM bond AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'H',NULL,"SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element = 'H' AND b.bond_type = 'triple'",0,0,0
"What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",challenging,SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1,SELECT T1.diagnosis FROM examination AS T1 JOIN patient AS T2 ON T1.id = T2.id WHERE T1.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.diagnosis ORDER BY COUNT(*) DESC LIMIT 1,Select diagnosis from examination where date between '1985-01-01' and '1995-12-31' group by diagnosis order by count(*) desc limit 1,NULL,1,0,0
List the elements of all the triple bonds.,challenging,SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#',SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = 'triple',"Select the elements of all the triple bonds from the database. To achieve this, you need to join the 'atom' table with the 'bond' table on the 'molecule_id' column, filter for 'bond_type' equal to 'triple', and then select the 'element' column from the 'atom' table. To ensure each element is listed only once, use the DISTINCT keyword.  SQLite Query: SELECT DISTINCT T1.element FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = 'triple'",NULL,0,0,0
Who has the highest average finishing rate between the highest and shortest football player?,challenging,"SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",SELECT T1.player_name FROM player AS T1 JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = ( SELECT MAX(finishing) FROM player_attributes ) OR T2.finishing = ( SELECT MIN(finishing) FROM player_attributes ) ORDER BY T1.height DESC LIMIT 1,Select the player_name from player where player_api_id in ( Select home_player_1 from match where home_team_goal = ( Select max(home_team_goal) from match ) ) and player_api_id in ( Select away_player_1 from match where away_team_goal = ( Select max(away_team_goal) from match ) ) and player_api_id in ( Select home_player_1 from match where home_team_goal = ( Select min(home_team_goal) from match ) ) and player_api_id in ( Select away_player_1 from match where away_team_goal = ( Select min(away_team_goal) from match ) ) and player_api_id in ( Select home_player_1 from match where home_team_goal = ( Select max(home_team_goal) from match ) ) and player_api_id in ( Select away_player_1 from match where away_team_goal = ( Select max(away_team_goal) from match ) ) and player_api_id in ( Select home_player_1 from match where home_team_goal = ( Select min(home_team_goal) from match ) ) and player_api_id in ( Select away_player_1 from match where away_team_goal = ( Select min(away_team_goal) from match ) ) and player_api_id in ( Select home_player_1 from match where home_team_goal = ( Select max(home_team_goal) from match ) ) and player_api_id in ( Select away_player_1 from match where away_team_goal = ( Select max(away_team_goal) from match ),"SELECT player_name, AVG(finishing) AS avg_finishing FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE height = (SELECT MIN(height) FROM player) OR height = (SELECT MAX(height) FROM player) GROUP BY player_id ORDER BY avg_finishing DESC LIMIT 1",0,0,0
Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.,challenging,SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id,SELECT      (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC')) -      (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference,NULL,SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference,0,0,0
Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.,challenging,"WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20","SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds ASC LIMIT 1","Select T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds ASC LIMIT 1",NULL,0,0,0
"Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",challenging,"SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')","SELECT T1.school, T1.doc, T1.doctype FROM schools AS T1 JOIN frpm AS T2 ON T1.cdscode = T2.cdscode WHERE T2.fundingtype = 'Local' AND ABS(T2.enrollment - T2.`enrollment (ages 5-17)`) > ( SELECT AVG(ABS(T2.enrollment - T2.`enrollment (ages 5-17)`)) FROM frpm AS T2 WHERE T2.fundingtype = 'Local' ) ",NULL,NULL,0,0,0
Name chemical elements that form a bond TR001_10_11.,challenging,SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11',SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.molecule_id = 'TR001_10_11',SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.molecule_id = 'TR001_10_11',SELECT DISTINCT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.molecule_id = ( SELECT molecule_id FROM molecule WHERE label = 'TR001_10_11' ) AND T2.bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id = ( SELECT molecule_id FROM molecule WHERE label = 'TR001_10_11' ) ) ,0,0,0
What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.,challenging,"SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'","SELECT COUNT(*) ,  COUNT(CASE WHEN T1.alignment = 'Self-Interest' THEN 1 ELSE NULL END) ,  COUNT(CASE WHEN T1.alignment = 'Moral Code' THEN 1 ELSE NULL END) ,  COUNT(CASE WHEN T1.alignment = 'Self-Interest' AND T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) FROM alignment AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.alignment_id WHERE T1.alignment IN ('Self-Interest', 'Moral Code')","SELECT      (SUM(CASE WHEN T1.alignment = 'Self-Interest' OR T1.alignment = 'Moral Code' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.id)) AS percentage,     COUNT(CASE WHEN T1.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') THEN 1 ELSE 0 END) AS marvel_count FROM      alignment AS T1 JOIN      superhero AS T2 ON T1.id = T2.alignment_id WHERE      T1.alignment IN ('Self-Interest', 'Moral Code')",NULL,0,0,0
List the element and bond type included in the molecule with molecule ID of TR002.,challenging,"SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'","SELECT T1.element, T2.bond_type FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'","SELECT T1.element, T2.bond_type FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'","Select T1.element, T2.bond_type FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002' AND T2.molecule_id = 'TR002'",1,1,1
Please list the lap records for the circuits in Italy.,challenging,"WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1","SELECT T1.lap, T1.position, T1.time, T1.milliseconds FROM laptimes AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Italy'","Select T1.lap, T1.position, T1.time, T1.milliseconds FROM laptimes AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Italy'","SELECT T1.lap, T1.position, T1.time, T1.milliseconds FROM laptimes AS T1 INNER JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Italy'",0,0,0
What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?,challenging,SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social',SELECT T1.event_name FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T1.location = '900 E. Washington St.' AND T1.type = 'Social',Select T1.event_name FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T1.location = '900 E. Washington St.' AND T1.type = 'social',NULL,1,0,0
"Among all the lap records set on various circuits, what is the time for the fastest one?",challenging,"SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",SELECT MIN(time) FROM laptimes,select the minimum value of the time column from the laptimes table. ,SELECT MIN(time) AS fastest_lap_time FROM laptimes,0,0,0
"What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",challenging,SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S'),SELECT COUNT(DISTINCT p.id) FROM patient p JOIN examination e ON p.id = e.id WHERE e.thrombosis = 2 AND e.ana pattern = 'S' AND e.acl igm > ( SELECT AVG(acl igm) FROM examination WHERE ana pattern = 'S' ),Select count(*) from examination where thrombosis = 2 and ana pattern = 'S' and acl igm > (select avg(acl igm) from examination where thrombosis = 2 and ana pattern = 'S'),SELECT COUNT(DISTINCT p.id) FROM patient p JOIN examination e ON p.id = e.id WHERE p.sex = 'F' AND p.birthday BETWEEN '1950-01-01' AND '1970-12-31' AND e.thrombosis = 2 AND e.ana_pattern = 'S' AND e.acl_igm > (SELECT AVG(acl_igm) * 1.2 FROM examination),0,0,0
List the long name of teams with above-average build-up play passing in 2012.,challenging,"SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",SELECT T1.team_long_name FROM team AS T1 JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplaypassing > ( SELECT AVG(buildupplaypassing) FROM team_attributes WHERE date LIKE '2012%' ) AND T2.date LIKE '2012%',Select T1.team_long_name FROM team AS T1 JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplaypassing > ( SELECT AVG(buildupplaypassing) FROM team_attributes WHERE date LIKE '2012%' ) AND T2.date LIKE '2012%',NULL,1,1,0
List all the elements of atoms that can not bond with any other atoms.,challenging,SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id ),SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected),Select element from atom where atom_id not in (select atom_id from connected) union select element from atom where atom_id not in (select atom_id2 from connected),"Select these atoms' elements from the 'atom' table. To achieve this, use a NOT IN clause to exclude atoms that have bond connections in the 'connected' table.  SQLite query: SELECT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected ) ",0,0,0
"Among all the posts posted by the most influential user, identify the percentage with a score above 50.",challenging,SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation,Select CAST(SUM(CASE WHEN T2.score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM users AS T1 JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T1.reputation = ( SELECT MAX(reputation) FROM users ) ,NULL,NULL,1,0,0
Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.,challenging,"SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )","SELECT T1.id, (strftime('%Y', 'now') - strftime('%Y', T1.birthday)) AS age FROM patient AS T1 JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.hct > 45 GROUP BY T1.id HAVING COUNT(T2.id) >= 2",NULL,"SELECT T1.id, julianday(T1.admission) - julianday(T1.birthday) as age FROM patient AS T1 JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.hct > 47 GROUP BY T1.id HAVING count(*) >= 2) ",0,0,0
How many atoms with iodine and with sulfur type elements are there in single bond molecules?,challenging,"SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'","SELECT COUNT(*) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element IN ('I', 'S') AND T3.bond_type = 'single'",NULL,NULL,0,0,0
Give the full name and contact number of members who had to spend more than average on each expense.,challenging,"SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )","SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > ( SELECT AVG(cost) FROM expense ) ","SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense) GROUP BY T1.member_id HAVING COUNT(T2.expense_id) > 1",select members who spent more than this average on any single expense. Join the member table with the expense table on the member_id column. Use the AVG() function to calculate the average expense per member and a WHERE clause to filter members based on the average expense. :      ,1,1,0
What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?,challenging,"SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",SELECT AVG(T1.overall_rating) FROM player_attributes AS T1 JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007/2/22' AND '2016/4/21',SELECT AVG(T1.overall_rating) FROM player_attributes AS T1 JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007/2/22' AND '2016/4/21',Select AVG(T1.overall_rating) FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007/2/22' AND '2016/4/21',0,0,0
"For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",challenging,SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID,NULL,"SELECT      (SELECT COUNT(*) FROM patient WHERE id IN (SELECT patient_id FROM laboratory WHERE plt < 150)) AS lower_than_normal,     (SELECT COUNT(*) FROM patient WHERE id IN (SELECT patient_id FROM laboratory WHERE plt > 350)) AS higher_than_normal",NULL,0,0,0
"Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",challenging,SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1,"SELECT p.id, p.title, p.viewcount FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY p.viewcount DESC LIMIT 1","SELECT p1.id, p1.title, p1.viewcount FROM posts p1 JOIN users u1 ON p1.owneruserid = u1.id WHERE u1.displayname IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY p1.viewcount DESC LIMIT 1",NULL,0,0,0
What percentage of carcinogenic-type molecules does not contain fluorine?,challenging,SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+',SELECT CAST(SUM(CASE WHEN T1.bond_type = 'carcinogenic' AND T3.element != 'Fl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_type) FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id,Select CAST(SUM(CASE WHEN T1.bond_type = 'carcinogenic' AND T3.element != 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_type) FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T2.atom_id = T3.atom_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id,SELECT COUNT(*) FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label LIKE '%carcinogenic%' AND T2.element != 'Fluorine') * 100 / (SELECT COUNT(*) FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label LIKE '%carcinogenic%') ,0,0,0
"Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",challenging,"SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id","SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",NULL,"SELECT T1.superhero_name, T1.full_name, T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN colour AS T3 ON T1.eye_colour_id = T3.id JOIN colour AS T4 ON T1.hair_colour_id = T4.id JOIN colour AS T5 ON T1.skin_colour_id = T5.id WHERE T3.colour = T4.colour AND T4.colour = T5.colour",1,0,0
How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?,challenging,"WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)","SELECT      ROUND((1 - (MIN(T1.milliseconds) / MAX(T1.milliseconds))) * 100, 2) || '%' AS ""percentage_faster"" FROM      results AS T1 JOIN      races AS T2 ON T1.raceid = T2.raceid JOIN      driverstandings AS T3 ON T1.driverid = T3.driverid WHERE      T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T3.position = 1",NULL,NULL,0,0,0
Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.,challenging,"SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'","SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'","Select T1.first_name, T1.last_name, T2.amount FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'","SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'",1,1,1
"For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?",challenging,SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' ),SELECT CAST(SUM(CASE WHEN T1.hasnonfoil = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setcode = T2.setcode WHERE T2.language = 'Japanese',NULL,NULL,0,0,0
What are the elements of the atoms of TR144_8_19?,challenging,SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19',SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR144_8_19',SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR144_8_19',Select the elements of the atoms of TR144_8_19 from the atom table connected to the molecule table via the molecule_id. Filter by the molecule label 'TR144_8_19'.,0,0,0
What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?,challenging,"SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'","SELECT      (SUM(CASE WHEN T1.year = 1997 THEN T2.amount ELSE 0 END) - SUM(CASE WHEN T1.year = 1996 THEN T2.amount ELSE 0 END)) /      SUM(CASE WHEN T1.year = 1996 THEN T2.amount ELSE 0 END) * 100 AS growth_rate FROM (     SELECT          strftime('%Y', T2.date) AS year     FROM          client AS T1     JOIN          disp AS T2 ON T1.client_id = T2.client_id     JOIN          loan AS T3 ON T2.account_id = T3.account_id     WHERE          T1.gender = 'M' AND T2.type = 'saving' AND T3.status = 'open' ) AS T1 JOIN      loan AS T2 ON T1.year = strftime('%Y', T2.date)","Select the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997. To achieve this, we need to calculate the sum of the loan amounts for male clients in the specified date range and then find the growth rate between the first and last year of the range. However, the provided query does not correctly calculate the growth rate. ",NULL,0,0,0
"Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",challenging,"SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1","SELECT T1.points, T2.name, T2.nationality FROM constructorresults AS T1 JOIN constructors AS T2 ON T1.constructorid = T2.constructorid JOIN races AS T3 ON T1.raceid = T3.raceid WHERE T3.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Monaco Grand Prix' ) AND T3.year BETWEEN 1980 AND 2010 ORDER BY T1.points DESC LIMIT 1","Select T1.points, T2.name, T2.nationality from constructorresults AS T1 JOIN constructors AS T2 ON T1.constructorid = T2.constructorid JOIN races AS T3 ON T1.raceid = T3.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 ORDER BY T1.points DESC LIMIT 1",NULL,0,0,0
What is the composition of element chlorine in percentage among the single bond molecules?,challenging,"SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",SELECT CAST(SUM(CASE WHEN T1.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = 'single',"SELECT ROUND((COUNT(CASE WHEN T1.element = 'Cl' THEN 1 ELSE NULL END) * 100.0) / COUNT(T1.element), 2) AS percentage FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T2.bond_type = 'single'",NULL,0,0,0
Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.,challenging,"SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100","SELECT T1.event_name, T1.event_date FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description LIKE '%pizza%' AND T2.cost BETWEEN 50 AND 100","SELECT T1.event_name, T1.event_date FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description = 'pizza' AND T2.cost BETWEEN 50 AND 100","Select T1.event_name, T1.event_date FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description LIKE '%pizza%' AND T2.cost BETWEEN 50 AND 100",0,0,0
"Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",challenging,SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000,SELECT T1.type FROM card AS T1 JOIN disp AS T2 ON T1.card_id = T2.card_id JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.account_id NOT IN ( SELECT account_id FROM loan ) AND T3.district_id IN ( SELECT district_id FROM client WHERE ( ( SELECT AVG(amount) FROM trans WHERE account_id = T3.account_id ) BETWEEN 8000 AND 9000 ) ) GROUP BY T1.type,NULL,SELECT DISTINCT T1.type  FROM card AS T1  LEFT JOIN account AS T2 ON T1.card_id = T2.card_id  WHERE T2.account_id NOT IN (SELECT account_id FROM loan)   UNION   SELECT AVG(T3.income)  FROM district AS T1  JOIN client AS T2 ON T1.district_id = T2.district_id  JOIN (SELECT SUM(T4.amount) / COUNT(T4.date) AS income FROM account AS T4 JOIN trans AS T5 ON T4.account_id = T5.account_id WHERE T5.type = 'PRIJEM') AS T3 ON 1 = 1  WHERE T1.a8 BETWEEN 8000 AND 9000,0,0,0
How many elements are contained in bond_id TR001_3_4?,challenging,SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4',SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4',Select count(*) from atom where atom_id in (select atom_id from connected where bond_id = 'TR001_3_4'),NULL,1,0,0
"What is the average time in seconds of champion for each year, before year 1975?",challenging,"WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL","SELECT AVG(T1.milliseconds / 1000) ,  T2.year FROM results AS T1 JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.position = 1 AND T2.year < 1975 GROUP BY T2.year","SELECT AVG(T1.milliseconds / 1000.0) ,  T2.year FROM results AS T1 JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.position = 1 AND T2.year < 1975 GROUP BY T2.year",NULL,0,0,0
"For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",challenging,SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1,SELECT CAST(SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM client WHERE district_id IN ( SELECT district_id FROM district WHERE a1 = 'S' AND a2 = 'O' AND a3 = 'B' AND a4 = 'H' AND a5 = 'E' AND a6 = 'M' AND a7 = 'I' AND a8 = 'A' AND a9 = 'N' AND a10 = 'A' AND a11 = 'T' AND a12 = 'S' AND a13 = 'O' AND a14 = 'U' AND a15 = 'S' AND a16 = 'T' ) ,SELECT      (COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100.0 / COUNT(client_id)) AS male_percentage FROM      client WHERE      district_id = (         SELECT              district_id         FROM              district         WHERE              a1 = 'south Bohemia'         ORDER BY              SUM(a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + a13 + a14 + a15 + a16) DESC         LIMIT 1     ),NULL,0,0,0
