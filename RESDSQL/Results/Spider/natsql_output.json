[
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "sql": "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "sql": "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights where  flights.destairport = \"ATO\""
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "sql": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon   order by cartoon.title asc"
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "sql": "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee  group by employee.city having  count(*) > 30"
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "sql": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Templates where  templates.template_type_code = \"CV\""
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon   order by cartoon.title asc"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "sql": "select country.continent from country where  country.name = \"Anguilla\""
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code having  count(*) > 50"
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "sql": "select count(*) from continents"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "sql": "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "sql": "select players.hand , count(*) from players  group by players.hand"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "sql": "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "sql": "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "sql": "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count( distinct shop.location) from shop"
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "sql": "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "sql": "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon   order by cartoon.title asc"
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "sql": "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "sql": "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "sql": "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "sql": "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name , documents.document_description from Documents"
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population asc limit 3"
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "sql": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "sql": "select highschooler.name , highschooler.grade from Highschooler"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "sql": "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "sql": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "sql": "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "sql": "select avg(poker_player.earnings) from poker_player"
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "sql": "select distinct dogs.breed_code , dogs.size_code from Dogs"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "sql": "select singer.country , count(*) from singer  group by singer.country"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "sql": "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.airportcode = \"AKO\""
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "sql": "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "sql": "select people.name , people.birth_date from people   order by people.name asc"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "sql": "select singer.name from singer   order by singer.net_worth_millions asc"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "sql": "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "sql": "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "Give me Brazil's population and life expectancies.",
        "db_id": "world_1",
        "sql": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\""
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_description from Courses where  courses.course_name = \"math\""
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_description from Sections where  sections.section_name = \"h\""
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "sql": "select max(matches.loser_rank) from matches"
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "sql": "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "sql": "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee  group by employee.city having  count(*) > 30"
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "sql": "select people.nationality , count(*) from people  group by people.nationality"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "sql": "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct templates.template_type_code from Templates"
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "sql": "select count(*) from continents"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "sql": "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "sql": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "sql": "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "sql": "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "sql": "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "sql": "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon   order by cartoon.title asc"
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "sql": "select highschooler.name , highschooler.grade from Highschooler"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "sql": "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "sql": "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "sql": "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "sql": "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "sql": "select count(*) , likes.student_id from Likes  group by likes.student_id"
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "sql": "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "sql": "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "sql": "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.airportcode = \"AKO\""
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "sql": "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "sql": "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "sql": "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "sql": "select max(matches.loser_rank) from matches"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "sql": "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 6"
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "sql": "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "sql": "select highschooler.name , highschooler.grade from Highschooler"
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "sql": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "sql": "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Transcripts"
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 6"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.airportcode = \"AKO\""
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "sql": "select avg(matches.winner_rank) from matches"
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "sql": "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "sql": "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "sql": "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "sql": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "sql": "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "sql": "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.horsepower > 150"
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population asc limit 3"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "sql": "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.airportcode = \"AKO\""
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "sql": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "sql": "select count(*) , likes.student_id from Likes  group by likes.student_id"
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "sql": "select max(matches.loser_rank) from matches"
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "sql": "select dogs.age from Dogs   order by dogs.age desc limit 1"
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population asc limit 3"
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "sql": "select count(*) from players"
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "sql": "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "sql": "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "sql": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "sql": "select players.country_code , count(*) from players  group by players.country_code"
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "sql": "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "sql": "select count(*) from players"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population asc limit 3"
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines where  airlines.country = \"USA\""
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "sql": "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "sql": "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "sql": "select avg(matches.winner_rank) from matches"
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "sql": "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher   order by teacher.age asc"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "sql": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "sql": "select avg(poker_player.earnings) from poker_player"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name , sections.section_description from Sections"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines where  airlines.country = \"USA\""
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "sql": "select count(*) from players"
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines where  airlines.country = \"USA\""
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights where  flights.destairport = \"ATO\""
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "sql": "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name , documents.document_description from Documents"
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "sql": "select count( distinct treatments.professional_id) from Treatments"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "sql": "select singer.country , count(*) from singer  group by singer.country"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "sql": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "sql": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "sql": "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "sql": "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "sql": "select people.nationality , count(*) from people  group by people.nationality"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_description from Courses where  courses.course_name = \"math\""
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "sql": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "sql": "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Transcripts"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "sql": "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "sql": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "sql": "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "sql": "select matches.year , count(*) from matches  group by matches.year"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "sql": "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "How long is the people's average life expectancy in Central Africa?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\""
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "sql": "select count(*) , likes.student_id from Likes  group by likes.student_id"
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "sql": "select singer.name from singer   order by singer.net_worth_millions asc"
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "sql": "select avg(matches.winner_rank) from matches"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "sql": "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "sql": "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count( distinct shop.location) from shop"
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name , documents.document_description from Documents"
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "sql": "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "sql": "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "sql": "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "sql": "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "sql": "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "sql": "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "sql": "select singer.name from singer   order by singer.net_worth_millions asc"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "sql": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "sql": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "sql": "select dogs.age from Dogs   order by dogs.age desc limit 1"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct templates.template_type_code from Templates"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "sql": "select count( distinct treatments.professional_id) from Treatments"
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "sql": "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "sql": "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "sql": "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "sql": "select distinct dogs.breed_code , dogs.size_code from Dogs"
    },
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "sql": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "sql": "select highschooler.name , highschooler.grade from Highschooler"
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "sql": "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "sql": "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "sql": "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "sql": "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "sql": "select avg(poker_player.earnings) from poker_player"
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "sql": "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name , documents.document_description from Documents"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 6"
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "sql": "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "sql": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs"
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "sql": "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.department_id) from Degree_Programs"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "sql": "select count( distinct pets.pettype) from Pets"
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "sql": "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "sql": "select death.note from death where  death.note like \"%East%\""
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher   order by teacher.age asc"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "sql": "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "sql": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "sql": "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "sql": "select death.note from death where  death.note like \"%East%\""
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "sql": "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "sql": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights where  flights.destairport = \"ATO\""
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "sql": "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.horsepower > 150"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "sql": "select distinct dogs.breed_code , dogs.size_code from Dogs"
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_description from Sections where  sections.section_name = \"h\""
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "Give me Brazil's population and life expectancies.",
        "db_id": "world_1",
        "sql": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\""
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "sql": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "sql": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "sql": "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "sql": "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "sql": "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name , documents.document_description from Documents"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "sql": "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "sql": "select highschooler.name , highschooler.grade from Highschooler"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "sql": "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "sql": "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "sql": "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "sql": "select singer.country , count(*) from singer  group by singer.country"
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "sql": "select matches.year , count(*) from matches  group by matches.year"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "sql": "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "sql": "select distinct dogs.breed_code , dogs.size_code from Dogs"
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "sql": "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population asc limit 3"
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "sql": "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "sql": "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "sql": "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "sql": "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "sql": "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "sql": "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher   order by teacher.age asc"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Give me Brazil's population and life expectancies.",
        "db_id": "world_1",
        "sql": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\""
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "Give me Brazil's population and life expectancies.",
        "db_id": "world_1",
        "sql": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\""
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "sql": "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "sql": "select max(matches.loser_rank) from matches"
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "sql": "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "sql": "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "sql": "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "sql": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "sql": "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "sql": "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "sql": "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "sql": "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "sql": "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "sql": "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights where  flights.destairport = \"ATO\""
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "sql": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "sql": "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "sql": "select players.hand , count(*) from players  group by players.hand"
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "sql": "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "sql": "select matches.year , count(*) from matches  group by matches.year"
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "sql": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Templates where  templates.template_type_code = \"CV\""
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "sql": "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "sql": "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct addresses.address_id) from Addresses"
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "sql": "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches"
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "sql": "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "sql": "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Transcripts"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "sql": "select players.country_code , count(*) from players  group by players.country_code"
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "sql": "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "sql": "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines where  airlines.country = \"USA\""
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents"
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "sql": "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.nationality != \"Russia\""
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "sql": "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "sql": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "sql": "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "sql": "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "sql": "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "sql": "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "sql": "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "sql": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.age asc"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "sql": "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "How long is the people's average life expectancy in Central Africa?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\""
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "sql": "select count( distinct pets.pettype) from Pets"
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "sql": "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "sql": "select people.nationality , count(*) from people  group by people.nationality"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "sql": "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "sql": "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.age , teacher.hometown from teacher"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "sql": "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "sql": "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "sql": "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "sql": "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "sql": "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct templates.template_type_code from Templates"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "sql": "select country.continent from country where  country.name = \"Anguilla\""
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "sql": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "sql": "select count(*) , friend.student_id from Friend  group by friend.student_id"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.airportcode = \"AKO\""
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "sql": "select avg(matches.winner_rank) from matches"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.nationality != \"Russia\""
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "sql": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "sql": "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "sql": "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count( distinct templates.template_id) from Templates"
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "sql": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_description from Sections where  sections.section_name = \"h\""
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "sql": "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "sql": "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name , documents.document_description from Documents"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "sql": "select singer.country , count(*) from singer  group by singer.country"
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 4"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee  group by employee.city having  count(*) > 30"
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "sql": "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "sql": "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "sql": "select max(matches.loser_rank) from matches"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct addresses.address_id) from Addresses"
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Give me Brazil's population and life expectancies.",
        "db_id": "world_1",
        "sql": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\""
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code having  count(*) > 50"
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "sql": "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "sql": "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count( distinct templates.template_id) from Templates"
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "sql": "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "sql": "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Templates where  templates.template_type_code = \"CV\""
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "sql": "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "sql": "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "sql": "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "sql": "select count(*) from continents"
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "sql": "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "sql": "select singer.citizenship , count(*) from singer  group by singer.citizenship"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.horsepower > 150"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.horsepower > 150"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "sql": "select max(matches.loser_rank) from matches"
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "sql": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "sql": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "sql": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_description from Courses where  courses.course_name = \"math\""
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "sql": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "sql": "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "sql": "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "sql": "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee  group by employee.city having  count(*) > 30"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "sql": "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.age , teacher.hometown from teacher"
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "sql": "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "sql": "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.age asc"
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population asc limit 3"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "sql": "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "sql": "select country.continent from country where  country.name = \"Anguilla\""
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "sql": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "sql": "select matches.year , count(*) from matches  group by matches.year"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "sql": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee  group by employee.city having  count(*) > 30"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.nationality != \"Russia\""
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "sql": "select singer.citizenship , count(*) from singer  group by singer.citizenship"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "sql": "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "sql": "select death.note from death where  death.note like \"%East%\""
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "sql": "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count( distinct shop.location) from shop"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "sql": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "sql": "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "sql": "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count( distinct shop.location) from shop"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "sql": "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name , sections.section_description from Sections"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "sql": "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "sql": "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "sql": "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code having  count(*) > 50"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "sql": "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "sql": "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 4"
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "sql": "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "sql": "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "sql": "select singer.name from singer   order by singer.net_worth_millions asc"
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "sql": "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count( distinct templates.template_id) from Templates"
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "sql": "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "sql": "select people.nationality , count(*) from people  group by people.nationality"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "sql": "select count(*) , friend.student_id from Friend  group by friend.student_id"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines where  airlines.country = \"USA\""
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "sql": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher   order by teacher.age asc"
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code having  count(*) > 50"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "sql": "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.horsepower > 150"
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.age asc"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents"
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.age , teacher.hometown from teacher"
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "sql": "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "sql": "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "sql": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "sql": "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "sql": "select max(matches.loser_rank) from matches"
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "sql": "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "sql": "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "sql": "select singer.citizenship , count(*) from singer  group by singer.citizenship"
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "sql": "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "sql": "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "sql": "select avg(matches.winner_rank) from matches"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "sql": "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 6"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "sql": "select people.name , people.birth_date from people   order by people.name asc"
    },
    {
        "input": "How long is the people's average life expectancy in Central Africa?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\""
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon   order by cartoon.title asc"
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "How long is the people's average life expectancy in Central Africa?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\""
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "sql": "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "sql": "select count(*) , friend.student_id from Friend  group by friend.student_id"
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "sql": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "sql": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "sql": "select avg(matches.winner_rank) from matches"
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "sql": "select singer.country , count(*) from singer  group by singer.country"
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "sql": "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "sql": "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "sql": "select dogs.age from Dogs   order by dogs.age desc limit 1"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "sql": "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "sql": "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "sql": "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name , sections.section_description from Sections"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.age , teacher.hometown from teacher"
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "sql": "select count(*) from players"
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "sql": "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "sql": "select people.name , people.birth_date from people   order by people.name asc"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "sql": "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "sql": "select singer.name from singer   order by singer.net_worth_millions asc"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "sql": "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee  group by employee.city having  count(*) > 30"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "sql": "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "sql": "select avg(poker_player.earnings) from poker_player"
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "sql": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "sql": "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "sql": "select count( distinct treatments.professional_id) from Treatments"
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "sql": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "sql": "select count(*) from TV_Channel where  tv_channel.language = \"English\""
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "sql": "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "sql": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "sql": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "sql": "select players.hand , count(*) from players  group by players.hand"
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "sql": "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "sql": "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "sql": "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "sql": "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "sql": "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "sql": "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "sql": "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "sql": "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher   order by teacher.age asc"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "sql": "select count( distinct pets.pettype) from Pets"
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "sql": "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "sql": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "sql": "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "sql": "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "sql": "select count(*) , friend.student_id from Friend  group by friend.student_id"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "sql": "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count( distinct templates.template_id) from Templates"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "sql": "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "sql": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "sql": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "sql": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "sql": "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "sql": "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler"
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "sql": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "sql": "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "sql": "select avg(matches.winner_rank) from matches"
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "sql": "select count(*) from players"
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "sql": "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines where  airlines.country = \"USA\""
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "sql": "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "sql": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "sql": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name , sections.section_description from Sections"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count( distinct templates.template_id) from Templates"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler"
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher   order by teacher.age asc"
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select max(stadium.capacity) , avg(stadium.average) from stadium"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "sql": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.airportcode = \"AKO\""
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "sql": "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "sql": "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "sql": "select highschooler.name , highschooler.grade from Highschooler"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage"
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "sql": "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "sql": "select count(*) , likes.student_id from Likes  group by likes.student_id"
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "sql": "select dogs.age from Dogs   order by dogs.age desc limit 1"
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "sql": "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "sql": "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "sql": "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler"
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights where  flights.destairport = \"ATO\""
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "sql": "select players.hand , count(*) from players  group by players.hand"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.age asc"
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "sql": "select count(*) , friend.student_id from Friend  group by friend.student_id"
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 4"
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "sql": "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count( distinct templates.template_id) from Templates"
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "sql": "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "sql": "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select max(stadium.capacity) , avg(stadium.average) from stadium"
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "sql": "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.department_id) from Degree_Programs"
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "sql": "select singer.citizenship , count(*) from singer  group by singer.citizenship"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "sql": "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "sql": "select avg(poker_player.earnings) from poker_player"
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "sql": "select count(*) from continents"
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "sql": "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name , sections.section_description from Sections"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "sql": "select singer.citizenship , count(*) from singer  group by singer.citizenship"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "sql": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "sql": "select death.note from death where  death.note like \"%East%\""
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "sql": "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "sql": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "sql": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.nationality != \"Russia\""
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "sql": "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "sql": "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "sql": "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "sql": "select people.nationality , count(*) from people  group by people.nationality"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "sql": "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "sql": "select players.country_code , count(*) from players  group by players.country_code"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "sql": "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "Give me Brazil's population and life expectancies.",
        "db_id": "world_1",
        "sql": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\""
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "sql": "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "sql": "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code having  count(*) > 50"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs"
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents"
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "sql": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "sql": "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.department_id) from Degree_Programs"
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "sql": "select count(*) from TV_Channel where  tv_channel.language = \"English\""
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "sql": "select matches.year , count(*) from matches  group by matches.year"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "sql": "select count( distinct pets.pettype) from Pets"
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines where  airlines.country = \"USA\""
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "sql": "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "sql": "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.department_id) from Degree_Programs"
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.age asc"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Templates where  templates.template_type_code = \"CV\""
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "sql": "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "sql": "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "sql": "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "sql": "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "sql": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.age asc"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "sql": "select count(*) from continents"
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "sql": "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "sql": "select count(*) from TV_Channel where  tv_channel.language = \"English\""
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "sql": "select highschooler.name , highschooler.grade from Highschooler"
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city , count(*) from employee  group by employee.city"
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents"
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "sql": "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select max(stadium.capacity) , avg(stadium.average) from stadium"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "sql": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct addresses.address_id) from Addresses"
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.age , teacher.hometown from teacher"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct addresses.address_id) from Addresses"
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "sql": "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "sql": "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name , sections.section_description from Sections"
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "sql": "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "sql": "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "sql": "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "sql": "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "sql": "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "sql": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "sql": "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "sql": "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "sql": "select dogs.age from Dogs   order by dogs.age desc limit 1"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "sql": "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "sql": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "sql": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "sql": "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "sql": "select death.note from death where  death.note like \"%East%\""
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "sql": "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select max(stadium.capacity) , avg(stadium.average) from stadium"
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "sql": "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "sql": "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 6"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code having  count(*) > 50"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "sql": "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct templates.template_type_code from Templates"
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "sql": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "sql": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "sql": "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "sql": "select count(*) from TV_Channel where  tv_channel.language = \"English\""
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "sql": "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "sql": "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "sql": "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "sql": "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "sql": "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "sql": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "sql": "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "sql": "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct addresses.address_id) from Addresses"
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.age , teacher.hometown from teacher"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights where  flights.destairport = \"ATO\""
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "sql": "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.department_id) from Degree_Programs"
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "sql": "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_description from Sections where  sections.section_name = \"h\""
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "sql": "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "sql": "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "sql": "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "sql": "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "sql": "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "sql": "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "sql": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "sql": "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "sql": "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "sql": "select singer.name from singer   order by singer.net_worth_millions asc"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "sql": "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "sql": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "sql": "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "sql": "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "sql": "select distinct dogs.breed_code , dogs.size_code from Dogs"
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "sql": "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "sql": "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name , documents.document_description from Documents"
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "sql": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "sql": "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "sql": "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "sql": "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "sql": "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.horsepower > 150"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "sql": "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "sql": "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "sql": "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "sql": "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "sql": "select players.country_code , count(*) from players  group by players.country_code"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "sql": "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "sql": "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "sql": "select count( distinct treatments.professional_id) from Treatments"
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "sql": "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs"
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "sql": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "sql": "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "sql": "select avg(poker_player.earnings) from poker_player"
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "sql": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "sql": "select distinct dogs.breed_code , dogs.size_code from Dogs"
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "sql": "select singer.country , count(*) from singer  group by singer.country"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "sql": "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "sql": "select count(*) from players"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 4"
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "sql": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "sql": "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "sql": "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "sql": "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "sql": "select players.country_code , count(*) from players  group by players.country_code"
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "sql": "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "sql": "select players.hand , count(*) from players  group by players.hand"
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "sql": "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.age , teacher.hometown from teacher"
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "sql": "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 6"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "sql": "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_description from Sections where  sections.section_name = \"h\""
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "sql": "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Transcripts"
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.airportcode = \"AKO\""
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "sql": "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "sql": "select dogs.age from Dogs   order by dogs.age desc limit 1"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.nationality != \"Russia\""
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "sql": "select count(*) from TV_Channel where  tv_channel.language = \"English\""
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_description from Courses where  courses.course_name = \"math\""
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "sql": "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "sql": "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "sql": "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "sql": "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "sql": "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "sql": "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "sql": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "sql": "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "sql": "select country.continent from country where  country.name = \"Anguilla\""
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "sql": "select people.name , people.birth_date from people   order by people.name asc"
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "sql": "select singer.name from singer   order by singer.net_worth_millions asc"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_description from Courses where  courses.course_name = \"math\""
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "sql": "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "sql": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "sql": "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "sql": "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "sql": "select players.hand , count(*) from players  group by players.hand"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "sql": "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler"
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "sql": "select poker_player.final_table_made , poker_player.best_finish from poker_player"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code having  count(*) > 50"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "sql": "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "sql": "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "sql": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "sql": "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "sql": "select country.continent from country where  country.name = \"Anguilla\""
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "sql": "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "sql": "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "sql": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "sql": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "sql": "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "sql": "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "sql": "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.horsepower > 150"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count( distinct shop.location) from shop"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "sql": "select count( distinct pets.pettype) from Pets"
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon   order by cartoon.title asc"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count( distinct shop.location) from shop"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "sql": "select count(*) from TV_Channel where  tv_channel.language = \"English\""
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "sql": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "sql": "select count( distinct pets.pettype) from Pets"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "sql": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "Give me Brazil's population and life expectancies.",
        "db_id": "world_1",
        "sql": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\""
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct addresses.address_id) from Addresses"
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "sql": "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "sql": "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "sql": "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_description from Sections where  sections.section_name = \"h\""
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "sql": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.department_id) from Degree_Programs"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.city = \"Aberdeen\""
    },
    {
        "input": "How long is the people's average life expectancy in Central Africa?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\""
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "sql": "select country.continent from country where  country.name = \"Anguilla\""
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "sql": "select singer.citizenship , count(*) from singer  group by singer.citizenship"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee  group by employee.city having  count(*) > 30"
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.age asc"
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "sql": "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "sql": "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "sql": "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "sql": "select count(*) from TV_Channel where  tv_channel.language = \"English\""
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "sql": "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "sql": "select count(*) , likes.student_id from Likes  group by likes.student_id"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "sql": "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct templates.template_type_code from Templates"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "sql": "select dogs.age from Dogs   order by dogs.age desc limit 1"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "sql": "select count(*) , likes.student_id from Likes  group by likes.student_id"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "sql": "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "sql": "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "sql": "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "sql": "select count(*) from continents"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "sql": "select people.name , people.birth_date from people   order by people.name asc"
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "sql": "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "sql": "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "sql": "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "sql": "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "sql": "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "sql": "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "sql": "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "How long is the people's average life expectancy in Central Africa?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\""
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "sql": "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Templates where  templates.template_type_code = \"CV\""
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "sql": "select people.nationality , count(*) from people  group by people.nationality"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "sql": "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "sql": "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "sql": "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "sql": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "sql": "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "sql": "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "sql": "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "sql": "select distinct dogs.breed_code , dogs.size_code from Dogs"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "sql": "select count( distinct treatments.professional_id) from Treatments"
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "sql": "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "sql": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "sql": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "sql": "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports where  airports.city = \"Aberdeen\""
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "sql": "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "sql": "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "sql": "select singer.citizenship , count(*) from singer  group by singer.citizenship"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "sql": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "sql": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 4"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct addresses.address_id) from Addresses"
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.nationality != \"Russia\""
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "sql": "select people.name , people.birth_date from people   order by people.name asc"
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "sql": "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 6"
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "sql": "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "sql": "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "sql": "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "sql": "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "sql": "select people.nationality , count(*) from people  group by people.nationality"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "sql": "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 4"
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "sql": "select count(*) , friend.student_id from Friend  group by friend.student_id"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "sql": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "sql": "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "sql": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "sql": "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "sql": "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "sql": "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count( distinct shop.location) from shop"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "sql": "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Transcripts"
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct templates.template_type_code from Templates"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select max(stadium.capacity) , avg(stadium.average) from stadium"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "sql": "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "sql": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "sql": "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_description from Courses where  courses.course_name = \"math\""
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "sql": "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "sql": "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "sql": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "sql": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "sql": "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "sql": "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "sql": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "sql": "select death.note from death where  death.note like \"%East%\""
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct templates.template_type_code from Templates"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "sql": "select players.country_code , count(*) from players  group by players.country_code"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population desc limit 3"
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Templates where  templates.template_type_code = \"CV\""
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "sql": "select count(*) , friend.student_id from Friend  group by friend.student_id"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "sql": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "sql": "select matches.year , count(*) from matches  group by matches.year"
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "sql": "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "sql": "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "sql": "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "sql": "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "sql": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "sql": "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "sql": "select players.hand , count(*) from players  group by players.hand"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "sql": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "sql": "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_description from Sections where  sections.section_name = \"h\""
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs"
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "sql": "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "sql": "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "sql": "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "sql": "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "sql": "select dogs.date_arrived , dogs.date_departed from Dogs"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "sql": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "sql": "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Transcripts"
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "sql": "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "sql": "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "sql": "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select max(stadium.capacity) , avg(stadium.average) from stadium"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates   except select documents.template_id from Documents"
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "sql": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs"
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "sql": "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "sql": "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "sql": "select count( distinct treatments.professional_id) from Treatments"
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "sql": "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name , sections.section_description from Sections"
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "sql": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "sql": "select country.name from country   order by country.population asc limit 3"
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "sql": "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "sql": "select avg(poker_player.earnings) from poker_player"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "sql": "select count(*) from singer"
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "sql": "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.id from Highschooler   except select friend.student_id from Friend"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "sql": "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "sql": "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "sql": "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "sql": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "sql": "select count( distinct pets.pettype) from Pets"
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_description from Courses where  courses.course_name = \"math\""
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights where  flights.destairport = \"ATO\""
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "sql": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "sql": "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "sql": "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "sql": "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "sql": "select players.country_code , count(*) from players  group by players.country_code"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "sql": "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "sql": "select max(stadium.capacity) , avg(stadium.average) from stadium"
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "sql": "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "sql": "select count(*) from matches"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "sql": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage"
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "sql": "select owners.state from Owners   intersect select professionals.state from Professionals"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "sql": "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "sql": "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "sql": "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "sql": "select death.note from death where  death.note like \"%East%\""
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "sql": "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "sql": "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor where  conductor.nationality != \"USA\""
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "sql": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "sql": "select singer.birth_year , singer.citizenship from singer"
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "sql": "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "sql": "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "sql": "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Transcripts"
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "sql": "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "sql": "select people.name , people.birth_date from people   order by people.name asc"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count( distinct templates.template_id) from Templates"
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "sql": "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "sql": "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "sql": "select count(*) from airlines"
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "sql": "select people.nationality from people  group by people.nationality having  count(*) >= 2"
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "sql": "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "sql": "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "sql": "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "sql": "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "sql": "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights where  flights.sourceairport = \"APG\""
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "sql": "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "sql": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "sql": "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "sql": "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "sql": "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "sql": "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "sql": "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "sql": "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "sql": "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "sql": "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "sql": "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "sql": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher   order by teacher.age asc"
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "sql": "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "sql": "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "sql": "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "sql": "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "sql": "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "sql": "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "sql": "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "sql": "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "sql": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "sql": "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "sql": "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "sql": "select avg(show.attendance) from show"
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "sql": "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "sql": "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "sql": "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "sql": "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "sql": "select country.continent from country where  country.name = \"Anguilla\""
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "sql": "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "sql": "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "sql": "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "sql": "select singer.country , count(*) from singer  group by singer.country"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "sql": "select count(*) from players"
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "sql": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "sql": "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "sql": "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "sql": "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "sql": "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "sql": "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "sql": "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.nationality != \"Russia\""
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "sql": "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select count(*) from Templates where  templates.template_type_code = \"CV\""
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "sql": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "sql": "select count( distinct countrylanguage.language) from countrylanguage"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "sql": "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "sql": "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "sql": "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "sql": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "sql": "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "sql": "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "sql": "select count(*) from cars_data where  cars_data.cylinders > 4"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "sql": "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "sql": "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "sql": "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "sql": "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "sql": "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "sql": "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "sql": "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "sql": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "sql": "select count(*) from continents"
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "sql": "select cartoon.title from Cartoon   order by cartoon.title asc"
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "sql": "select count(*) from airports"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "sql": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "sql": "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    },
    {
        "input": "How long is the people's average life expectancy in Central Africa?",
        "db_id": "world_1",
        "sql": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\""
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select documents.template_id , count(*) from Documents  group by documents.template_id"
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "sql": "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "sql": "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "sql": "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "sql": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "sql": "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "sql": "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "sql": "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "sql": "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "sql": "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "sql": "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "sql": "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "sql": "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "sql": "select matches.year , count(*) from matches  group by matches.year"
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "sql": "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "sql": "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "sql": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "sql": "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "sql": "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "sql": "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "sql": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "sql": "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "sql": "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "sql": "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "sql": "select min(shop.number_products) , max(shop.number_products) from shop"
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "sql": "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "sql": "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "sql": "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "sql": "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "sql": "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "sql": "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "sql": "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "sql": "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "sql": "select count(*) , likes.student_id from Likes  group by likes.student_id"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "sql": "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count( distinct degree_programs.department_id) from Degree_Programs"
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "sql": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "sql": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "sql": "select sections.section_name from Sections   order by sections.section_name desc"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "sql": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "sql": "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "sql": "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "sql": "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "sql": "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "sql": "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "sql": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "sql": "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "sql": "select avg(dogs.age) from Dogs"
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "sql": "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "sql": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "sql": "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "sql": "select count(*) from Courses"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "sql": "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "sql": "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "sql": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "sql": "select count( distinct treatments.professional_id) from Treatments"
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "sql": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "sql": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "sql": "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "sql": "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "sql": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    }
]