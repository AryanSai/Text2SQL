[
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select last_name from students where student_id not in ( select student_id from student_enrolment )",
            "select last_name from students where student_id not in ( select student_id from student_enrolment )",
            "select last_name from students where student_id not in ( select student_id from student_enrolment )",
            "select last_name from students where student_id not in ( select student_id from student_enrolment )",
            "select last_name from students where student_id not in ( select student_id from student_enrolment )",
            "select last_name from students where student_id not in ( select student_id from student_enrolment )",
            "select last_name from students where student_id not in ( select student_id from student_enrolment )"
        ],
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"NorthCarolina\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    32,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    true,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    37,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "extra"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "pred": [
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1"
        ],
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                49,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            48,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "pred": [
            "select battle.id , battle.name from battle join death on battle.id = death.killed group by battle.id having sum ( death.killed ) > 10",
            "select battle.id , battle.name from battle join death on battle.id = death.killed group by battle.id having sum ( death.killed ) > 10",
            "select battle.id , battle.name from battle join death on battle.id = death.killed group by battle.id having sum ( death.killed ) > 10",
            "select battle.id , battle.name from battle join death on battle.id = death.killed group by battle.id having sum ( death.killed ) > 10",
            "select battle.id , battle.name from battle join death on battle.id = death.killed group by battle.id having sum ( death.killed ) > 10",
            "select battle.id , battle.name from battle join death on battle.id = death.killed group by battle.id having sum ( death.killed ) > 10",
            "select battle.id , battle.name from battle join death on battle.id = death.killed group by battle.id having sum ( death.killed ) > 10"
        ],
        "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            4,
                            17,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"CVO\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "pred": [
            "select tourney_name from matches group by tourney_name having count ( * ) > 10",
            "select tourney_name from matches group by tourney_name having count ( * ) > 10",
            "select tourney_name from matches group by tourney_name having count ( * ) > 10",
            "select tourney_name from matches group by tourney_name having count ( * ) > 10",
            "select tourney_name from matches group by tourney_name having count ( * ) > 10",
            "select tourney_name from matches group by tourney_name having count ( * ) > 10",
            "select tourney_name from matches group by tourney_name having count ( * ) > 10"
        ],
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from flights where destairport = 'ATO'",
            "select count ( * ) from flights where destairport = 'ATO'",
            "select count ( * ) from flights where destairport = 'ATO'",
            "select count ( * ) from flights where destairport = 'ATO'",
            "select count ( * ) from flights where destairport = 'ATO'",
            "select count ( * ) from flights where destairport = 'ATO'",
            "select count ( * ) from flights where destairport = 'ATO'"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"ATO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "pred": [
            "select count ( * ) from visitor where id not in ( select visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )",
            "select count ( * ) from visitor where id not in ( select visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )",
            "select count ( * ) from visitor where id not in ( select visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )",
            "select count ( * ) from visitor where id not in ( select visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )",
            "select count ( * ) from visitor where id not in ( select visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )",
            "select count ( * ) from visitor where id not in ( select visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )",
            "select count ( * ) from visitor where id not in ( select visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010 )"
        ],
        "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ],
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        9,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            10,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                3,
                                [
                                    0,
                                    [
                                        0,
                                        4,
                                        false
                                    ],
                                    null
                                ],
                                2010.0,
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "pred": [
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals"
        ],
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    38,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "pred": [
            "select pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
            "select pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
            "select pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
            "select pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
            "select pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
            "select pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype",
            "select pettype , avg ( pet_age ) , max ( pet_age ) from pets group by pettype"
        ],
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each type of pet.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "pred": [
            "select count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930",
            "select count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930",
            "select count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930",
            "select count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930",
            "select count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930",
            "select count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930",
            "select count ( distinct language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930"
        ],
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    1930.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "pred": [
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1"
        ],
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1",
            "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1",
            "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1",
            "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1",
            "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1",
            "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1",
            "select first_name , middle_name , last_name from students order by date_first_registered asc limit 1"
        ],
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "pred": [
            "select title from cartoon order by title asc",
            "select title from cartoon order by title asc",
            "select title from cartoon order by title asc",
            "select title from cartoon order by title asc",
            "select title from cartoon order by title asc",
            "select title from cartoon order by title asc",
            "select title from cartoon order by title asc"
        ],
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "pred": [
            "select student_id from friend except select student_id from friend",
            "select student_id from friend except select student_id from friend",
            "select student_id from friend except select student_id from friend",
            "select student_id from friend except select student_id from friend",
            "select student_id from friend except select student_id from friend",
            "select student_id from friend except select student_id from friend",
            "select student_id from friend except select student_id from friend"
        ],
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'"
        ],
        "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"fiat\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "pred": [
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals",
            "select state from owners intersect select state from professionals"
        ],
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    38,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "pred": [
            "select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980",
            "select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980",
            "select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980",
            "select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980",
            "select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980",
            "select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980",
            "select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980"
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct car models are the produced after 1980?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'"
        ],
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PPT\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "pred": [
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970"
        ],
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "\"1970\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1"
        ],
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select min ( version_number ) , template_type_code from templates group by template_type_code",
            "select min ( version_number ) , template_type_code from templates group by template_type_code",
            "select min ( version_number ) , template_type_code from templates group by template_type_code",
            "select min ( version_number ) , template_type_code from templates group by template_type_code",
            "select min ( version_number ) , template_type_code from templates group by template_type_code",
            "select min ( version_number ) , template_type_code from templates group by template_type_code",
            "select min ( version_number ) , template_type_code from templates group by template_type_code"
        ],
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest version number and its template type code?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select city , count ( * ) from employee group by city",
            "select city , count ( * ) from employee group by city",
            "select city , count ( * ) from employee group by city",
            "select city , count ( * ) from employee group by city",
            "select city , count ( * ) from employee group by city",
            "select city , count ( * ) from employee group by city",
            "select city , count ( * ) from employee group by city"
        ],
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = 'usa'",
            "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = 'usa'",
            "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = 'usa'",
            "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = 'usa'",
            "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = 'usa'",
            "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = 'usa'",
            "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = 'usa'"
        ],
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the usa?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"usa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "pred": [
            "select country from airlines where airline = 'JetBlue Airways'",
            "select country from airlines where airline = 'JetBlue Airways'",
            "select country from airlines where airline = 'JetBlue Airways'",
            "select country from airlines where airline = 'JetBlue Airways'",
            "select country from airlines where airline = 'JetBlue Airways'",
            "select country from airlines where airline = 'JetBlue Airways'",
            "select country from airlines where airline = 'JetBlue Airways'"
        ],
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )"
        ],
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which shops run with no employees? Find the shop names",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            11,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "pred": [
            "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1",
            "select name , population , lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1"
        ],
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count ( * ) from templates where template_type_code = 'CV'",
            "select count ( * ) from templates where template_type_code = 'CV'",
            "select count ( * ) from templates where template_type_code = 'CV'",
            "select count ( * ) from templates where template_type_code = 'CV'",
            "select count ( * ) from templates where template_type_code = 'CV'",
            "select count ( * ) from templates where template_type_code = 'CV'",
            "select count ( * ) from templates where template_type_code = 'CV'"
        ],
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"CV\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'"
        ],
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"korea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "pred": [
            "select continent from country where name = 'Anguilla'",
            "select continent from country where name = 'Anguilla'",
            "select continent from country where name = 'Anguilla'",
            "select continent from country where name = 'Anguilla'",
            "select continent from country where name = 'Anguilla'",
            "select continent from country where name = 'Anguilla'",
            "select continent from country where name = 'Anguilla'"
        ],
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Anguilla\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "pred": [
            "select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo'",
            "select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo'",
            "select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo'",
            "select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo'",
            "select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo'",
            "select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo'",
            "select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.model = 'volvo'"
        ],
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"volvo\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select department_description from departments where department_name like '%computer%'",
            "select department_description from departments where department_name like '%computer%'",
            "select department_description from departments where department_name like '%computer%'",
            "select department_description from departments where department_name like '%computer%'",
            "select department_description from departments where department_name like '%computer%'",
            "select department_description from departments where department_name like '%computer%'",
            "select department_description from departments where department_name like '%computer%'"
        ],
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%computer%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "pred": [
            "select country_code from players group by country_code having count ( * ) > 50",
            "select country_code from players group by country_code having count ( * ) > 50",
            "select country_code from players group by country_code having count ( * ) > 50",
            "select country_code from players group by country_code having count ( * ) > 50",
            "select country_code from players group by country_code having count ( * ) > 50",
            "select country_code from players group by country_code having count ( * ) > 50",
            "select country_code from players group by country_code having count ( * ) > 50"
        ],
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    50.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "pred": [
            "select name , age , weight from dogs where abandoned_yn = 1 and abandoned_yn = 0",
            "select name , age , weight from dogs where abandoned_yn = 1 and abandoned_yn = 0",
            "select name , age , weight from dogs where abandoned_yn = 1 and abandoned_yn = 0",
            "select name , age , weight from dogs where abandoned_yn = 1 and abandoned_yn = 0",
            "select name , age , weight from dogs where abandoned_yn = 1 and abandoned_yn = 0",
            "select name , age , weight from dogs where abandoned_yn = 1 and abandoned_yn = 0",
            "select name , age , weight from dogs where abandoned_yn = 1 and abandoned_yn = 0"
        ],
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses"
        ],
        "gold": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "pred": [
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'"
        ],
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ],
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        23,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        24,
                                        false
                                    ],
                                    null
                                ],
                                "\"English\"",
                                null
                            ],
                            "and",
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        25,
                                        false
                                    ],
                                    null
                                ],
                                "\"T\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.id from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.id from highschooler join likes on highschooler.id = likes.liked_id",
            "select highschooler.id from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.id from highschooler join likes on highschooler.id = likes.liked_id",
            "select highschooler.id from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.id from highschooler join likes on highschooler.id = likes.liked_id",
            "select highschooler.id from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.id from highschooler join likes on highschooler.id = likes.liked_id",
            "select highschooler.id from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.id from highschooler join likes on highschooler.id = likes.liked_id",
            "select highschooler.id from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.id from highschooler join likes on highschooler.id = likes.liked_id",
            "select highschooler.id from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.id from highschooler join likes on highschooler.id = likes.liked_id"
        ],
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    7,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "pred": [
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by"
        ],
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "pred": [
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "pred": [
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )"
        ],
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any concerts?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            18,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from continents",
            "select count ( * ) from continents",
            "select count ( * ) from continents",
            "select count ( * ) from continents",
            "select count ( * ) from continents",
            "select count ( * ) from continents",
            "select count ( * ) from continents"
        ],
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "pred": [
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )"
        ],
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                48,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            23,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [
                            [
                                0,
                                23,
                                false
                            ]
                        ],
                        "having": [],
                        "orderBy": [
                            "asc",
                            [
                                [
                                    0,
                                    [
                                        3,
                                        0,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ],
                        "limit": 1,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "pred": [
            "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
            "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
            "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
            "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
            "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
            "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'",
            "select sum ( surfacearea ) from country where continent = 'Asia' or continent = 'Europe'"
        ],
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Europe\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "pred": [
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "pred": [
            "select name , capacity from stadium group by average order by avg ( average ) desc limit 1",
            "select name , capacity from stadium group by average order by avg ( average ) desc limit 1",
            "select name , capacity from stadium group by average order by avg ( average ) desc limit 1",
            "select name , capacity from stadium group by average order by avg ( average ) desc limit 1",
            "select name , capacity from stadium group by average order by avg ( average ) desc limit 1",
            "select name , capacity from stadium group by average order by avg ( average ) desc limit 1",
            "select name , capacity from stadium group by average order by avg ( average ) desc limit 1"
        ],
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "pred": [
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'"
        ],
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in countries that do not speak English?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ],
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        23,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        24,
                                        false
                                    ],
                                    null
                                ],
                                "\"English\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "pred": [
            "select hand , count ( * ) from players group by hand",
            "select hand , count ( * ) from players group by hand",
            "select hand , count ( * ) from players group by hand",
            "select hand , count ( * ) from players group by hand",
            "select hand , count ( * ) from players group by hand",
            "select hand , count ( * ) from players group by hand",
            "select hand , count ( * ) from players group by hand"
        ],
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "pred": [
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )"
        ],
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        1,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )"
        ],
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            15,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "pred": [
            "select name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )",
            "select name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )",
            "select name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )",
            "select name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )",
            "select name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )",
            "select name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )",
            "select name , result , bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' )"
        ],
        "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"English Channel\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "extra"
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "pred": [
            "select sum ( population ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select sum ( population ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select sum ( population ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select sum ( population ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select sum ( population ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select sum ( population ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'",
            "select sum ( population ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language != 'English'"
        ],
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ],
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        23,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        24,
                                        false
                                    ],
                                    null
                                ],
                                "\"English\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "pred": [
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1",
            "select nationality from people group by nationality order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select dogs.date_arrived , dogs.date_departed from dogs join treatments on dogs.dog_id = treatments.dog_id"
        ],
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "pred": [
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )"
        ],
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        1,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3"
        ],
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"europe\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "pred": [
            "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id",
            "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id",
            "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id",
            "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id",
            "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id",
            "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id",
            "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_id"
        ],
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
            "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
            "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
            "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
            "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
            "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'",
            "select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = 'Sky Radio'"
        ],
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"CVO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"APG\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "extra"
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "pred": [
            "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011",
            "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011",
            "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011",
            "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011",
            "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011",
            "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011",
            "select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year < 2009 intersect select visitor.name from visitor join visit on visitor.id = visit.visitor_id join museum on visit.museum_id = museum.museum_id where museum.open_year > 2011"
        ],
        "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    2009.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    5,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        2011.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "pred": [
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3"
        ],
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "pred": [
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'"
        ],
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own cats as pets?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    11,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"cat\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "pred": [
            "select continent , continent , count ( * ) from continents group by continent",
            "select continent , continent , count ( * ) from continents group by continent",
            "select continent , continent , count ( * ) from continents group by continent",
            "select continent , continent , count ( * ) from continents group by continent",
            "select continent , continent , count ( * ) from continents group by continent",
            "select continent , continent , count ( * ) from continents group by continent",
            "select continent , continent , count ( * ) from continents group by continent"
        ],
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select count ( distinct location ) from shop",
            "select count ( distinct location ) from shop",
            "select count ( distinct location ) from shop",
            "select count ( distinct location ) from shop",
            "select count ( distinct location ) from shop",
            "select count ( distinct location ) from shop",
            "select count ( distinct location ) from shop"
        ],
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store locations.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "What are the names of nations where both English and French are official languages?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    9,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"French\"",
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ],
                        "\"T\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "pred": [
            "select country.name , count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode having count ( * ) >= 3",
            "select country.name , count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode having count ( * ) >= 3",
            "select country.name , count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode having count ( * ) >= 3",
            "select country.name , count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode having count ( * ) >= 3",
            "select country.name , count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode having count ( * ) >= 3",
            "select country.name , count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode having count ( * ) >= 3",
            "select country.name , count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code group by countrylanguage.countrycode having count ( * ) >= 3"
        ],
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "pred": [
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'"
        ],
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"UAL\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG'"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"CVO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"APG\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "extra"
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ],
                "and",
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ],
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        9,
                                        false
                                    ],
                                    null
                                ],
                                "and",
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            11,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        12,
                                        false
                                    ],
                                    null
                                ],
                                "\"cat\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "pred": [
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )"
        ],
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            2,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "pred": [
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id"
        ],
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    34,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    41,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "extra"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen'"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "pred": [
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by",
            "select directed_by , count ( * ) from cartoon group by directed_by"
        ],
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.first_name , players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'"
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"WTA Championships\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ],
                        "\"Australian Open\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "pred": [
            "select count ( distinct matches.winner_hand ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select count ( distinct matches.winner_hand ) from matches join players on matches.loser_id = players.player_id where players.hand = 'left'",
            "select count ( distinct matches.winner_hand ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select count ( distinct matches.winner_hand ) from matches join players on matches.loser_id = players.player_id where players.hand = 'left'",
            "select count ( distinct matches.winner_hand ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select count ( distinct matches.winner_hand ) from matches join players on matches.loser_id = players.player_id where players.hand = 'left'",
            "select count ( distinct matches.winner_hand ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select count ( distinct matches.winner_hand ) from matches join players on matches.loser_id = players.player_id where players.hand = 'left'",
            "select count ( distinct matches.winner_hand ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select count ( distinct matches.winner_hand ) from matches join players on matches.loser_id = players.player_id where players.hand = 'left'",
            "select count ( distinct matches.winner_hand ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select count ( distinct matches.winner_hand ) from matches join players on matches.loser_id = players.player_id where players.hand = 'left'",
            "select count ( distinct matches.winner_hand ) from matches join players on matches.winner_id = players.player_id where matches.tourney_name = 'WTA Championships' intersect select count ( distinct matches.winner_hand ) from matches join players on matches.loser_id = players.player_id where players.hand = 'left'"
        ],
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                34,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"WTA Championships\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            30,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country having count ( * ) >= 1",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country having count ( * ) >= 1",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country having count ( * ) >= 1",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country having count ( * ) >= 1",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country having count ( * ) >= 1",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country having count ( * ) >= 1",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.country = countries.countryid group by car_makers.country having count ( * ) >= 1"
        ],
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "pred": [
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'"
        ],
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "pred": [
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014"
        ],
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    18,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        2014.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "pred": [
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33"
        ],
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    32.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    33.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.cylinders = 4 order by horsepower desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.cylinders = 4 order by horsepower desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.cylinders = 4 order by horsepower desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.cylinders = 4 order by horsepower desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.cylinders = 4 order by horsepower desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.cylinders = 4 order by horsepower desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.cylinders = 4 order by horsepower desc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "pred": [
            "select sum ( surfacearea ) from country where continent = 'Carribean'",
            "select sum ( surfacearea ) from country where continent = 'Carribean'",
            "select sum ( surfacearea ) from country where continent = 'Carribean'",
            "select sum ( surfacearea ) from country where continent = 'Carribean'",
            "select sum ( surfacearea ) from country where continent = 'Carribean'",
            "select sum ( surfacearea ) from country where continent = 'Carribean'",
            "select sum ( surfacearea ) from country where continent = 'Carribean'"
        ],
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Caribbean\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "pred": [
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000"
        ],
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    300000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'"
        ],
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc"
        ],
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "pred": [
            "select population , name , headofstate from country order by surfacearea desc limit 1",
            "select population , name , headofstate from country order by surfacearea desc limit 1",
            "select population , name , headofstate from country order by surfacearea desc limit 1",
            "select population , name , headofstate from country order by surfacearea desc limit 1",
            "select population , name , headofstate from country order by surfacearea desc limit 1",
            "select population , name , headofstate from country order by surfacearea desc limit 1",
            "select population , name , headofstate from country order by surfacearea desc limit 1"
        ],
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "pred": [
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district"
        ],
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            5,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.airportname = 'Ashley'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.airportname = 'Ashley'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.airportname = 'Ashley'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.airportname = 'Ashley'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.airportname = 'Ashley'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.airportname = 'Ashley'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen' and airports.airportname = 'Ashley'"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Ashley\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "pred": [
            "select count ( * ) , has_pet.petid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid",
            "select count ( * ) , has_pet.petid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid",
            "select count ( * ) , has_pet.petid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid",
            "select count ( * ) , has_pet.petid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid",
            "select count ( * ) , has_pet.petid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid",
            "select count ( * ) , has_pet.petid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid",
            "select count ( * ) , has_pet.petid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid"
        ],
        "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "pred": [
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000",
            "select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000"
        ],
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    300000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id"
        ],
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "pred": [
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "pred": [
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000"
        ],
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"north america\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"Ford Motor Company\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname , car_makers.id from countries join car_makers on countries.countryid = car_makers.country",
            "select countries.countryname , car_makers.id from countries join car_makers on countries.countryid = car_makers.country",
            "select countries.countryname , car_makers.id from countries join car_makers on countries.countryid = car_makers.country",
            "select countries.countryname , car_makers.id from countries join car_makers on countries.countryid = car_makers.country",
            "select countries.countryname , car_makers.id from countries join car_makers on countries.countryid = car_makers.country",
            "select countries.countryname , car_makers.id from countries join car_makers on countries.countryid = car_makers.country",
            "select countries.countryname , car_makers.id from countries join car_makers on countries.countryid = car_makers.country"
        ],
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "pred": [
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select document_id , document_name , document_description from documents",
            "select document_id , document_name , document_description from documents",
            "select document_id , document_name , document_description from documents",
            "select document_id , document_name , document_description from documents",
            "select document_id , document_name , document_description from documents",
            "select document_id , document_name , document_description from documents",
            "select document_id , document_name , document_description from documents"
        ],
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semester_id from student_enrolment where student_enrolment.student_id = 'Masters' intersect select semester_id from student_enrolment where student_enrolment.student_id = 'Bachelors'",
            "select semester_id from student_enrolment where student_enrolment.student_id = 'Masters' intersect select semester_id from student_enrolment where student_enrolment.student_id = 'Bachelors'",
            "select semester_id from student_enrolment where student_enrolment.student_id = 'Masters' intersect select semester_id from student_enrolment where student_enrolment.student_id = 'Bachelors'",
            "select semester_id from student_enrolment where student_enrolment.student_id = 'Masters' intersect select semester_id from student_enrolment where student_enrolment.student_id = 'Bachelors'",
            "select semester_id from student_enrolment where student_enrolment.student_id = 'Masters' intersect select semester_id from student_enrolment where student_enrolment.student_id = 'Bachelors'",
            "select semester_id from student_enrolment where student_enrolment.student_id = 'Masters' intersect select semester_id from student_enrolment where student_enrolment.student_id = 'Bachelors'",
            "select semester_id from student_enrolment where student_enrolment.student_id = 'Masters' intersect select semester_id from student_enrolment where student_enrolment.student_id = 'Bachelors'"
        ],
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Master\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    18,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                45,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    true,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    46,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        "\"Bachelor\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "pred": [
            "select name from country order by population asc limit 3",
            "select name from country order by population asc limit 3",
            "select name from country order by population asc limit 3",
            "select name from country order by population asc limit 3",
            "select name from country order by population asc limit 3",
            "select name from country order by population asc limit 3",
            "select name from country order by population asc limit 3"
        ],
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model where cars_data.weight < ( select avg ( weight ) from cars_data )"
        ],
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            21,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "pred": [
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1"
        ],
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "Give the names of nations that speak both English and French.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    9,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"French\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "pred": [
            "select ship.id , ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum ( death.injured ) desc limit 1",
            "select ship.id , ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum ( death.injured ) desc limit 1",
            "select ship.id , ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum ( death.injured ) desc limit 1",
            "select ship.id , ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum ( death.injured ) desc limit 1",
            "select ship.id , ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum ( death.injured ) desc limit 1",
            "select ship.id , ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum ( death.injured ) desc limit 1",
            "select ship.id , ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum ( death.injured ) desc limit 1"
        ],
        "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the ship id and name that caused most total injuries?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "pred": [
            "select name , grade from highschooler",
            "select name , grade from highschooler",
            "select name , grade from highschooler",
            "select name , grade from highschooler",
            "select name , grade from highschooler",
            "select name , grade from highschooler",
            "select name , grade from highschooler"
        ],
        "gold": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )"
        ],
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            46,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most employees? Give me the shop name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "pred": [
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500"
        ],
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"General Motors\"",
                    null
                ],
                "or",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum ( matches.winner_rank_points ) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum ( matches.winner_rank_points ) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum ( matches.winner_rank_points ) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum ( matches.winner_rank_points ) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum ( matches.winner_rank_points ) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum ( matches.winner_rank_points ) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum ( matches.winner_rank_points ) desc limit 1"
        ],
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "pred": [
            "select distinct professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select distinct professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select distinct professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select distinct professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select distinct professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select distinct professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select distinct professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )"
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                40,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            49,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            49,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "pred": [
            "select city , country from airports where airportname = 'Alton'",
            "select city , country from airports where airportname = 'Alton'",
            "select city , country from airports where airportname = 'Alton'",
            "select city , country from airports where airportname = 'Alton'",
            "select city , country from airports where airportname = 'Alton'",
            "select city , country from airports where airportname = 'Alton'",
            "select city , country from airports where airportname = 'Alton'"
        ],
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"Alton\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "pred": [
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'"
        ],
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Europe\"",
                    null
                ],
                "and",
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ],
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        23,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        25,
                                        false
                                    ],
                                    null
                                ],
                                "\"T\"",
                                null
                            ],
                            "and",
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        24,
                                        false
                                    ],
                                    null
                                ],
                                "\"English\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.airline where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "pred": [
            "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by song.singer_id",
            "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by song.singer_id",
            "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by song.singer_id",
            "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by song.singer_id",
            "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by song.singer_id",
            "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by song.singer_id",
            "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by song.singer_id"
        ],
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the total sales of their songs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code group by templates.template_type_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "pred": [
            "select avg ( earnings ) from poker_player",
            "select avg ( earnings ) from poker_player",
            "select avg ( earnings ) from poker_player",
            "select avg ( earnings ) from poker_player",
            "select avg ( earnings ) from poker_player",
            "select avg ( earnings ) from poker_player",
            "select avg ( earnings ) from poker_player"
        ],
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "pred": [
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )"
        ],
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the countries where there is not a single car maker?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by cars_data.mpg desc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "pred": [
            "select country , count ( * ) from singer group by country",
            "select country , count ( * ) from singer group by country",
            "select country , count ( * ) from singer group by country",
            "select country , count ( * ) from singer group by country",
            "select country , count ( * ) from singer group by country",
            "select country , count ( * ) from singer group by country",
            "select country , count ( * ) from singer group by country"
        ],
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "pred": [
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 3"
        ],
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ],
                        [
                            "table_unit",
                            4
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    12,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    7,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [
                    [
                        0,
                        6,
                        false
                    ]
                ],
                "having": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                3,
                                0,
                                false
                            ],
                            null
                        ],
                        3.0,
                        null
                    ]
                ],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' intersect select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' intersect select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' intersect select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' intersect select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' intersect select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' intersect select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' intersect select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'dog'"
        ],
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "question": "Find the first name of students who have both cat and dog pets .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    11,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"dog\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "pred": [
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatment_types.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1"
        ],
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id"
        ],
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1",
            "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id group by hiring.shop_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.airline = flights.airline group by airlines.abbreviation order by count ( * ) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.airline = flights.airline group by airlines.abbreviation order by count ( * ) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.airline = flights.airline group by airlines.abbreviation order by count ( * ) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.airline = flights.airline group by airlines.abbreviation order by count ( * ) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.airline = flights.airline group by airlines.abbreviation order by count ( * ) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.airline = flights.airline group by airlines.abbreviation order by count ( * ) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.airline = flights.airline group by airlines.abbreviation order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "pred": [
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'"
        ],
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "pred": [
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )"
        ],
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000"
        ],
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        10000.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "pred": [
            "select airportname from airports where airportcode = 'AKO'",
            "select airportname from airports where airportcode = 'AKO'",
            "select airportname from airports where airportcode = 'AKO'",
            "select airportname from airports where airportcode = 'AKO'",
            "select airportname from airports where airportcode = 'AKO'",
            "select airportname from airports where airportcode = 'AKO'",
            "select airportname from airports where airportcode = 'AKO'"
        ],
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"AKO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "pred": [
            "select first_name from professionals where professional_id = 'PROF' except select first_name from dogs join owners on dogs.owner_id = owners.owner_id",
            "select first_name from professionals where professional_id = 'PROF' except select first_name from dogs join owners on dogs.owner_id = owners.owner_id",
            "select first_name from professionals where professional_id = 'PROF' except select first_name from dogs join owners on dogs.owner_id = owners.owner_id",
            "select first_name from professionals where professional_id = 'PROF' except select first_name from dogs join owners on dogs.owner_id = owners.owner_id",
            "select first_name from professionals where professional_id = 'PROF' except select first_name from dogs join owners on dogs.owner_id = owners.owner_id",
            "select first_name from professionals where professional_id = 'PROF' except select first_name from dogs join owners on dogs.owner_id = owners.owner_id",
            "select first_name from professionals where professional_id = 'PROF' except select first_name from dogs join owners on dogs.owner_id = owners.owner_id"
        ],
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            4
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    11,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": {
                    "from": {
                        "table_units": [
                            [
                                "table_unit",
                                5
                            ]
                        ],
                        "conds": []
                    },
                    "select": [
                        false,
                        [
                            [
                                0,
                                [
                                    0,
                                    [
                                        0,
                                        25,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ]
                    ],
                    "where": [],
                    "groupBy": [],
                    "having": [],
                    "orderBy": [],
                    "limit": null,
                    "intersect": null,
                    "union": null,
                    "except": null
                }
            },
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name , matches.winner_rank_points from matches join rankings on matches.winner_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches join rankings on matches.winner_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches join rankings on matches.winner_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches join rankings on matches.winner_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches join rankings on matches.winner_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches join rankings on matches.winner_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches join rankings on matches.winner_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    34,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "pred": [
            "select continents.continent , count ( * ) from continents join car_makers on continents.contid = car_makers.country group by continents.continent",
            "select continents.continent , count ( * ) from continents join car_makers on continents.contid = car_makers.country group by continents.continent",
            "select continents.continent , count ( * ) from continents join car_makers on continents.contid = car_makers.country group by continents.continent",
            "select continents.continent , count ( * ) from continents join car_makers on continents.contid = car_makers.country group by continents.continent",
            "select continents.continent , count ( * ) from continents join car_makers on continents.contid = car_makers.country group by continents.continent",
            "select continents.continent , count ( * ) from continents join car_makers on continents.contid = car_makers.country group by continents.continent",
            "select continents.continent , count ( * ) from continents join car_makers on continents.contid = car_makers.country group by continents.continent"
        ],
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id",
            "select count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id",
            "select count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id",
            "select count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id",
            "select count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id",
            "select count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id",
            "select count ( * ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.shop_id"
        ],
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "pred": [
            "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1",
            "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1",
            "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1",
            "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1",
            "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1",
            "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1",
            "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state group by area_code_state.area_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "pred": [
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'official'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'official'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'official'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'official'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'official'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'official'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'official'"
        ],
        "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Chinese\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
            "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
            "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
            "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
            "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
            "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'",
            "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'"
        ],
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    15,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        "\"Ireland\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "pred": [
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "pred": [
            "select name , birth_date from people order by name asc",
            "select name , birth_date from people order by name asc",
            "select name , birth_date from people order by name asc",
            "select name , birth_date from people order by name asc",
            "select name , birth_date from people order by name asc",
            "select name , birth_date from people order by name asc",
            "select name , birth_date from people order by name asc"
        ],
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from car_names join car_makers on car_makers.id = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'",
            "select count ( * ) from car_names join car_makers on car_makers.id = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'",
            "select count ( * ) from car_names join car_makers on car_makers.id = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'",
            "select count ( * ) from car_names join car_makers on car_makers.id = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'",
            "select count ( * ) from car_names join car_makers on car_makers.id = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'",
            "select count ( * ) from car_names join car_makers on car_makers.id = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'",
            "select count ( * ) from car_names join car_makers on car_makers.id = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'"
        ],
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"usa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "pred": [
            "select name from singer order by net_worth_millions asc",
            "select name from singer order by net_worth_millions asc",
            "select name from singer order by net_worth_millions asc",
            "select name from singer order by net_worth_millions asc",
            "select name from singer order by net_worth_millions asc",
            "select name from singer order by net_worth_millions asc",
            "select name from singer order by net_worth_millions asc"
        ],
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "pred": [
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ],
                "and",
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            14,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ],
                                "\"Asia\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "pred": [
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955"
        ],
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    1945.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    5,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        1955.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "What are the names of nations speak both English and French?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    9,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"French\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "pred": [
            "select avg ( capacity ) , max ( capacity ) from stadium",
            "select avg ( capacity ) , max ( capacity ) from stadium",
            "select avg ( capacity ) , max ( capacity ) from stadium",
            "select avg ( capacity ) , max ( capacity ) from stadium",
            "select avg ( capacity ) , max ( capacity ) from stadium",
            "select avg ( capacity ) , max ( capacity ) from stadium",
            "select avg ( capacity ) , max ( capacity ) from stadium"
        ],
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "pred": [
            "select cylinders from cars_data where accelerate = 'Volvo' order by accelerate asc limit 1",
            "select cylinders from cars_data where accelerate = 'Volvo' order by accelerate asc limit 1",
            "select cylinders from cars_data where accelerate = 'Volvo' order by accelerate asc limit 1",
            "select cylinders from cars_data where accelerate = 'Volvo' order by accelerate asc limit 1",
            "select cylinders from cars_data where accelerate = 'Volvo' order by accelerate asc limit 1",
            "select cylinders from cars_data where accelerate = 'Volvo' order by accelerate asc limit 1",
            "select cylinders from cars_data where accelerate = 'Volvo' order by accelerate asc limit 1"
        ],
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"volvo\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "pred": [
            "select count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'",
            "select count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'",
            "select count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'",
            "select count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'",
            "select count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'",
            "select count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'",
            "select count ( * ) from highschooler join likes on highschooler.id = likes.liked_id where highschooler.name = 'Kyle'"
        ],
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many likes does Kyle have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2",
            "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2",
            "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2",
            "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2",
            "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2",
            "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2",
            "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id group by courses.course_id having count ( * ) < 2"
        ],
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    6,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name , matches.winner_rank_points from rankings join players on rankings.player_id = players.player_id join matches on players.player_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from rankings join players on rankings.player_id = players.player_id join matches on players.player_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from rankings join players on rankings.player_id = players.player_id join matches on players.player_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from rankings join players on rankings.player_id = players.player_id join matches on players.player_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from rankings join players on rankings.player_id = players.player_id join matches on players.player_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from rankings join players on rankings.player_id = players.player_id join matches on players.player_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from rankings join players on rankings.player_id = players.player_id join matches on players.player_id = matches.winner_id group by matches.winner_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    34,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id order by teacher.name asc"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "pred": [
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company"
        ],
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "pred": [
            "select property_name from properties where property_type_code = 'House' or room_count > 1",
            "select property_name from properties where property_type_code = 'House' or room_count > 1",
            "select property_name from properties where property_type_code = 'House' or room_count > 1",
            "select property_name from properties where property_type_code = 'House' or room_count > 1",
            "select property_name from properties where property_type_code = 'House' or room_count > 1",
            "select property_name from properties where property_type_code = 'House' or room_count > 1",
            "select property_name from properties where property_type_code = 'House' or room_count > 1"
        ],
        "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"House\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    13,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        "\"Apartment\"",
                        null
                    ],
                    "and",
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        1.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )"
        ],
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select course_description from courses where course_name = 'math'",
            "select course_description from courses where course_name = 'math'",
            "select course_description from courses where course_name = 'math'",
            "select course_description from courses where course_name = 'math'",
            "select course_description from courses where course_name = 'math'",
            "select course_description from courses where course_name = 'math'",
            "select course_description from courses where course_name = 'math'"
        ],
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the descriptions for all the math courses?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"math\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "pred": [
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )"
        ],
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [
                            "desc",
                            [
                                [
                                    0,
                                    [
                                        0,
                                        4,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ],
                        "limit": 1,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name , owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'",
            "select dogs.name , owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'",
            "select dogs.name , owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'",
            "select dogs.name , owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'",
            "select dogs.name , owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'",
            "select dogs.name , owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'",
            "select dogs.name , owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'"
        ],
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"Virginia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select section_description from sections where section_name = 'h'",
            "select section_description from sections where section_name = 'h'",
            "select section_description from sections where section_name = 'h'",
            "select section_description from sections where section_name = 'h'",
            "select section_description from sections where section_name = 'h'",
            "select section_description from sections where section_name = 'h'",
            "select section_description from sections where section_name = 'h'"
        ],
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"h\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "pred": [
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type"
        ],
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select abbreviation , country from airlines group by abbreviation order by count ( * ) asc limit 1",
            "select abbreviation , country from airlines group by abbreviation order by count ( * ) asc limit 1",
            "select abbreviation , country from airlines group by abbreviation order by count ( * ) asc limit 1",
            "select abbreviation , country from airlines group by abbreviation order by count ( * ) asc limit 1",
            "select abbreviation , country from airlines group by abbreviation order by count ( * ) asc limit 1",
            "select abbreviation , country from airlines group by abbreviation order by count ( * ) asc limit 1",
            "select abbreviation , country from airlines group by abbreviation order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000",
            "select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000"
        ],
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        10000.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "pred": [
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer"
        ],
        "gold": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "pred": [
            "select max ( loser_rank ) from matches",
            "select max ( loser_rank ) from matches",
            "select max ( loser_rank ) from matches",
            "select max ( loser_rank ) from matches",
            "select max ( loser_rank ) from matches",
            "select max ( loser_rank ) from matches",
            "select max ( loser_rank ) from matches"
        ],
        "gold": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all matches.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "pred": [
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    1,
                                    [
                                        0,
                                        [
                                            0,
                                            14,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ],
                                "\"Africa\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "pred": [
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )",
            "select name from country where population < ( select max ( population ) from country where continent = 'Africa' )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ],
                "and",
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    1,
                                    [
                                        0,
                                        [
                                            0,
                                            14,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ],
                                "\"Asia\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "pred": [
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'"
        ],
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    25,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        "\"Ben Jones\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1"
        ],
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id where student_enrolment.degree_program_id = 'Bachelors'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id where student_enrolment.degree_program_id = 'Bachelors'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id where student_enrolment.degree_program_id = 'Bachelors'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id where student_enrolment.degree_program_id = 'Bachelors'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id where student_enrolment.degree_program_id = 'Bachelors'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id where student_enrolment.degree_program_id = 'Bachelors'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id where student_enrolment.degree_program_id = 'Bachelors'"
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                45,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Bachelor\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "pred": [
            "select max ( share ) , min ( share ) from performance where type != 'Live final'",
            "select max ( share ) , min ( share ) from performance where type != 'Live final'",
            "select max ( share ) , min ( share ) from performance where type != 'Live final'",
            "select max ( share ) , min ( share ) from performance where type != 'Live final'",
            "select max ( share ) , min ( share ) from performance where type != 'Live final'",
            "select max ( share ) , min ( share ) from performance where type != 'Live final'",
            "select max ( share ) , min ( share ) from performance where type != 'Live final'"
        ],
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"Live final\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "pred": [
            "select max ( final_table_made ) from poker_player where earnings < 200000",
            "select max ( final_table_made ) from poker_player where earnings < 200000",
            "select max ( final_table_made ) from poker_player where earnings < 200000",
            "select max ( final_table_made ) from poker_player where earnings < 200000",
            "select max ( final_table_made ) from poker_player where earnings < 200000",
            "select max ( final_table_made ) from poker_player where earnings < 200000",
            "select max ( final_table_made ) from poker_player where earnings < 200000"
        ],
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    200000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code from templates except select template_type_code from documents join ref_template_types on documents.template_id = ref_template_types.template_type_code",
            "select template_type_code from templates except select template_type_code from documents join ref_template_types on documents.template_id = ref_template_types.template_type_code",
            "select template_type_code from templates except select template_type_code from documents join ref_template_types on documents.template_id = ref_template_types.template_type_code",
            "select template_type_code from templates except select template_type_code from documents join ref_template_types on documents.template_id = ref_template_types.template_type_code",
            "select template_type_code from templates except select template_type_code from documents join ref_template_types on documents.template_id = ref_template_types.template_type_code",
            "select template_type_code from templates except select template_type_code from documents join ref_template_types on documents.template_id = ref_template_types.template_type_code",
            "select template_type_code from templates except select template_type_code from documents join ref_template_types on documents.template_id = ref_template_types.template_type_code"
        ],
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the codes of template types that are not used for any document?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    5,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "pred": [
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1",
            "select country , count ( * ) from tv_channel group by country order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Ashley' and flights.flightno = 1",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Ashley' and flights.flightno = 1",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Ashley' and flights.flightno = 1",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Ashley' and flights.flightno = 1",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Ashley' and flights.flightno = 1",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Ashley' and flights.flightno = 1",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Ashley' and flights.flightno = 1"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Ashley\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1"
        ],
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    1,
                                    [
                                        0,
                                        [
                                            0,
                                            26,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the course with most number of enrollments?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        8
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            50,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
            "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
            "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
            "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
            "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
            "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
            "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'"
        ],
        "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            35,
                            false
                        ],
                        null
                    ],
                    "\"Timmothy\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"Ward\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "pred": [
            "select nationality , count ( * ) from people group by nationality",
            "select nationality , count ( * ) from people group by nationality",
            "select nationality , count ( * ) from people group by nationality",
            "select nationality , count ( * ) from people group by nationality",
            "select nationality , count ( * ) from people group by nationality",
            "select nationality , count ( * ) from people group by nationality",
            "select nationality , count ( * ) from people group by nationality"
        ],
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Aruba\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "pred": [
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'"
        ],
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"F\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses",
            "select count ( * ) from courses"
        ],
        "gold": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5"
        ],
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "pred": [
            "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )",
            "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )",
            "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )",
            "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )",
            "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )",
            "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )",
            "select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )"
        ],
        "gold": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many contestants did not get voted?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'"
        ],
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the template ids with template type description \"Presentation\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Presentation\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "pred": [
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "pred": [
            "select directed_by from cartoon where directed_by = 'Ben Jones'",
            "select directed_by from cartoon where directed_by = 'Ben Jones'",
            "select directed_by from cartoon where directed_by = 'Ben Jones'",
            "select directed_by from cartoon where directed_by = 'Ben Jones'",
            "select directed_by from cartoon where directed_by = 'Ben Jones'",
            "select directed_by from cartoon where directed_by = 'Ben Jones'",
            "select directed_by from cartoon where directed_by = 'Ben Jones'"
        ],
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Ben Jones\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines"
        ],
        "gold": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "pred": [
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.sex = 'F' and pets.pettype = 'dog'"
        ],
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many dog pets are raised by female students?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"F\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "pred": [
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1",
            "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by countrylanguage.countrycode order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'",
            "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'",
            "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'",
            "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'",
            "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'",
            "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'",
            "select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Customer reviews'"
        ],
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Customer reviews\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select distinct template_type_code from templates",
            "select distinct template_type_code from templates",
            "select distinct template_type_code from templates",
            "select distinct template_type_code from templates",
            "select distinct template_type_code from templates",
            "select distinct template_type_code from templates",
            "select distinct template_type_code from templates"
        ],
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'"
        ],
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Book\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'",
            "select students.first_name , students.middle_name , students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor'"
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                45,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Bachelor\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "pred": [
            "select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport",
            "select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport",
            "select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport",
            "select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport",
            "select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport",
            "select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport",
            "select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport"
        ],
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            12,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": {
                            "from": {
                                "table_units": [
                                    [
                                        "table_unit",
                                        2
                                    ]
                                ],
                                "conds": []
                            },
                            "select": [
                                false,
                                [
                                    [
                                        0,
                                        [
                                            0,
                                            [
                                                0,
                                                13,
                                                false
                                            ],
                                            null
                                        ]
                                    ]
                                ]
                            ],
                            "where": [],
                            "groupBy": [],
                            "having": [],
                            "orderBy": [],
                            "limit": null,
                            "intersect": null,
                            "union": null,
                            "except": null
                        },
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "pred": [
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003"
        ],
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    2003.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    9,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        2003.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    23,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"English\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id having count ( * ) > 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id having count ( * ) > 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id having count ( * ) > 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id having count ( * ) > 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id having count ( * ) > 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id having count ( * ) > 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id having count ( * ) > 1"
        ],
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name from dogs join treatments on dogs.owner_id = treatments.dog_id where treatments.cost_of_treatment != 1000",
            "select dogs.name from dogs join treatments on dogs.owner_id = treatments.dog_id where treatments.cost_of_treatment != 1000",
            "select dogs.name from dogs join treatments on dogs.owner_id = treatments.dog_id where treatments.cost_of_treatment != 1000",
            "select dogs.name from dogs join treatments on dogs.owner_id = treatments.dog_id where treatments.cost_of_treatment != 1000",
            "select dogs.name from dogs join treatments on dogs.owner_id = treatments.dog_id where treatments.cost_of_treatment != 1000",
            "select dogs.name from dogs join treatments on dogs.owner_id = treatments.dog_id where treatments.cost_of_treatment != 1000",
            "select dogs.name from dogs join treatments on dogs.owner_id = treatments.dog_id where treatments.cost_of_treatment != 1000"
        ],
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            45,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [
                            [
                                0,
                                45,
                                false
                            ]
                        ],
                        "having": [
                            [
                                false,
                                3,
                                [
                                    0,
                                    [
                                        4,
                                        49,
                                        false
                                    ],
                                    null
                                ],
                                1000.0,
                                null
                            ]
                        ],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'"
        ],
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"haiti\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"09700166582\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "pred": [
            "select cylinders from cars_data where horsepower = 4 order by horsepower desc limit 1",
            "select cylinders from cars_data where horsepower = 4 order by horsepower desc limit 1",
            "select cylinders from cars_data where horsepower = 4 order by horsepower desc limit 1",
            "select cylinders from cars_data where horsepower = 4 order by horsepower desc limit 1",
            "select cylinders from cars_data where horsepower = 4 order by horsepower desc limit 1",
            "select cylinders from cars_data where horsepower = 4 order by horsepower desc limit 1",
            "select cylinders from cars_data where horsepower = 4 order by horsepower desc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc",
            "select section_name from sections order by section_name desc"
        ],
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "pred": [
            "select airportcode , airportname from airports where city = 'Anthony'",
            "select airportcode , airportname from airports where city = 'Anthony'",
            "select airportcode , airportname from airports where city = 'Anthony'",
            "select airportcode , airportname from airports where city = 'Anthony'",
            "select airportcode , airportname from airports where city = 'Anthony'",
            "select airportcode , airportname from airports where city = 'Anthony'",
            "select airportcode , airportname from airports where city = 'Anthony'"
        ],
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Anthony\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1"
        ],
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "pred": [
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid"
        ],
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from model_list join car_names on model_list.model = car_names.model group by model_list.model order by count ( * ) desc limit 1",
            "select model_list.model from model_list join car_names on model_list.model = car_names.model group by model_list.model order by count ( * ) desc limit 1",
            "select model_list.model from model_list join car_names on model_list.model = car_names.model group by model_list.model order by count ( * ) desc limit 1",
            "select model_list.model from model_list join car_names on model_list.model = car_names.model group by model_list.model order by count ( * ) desc limit 1",
            "select model_list.model from model_list join car_names on model_list.model = car_names.model group by model_list.model order by count ( * ) desc limit 1",
            "select model_list.model from model_list join car_names on model_list.model = car_names.model group by model_list.model order by count ( * ) desc limit 1",
            "select model_list.model from model_list join car_names on model_list.model = car_names.model group by model_list.model order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "pred": [
            "select avg ( lifeexpectancy ) from country where governmentform = 'Republic' and continent = 'Africa'",
            "select avg ( lifeexpectancy ) from country where governmentform = 'Republic' and continent = 'Africa'",
            "select avg ( lifeexpectancy ) from country where governmentform = 'Republic' and continent = 'Africa'",
            "select avg ( lifeexpectancy ) from country where governmentform = 'Republic' and continent = 'Africa'",
            "select avg ( lifeexpectancy ) from country where governmentform = 'Republic' and continent = 'Africa'",
            "select avg ( lifeexpectancy ) from country where governmentform = 'Republic' and continent = 'Africa'",
            "select avg ( lifeexpectancy ) from country where governmentform = 'Republic' and continent = 'Africa'"
        ],
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )",
            "select dogs.name , treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id where dogs.breed_code = ( select min ( breed_code ) from breeds )"
        ],
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                48,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            23,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [
                            [
                                0,
                                23,
                                false
                            ]
                        ],
                        "having": [],
                        "orderBy": [
                            "asc",
                            [
                                [
                                    0,
                                    [
                                        3,
                                        0,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ],
                        "limit": 1,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "pred": [
            "select id from cars_data order by mpg desc limit 1",
            "select id from cars_data order by mpg desc limit 1",
            "select id from cars_data order by mpg desc limit 1",
            "select id from cars_data order by mpg desc limit 1",
            "select id from cars_data order by mpg desc limit 1",
            "select id from cars_data order by mpg desc limit 1",
            "select id from cars_data order by mpg desc limit 1"
        ],
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "question": "What is the car model with the highest mpg ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "pred": [
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype"
        ],
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "pred": [
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "pred": [
            "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
            "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
            "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
            "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
            "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
            "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
            "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016"
        ],
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    2013.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    34,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ],
                        2016.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "pred": [
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )"
        ],
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            13,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "pred": [
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )"
        ],
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "Show names of all high school students who do not have any friends.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select name , location , district from shop order by number_products desc",
            "select name , location , district from shop order by number_products desc",
            "select name , location , district from shop order by number_products desc",
            "select name , location , district from shop order by number_products desc",
            "select name , location , district from shop order by number_products desc",
            "select name , location , district from shop order by number_products desc",
            "select name , location , district from shop order by number_products desc"
        ],
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports"
        ],
        "gold": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "pred": [
            "select max ( weight ) , pettype from pets group by pettype",
            "select max ( weight ) , pettype from pets group by pettype",
            "select max ( weight ) , pettype from pets group by pettype",
            "select max ( weight ) , pettype from pets group by pettype",
            "select max ( weight ) , pettype from pets group by pettype",
            "select max ( weight ) , pettype from pets group by pettype",
            "select max ( weight ) , pettype from pets group by pettype"
        ],
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
            "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
            "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
            "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
            "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
            "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'",
            "select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'"
        ],
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"BK\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "pred": [
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer"
        ],
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "pred": [
            "select grade from highschooler",
            "select grade from highschooler",
            "select grade from highschooler",
            "select grade from highschooler",
            "select grade from highschooler",
            "select grade from highschooler",
            "select grade from highschooler"
        ],
        "gold": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "pred": [
            "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.num_of_ticket ) desc limit 1",
            "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.num_of_ticket ) desc limit 1",
            "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.num_of_ticket ) desc limit 1",
            "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.num_of_ticket ) desc limit 1",
            "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.num_of_ticket ) desc limit 1",
            "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.num_of_ticket ) desc limit 1",
            "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.num_of_ticket ) desc limit 1"
        ],
        "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "pred": [
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )"
        ],
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'",
            "select count ( * ) from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'",
            "select count ( * ) from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'",
            "select count ( * ) from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'",
            "select count ( * ) from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'",
            "select count ( * ) from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'",
            "select count ( * ) from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'JetBlue Airways'"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "pred": [
            "select tv_series.episode from tv_series join tv_channel on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'",
            "select tv_series.episode from tv_series join tv_channel on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'",
            "select tv_series.episode from tv_series join tv_channel on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'",
            "select tv_series.episode from tv_series join tv_channel on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'",
            "select tv_series.episode from tv_series join tv_channel on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'",
            "select tv_series.episode from tv_series join tv_channel on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'",
            "select tv_series.episode from tv_series join tv_channel on tv_channel.id = tv_series.channel where tv_channel.series_name = 'Sky Radio'"
        ],
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )"
        ],
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            22,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [
                            "desc",
                            [
                                [
                                    0,
                                    [
                                        0,
                                        20,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ],
                        "limit": 1,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code from templates group by template_type_code having count ( * ) < 3",
            "select template_type_code from templates group by template_type_code having count ( * ) < 3",
            "select template_type_code from templates group by template_type_code having count ( * ) < 3",
            "select template_type_code from templates group by template_type_code having count ( * ) < 3",
            "select template_type_code from templates group by template_type_code having count ( * ) < 3",
            "select template_type_code from templates group by template_type_code having count ( * ) < 3",
            "select template_type_code from templates group by template_type_code having count ( * ) < 3"
        ],
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count ( * ) > 3 union select countries.countryid , countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = 'fiat'"
        ],
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"fiat\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "pred": [
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Brazil' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Ireland'",
            "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Brazil' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Ireland'",
            "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Brazil' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Ireland'",
            "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Brazil' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Ireland'",
            "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Brazil' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Ireland'",
            "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Brazil' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Ireland'",
            "select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Brazil' intersect select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id where paragraphs.paragraph_text = 'Ireland'"
        ],
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    15,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        "\"Ireland\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "pred": [
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1",
            "select model_list.model from cars_data join model_list on cars_data.id = model_list.model order by horsepower asc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "pred": [
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )"
        ],
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'"
        ],
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Port Chelsea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"Ford Motor Company\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "pred": [
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'",
            "select airline from airlines where abbreviation = 'UAL'"
        ],
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"UAL\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "pred": [
            "select model from model_list group by model order by count ( * ) desc limit 1",
            "select model from model_list group by model order by count ( * ) desc limit 1",
            "select model from model_list group by model order by count ( * ) desc limit 1",
            "select model from model_list group by model order by count ( * ) desc limit 1",
            "select model from model_list group by model order by count ( * ) desc limit 1",
            "select model from model_list group by model order by count ( * ) desc limit 1",
            "select model from model_list group by model order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1",
            "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count ( * ) desc limit 1"
        ],
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "pred": [
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show"
        ],
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "pred": [
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1"
        ],
        "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "pred": [
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'"
        ],
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the country codes of countries where people use languages other than English?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "pred": [
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc"
        ],
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "pred": [
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1"
        ],
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.zip_code from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.zip_code from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.zip_code from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.zip_code from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.zip_code from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.zip_code from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.zip_code from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "pred": [
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )",
            "select min ( grade ) from highschooler where id not in ( select student_id from friend )"
        ],
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        1,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016",
            "select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016",
            "select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016",
            "select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016",
            "select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016",
            "select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016",
            "select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name , players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016"
        ],
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    2013.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    34,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ],
                        2016.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "pred": [
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc",
            "select name from conductor order by year_of_work desc"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "pred": [
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )",
            "select name from country where population > ( select max ( population ) from country where continent = 'Asia' )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            14,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ],
                                "\"Africa\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1"
        ],
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "pred": [
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )",
            "select countryname from countries where countryid not in ( select country from car_makers )"
        ],
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the countries with no car makers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "pred": [
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000",
            "select sum ( population ) , avg ( surfacearea ) from country where continent = 'North America' and surfacearea > 3000"
        ],
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"north america\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "pred": [
            "select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul'",
            "select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul'",
            "select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul'",
            "select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul'",
            "select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul'",
            "select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul'",
            "select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul'"
        ],
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kabul\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "pred": [
            "select count ( * ) , student_id from likes group by student_id",
            "select count ( * ) , student_id from likes group by student_id",
            "select count ( * ) , student_id from likes group by student_id",
            "select count ( * ) , student_id from likes group by student_id",
            "select count ( * ) , student_id from likes group by student_id",
            "select count ( * ) , student_id from likes group by student_id",
            "select count ( * ) , student_id from likes group by student_id"
        ],
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "pred": [
            "select sum ( song.sales ) , singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name",
            "select sum ( song.sales ) , singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name",
            "select sum ( song.sales ) , singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name",
            "select sum ( song.sales ) , singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name",
            "select sum ( song.sales ) , singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name",
            "select sum ( song.sales ) , singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name",
            "select sum ( song.sales ) , singer.name from singer join song on singer.singer_id = song.singer_id group by singer.name"
        ],
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the total sales for their songs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "pred": [
            "select count ( * ) from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select count ( * ) from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select count ( * ) from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select count ( * ) from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select count ( * ) from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select count ( * ) from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select count ( * ) from countrylanguage where language = 'Spanish' order by percentage desc limit 1"
        ],
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Spanish\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'",
            "select zip_postcode from addresses where city = 'Port Chelsea'"
        ],
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Port Chelsea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "pred": [
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'"
        ],
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )",
            "select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )"
        ],
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            22,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [
                            "desc",
                            [
                                [
                                    0,
                                    [
                                        0,
                                        20,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ],
                        "limit": 1,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "pred": [
            "select episode , rating from tv_series order by rating desc limit 3",
            "select episode , rating from tv_series order by rating desc limit 3",
            "select episode , rating from tv_series order by rating desc limit 3",
            "select episode , rating from tv_series order by rating desc limit 3",
            "select episode , rating from tv_series order by rating desc limit 3",
            "select episode , rating from tv_series order by rating desc limit 3",
            "select episode , rating from tv_series order by rating desc limit 3"
        ],
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "pred": [
            "select winner_name , loser_name from matches order by minutes desc limit 1",
            "select winner_name , loser_name from matches order by minutes desc limit 1",
            "select winner_name , loser_name from matches order by minutes desc limit 1",
            "select winner_name , loser_name from matches order by minutes desc limit 1",
            "select winner_name , loser_name from matches order by minutes desc limit 1",
            "select winner_name , loser_name from matches order by minutes desc limit 1",
            "select winner_name , loser_name from matches order by minutes desc limit 1"
        ],
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "pred": [
            "select created from votes where state = 'CA'",
            "select created from votes where state = 'CA'",
            "select created from votes where state = 'CA'",
            "select created from votes where state = 'CA'",
            "select created from votes where state = 'CA'",
            "select created from votes where state = 'CA'",
            "select created from votes where state = 'CA'"
        ],
        "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"CA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )"
        ],
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of dogs of an age below the average.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            26,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "pred": [
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba'"
        ],
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Aruba\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "pred": [
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer",
            "select count ( * ) from singer"
        ],
        "gold": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "pred": [
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1",
            "select country_code from players group by country_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    7,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "pred": [
            "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
            "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
            "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
            "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
            "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
            "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
            "select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid"
        ],
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "pred": [
            "select hometown , count ( * ) from teacher group by hometown",
            "select hometown , count ( * ) from teacher group by hometown",
            "select hometown , count ( * ) from teacher group by hometown",
            "select hometown , count ( * ) from teacher group by hometown",
            "select hometown , count ( * ) from teacher group by hometown",
            "select hometown , count ( * ) from teacher group by hometown",
            "select hometown , count ( * ) from teacher group by hometown"
        ],
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "pred": [
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'"
        ],
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1",
            "select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1"
        ],
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2013.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "pred": [
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1"
        ],
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "pred": [
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2",
            "select name from highschooler where grade > 5 group by name having count ( * ) >= 2"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'"
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name , student_enrolment.student_enrolment_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_enrolment_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_enrolment_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_enrolment_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_enrolment_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_enrolment_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_enrolment_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    28,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"volvo\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "pred": [
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1",
            "select citizenship from singer group by citizenship order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "pred": [
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'"
        ],
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "pred": [
            "select id from highschooler where name = 'Kyle'",
            "select id from highschooler where name = 'Kyle'",
            "select id from highschooler where name = 'Kyle'",
            "select id from highschooler where name = 'Kyle'",
            "select id from highschooler where name = 'Kyle'",
            "select id from highschooler where name = 'Kyle'",
            "select id from highschooler where name = 'Kyle'"
        ],
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'",
            "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015"
        ],
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    18,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        2015.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "pred": [
            "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by has_pet.stuid having count ( * ) > 1",
            "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by has_pet.stuid having count ( * ) > 1",
            "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by has_pet.stuid having count ( * ) > 1",
            "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by has_pet.stuid having count ( * ) > 1",
            "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by has_pet.stuid having count ( * ) > 1",
            "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by has_pet.stuid having count ( * ) > 1",
            "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid group by has_pet.stuid having count ( * ) > 1"
        ],
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.contid = countries.continent where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.contid = countries.continent where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.contid = countries.continent where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.contid = countries.continent where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.contid = countries.continent where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.contid = countries.continent where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.contid = countries.continent where continents.continent = 'europe' group by countries.countryname having count ( * ) >= 3"
        ],
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"europe\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "pred": [
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1",
            "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "pred": [
            "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'",
            "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'",
            "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'",
            "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'",
            "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'",
            "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'",
            "select count ( * ) from cartoon where written_by = 'Joseph Kuhr'"
        ],
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"Joseph Kuhr\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "pred": [
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10"
        ],
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    9.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from cars_data where cylinders > 6",
            "select count ( * ) from cars_data where cylinders > 6",
            "select count ( * ) from cars_data where cylinders > 6",
            "select count ( * ) from cars_data where cylinders > 6",
            "select count ( * ) from cars_data where cylinders > 6",
            "select count ( * ) from cars_data where cylinders > 6",
            "select count ( * ) from cars_data where cylinders > 6"
        ],
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    6.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "pred": [
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "pred": [
            "select charge_type from charges order by charge_amount desc limit 1",
            "select charge_type from charges order by charge_amount desc limit 1",
            "select charge_type from charges order by charge_amount desc limit 1",
            "select charge_type from charges order by charge_amount desc limit 1",
            "select charge_type from charges order by charge_amount desc limit 1",
            "select charge_type from charges order by charge_amount desc limit 1",
            "select charge_type from charges order by charge_amount desc limit 1"
        ],
        "gold": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "pred": [
            "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "select max ( mpg ) from cars_data where cylinders = 8 or year < 1980"
        ],
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    8.0,
                    null
                ],
                "or",
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "pred": [
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common hometown of teachers.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs"
        ],
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )"
        ],
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            21,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "pred": [
            "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'",
            "select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' intersect select players.country_code , players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'Australian Open'"
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"WTA Championships\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ],
                        "\"Australian Open\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1",
            "select record_company from orchestra group by record_company order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            20,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ],
                "and",
                [
                    false,
                    6,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )",
            "select name from employee where employee_id not in ( select employee_id from evaluation )"
        ],
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the employees who never received any evaluation?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            15,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "pred": [
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) >= 10",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) >= 10",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) >= 10",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) >= 10",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) >= 10",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) >= 10",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) >= 10"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.date_arrived , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select dogs.date_arrived , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select dogs.date_arrived , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select dogs.date_arrived , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select dogs.date_arrived , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select dogs.date_arrived , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select dogs.date_arrived , dogs.date_departed from treatments join dogs on treatments.dog_id = dogs.dog_id"
        ],
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "pred": [
            "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'",
            "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'",
            "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'",
            "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'",
            "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'",
            "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'",
            "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code where other_available_features.feature_name = 'AirCon'"
        ],
        "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the feature type name of feature AirCon?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"AirCon\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "pred": [
            "select count ( * ) from matches join players on matches.winner_id = players.player_id where players.hand = 'left' and matches.tourney_name = 'WTA Championships'",
            "select count ( * ) from matches join players on matches.winner_id = players.player_id where players.hand = 'left' and matches.tourney_name = 'WTA Championships'",
            "select count ( * ) from matches join players on matches.winner_id = players.player_id where players.hand = 'left' and matches.tourney_name = 'WTA Championships'",
            "select count ( * ) from matches join players on matches.winner_id = players.player_id where players.hand = 'left' and matches.tourney_name = 'WTA Championships'",
            "select count ( * ) from matches join players on matches.winner_id = players.player_id where players.hand = 'left' and matches.tourney_name = 'WTA Championships'",
            "select count ( * ) from matches join players on matches.winner_id = players.player_id where players.hand = 'left' and matches.tourney_name = 'WTA Championships'",
            "select count ( * ) from matches join players on matches.winner_id = players.player_id where players.hand = 'left' and matches.tourney_name = 'WTA Championships'"
        ],
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                34,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"WTA Championships\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            30,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'",
            "select template_type_code from ref_template_types where template_type_description = 'Book'"
        ],
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Book\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "pred": [
            "select car_makers.maker , cars_data.year from car_makers join cars_data on car_makers.id = cars_data.id order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from car_makers join cars_data on car_makers.id = cars_data.id order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from car_makers join cars_data on car_makers.id = cars_data.id order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from car_makers join cars_data on car_makers.id = cars_data.id order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from car_makers join cars_data on car_makers.id = cars_data.id order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from car_makers join cars_data on car_makers.id = cars_data.id order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from car_makers join cars_data on car_makers.id = cars_data.id order by cars_data.year asc limit 1"
        ],
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            23,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( * ) from transcripts",
            "select count ( * ) from transcripts",
            "select count ( * ) from transcripts",
            "select count ( * ) from transcripts",
            "select count ( * ) from transcripts",
            "select count ( * ) from transcripts",
            "select count ( * ) from transcripts"
        ],
        "gold": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are released?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "pred": [
            "select sum ( surfacearea ) from country where region = 'Carribean'",
            "select sum ( surfacearea ) from country where region = 'Carribean'",
            "select sum ( surfacearea ) from country where region = 'Carribean'",
            "select sum ( surfacearea ) from country where region = 'Carribean'",
            "select sum ( surfacearea ) from country where region = 'Carribean'",
            "select sum ( surfacearea ) from country where region = 'Carribean'",
            "select sum ( surfacearea ) from country where region = 'Carribean'"
        ],
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Caribbean\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "pred": [
            "select avg ( winner_rank ) from matches",
            "select avg ( winner_rank ) from matches",
            "select avg ( winner_rank ) from matches",
            "select avg ( winner_rank ) from matches",
            "select avg ( winner_rank ) from matches",
            "select avg ( winner_rank ) from matches",
            "select avg ( winner_rank ) from matches"
        ],
        "gold": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all matches?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( * ) , transcripts.transcript_id from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id order by count ( * ) desc limit 1",
            "select count ( * ) , transcripts.transcript_id from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id order by count ( * ) desc limit 1",
            "select count ( * ) , transcripts.transcript_id from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id order by count ( * ) desc limit 1",
            "select count ( * ) , transcripts.transcript_id from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id order by count ( * ) desc limit 1",
            "select count ( * ) , transcripts.transcript_id from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id order by count ( * ) desc limit 1",
            "select count ( * ) , transcripts.transcript_id from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id order by count ( * ) desc limit 1",
            "select count ( * ) , transcripts.transcript_id from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_course_id group by transcripts.transcript_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                55,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    55,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "pred": [
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )",
            "select avg ( grade ) from highschooler where id in ( select student_id from friend )"
        ],
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        1,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            4,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )"
        ],
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            46,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select count ( * ) , city from employee group by city",
            "select count ( * ) , city from employee group by city",
            "select count ( * ) , city from employee group by city",
            "select count ( * ) , city from employee group by city",
            "select count ( * ) , city from employee group by city",
            "select count ( * ) , city from employee group by city",
            "select count ( * ) , city from employee group by city"
        ],
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "pred": [
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1",
            "select name from country where continent = 'Asia' order by lifeexpectancy asc limit 1"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select document_name , template_id from documents where document_description like '%w%'",
            "select document_name , template_id from documents where document_description like '%w%'",
            "select document_name , template_id from documents where document_description like '%w%'",
            "select document_name , template_id from documents where document_description like '%w%'",
            "select document_name , template_id from documents where document_description like '%w%'",
            "select document_name , template_id from documents where document_description like '%w%'",
            "select document_name , template_id from documents where document_description like '%w%'"
        ],
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"%w%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "pred": [
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc"
        ],
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "pred": [
            "select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1",
            "select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1",
            "select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1",
            "select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1",
            "select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1",
            "select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1",
            "select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count ( * ) > 1"
        ],
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name",
            "select singer.name , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name",
            "select singer.name , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name",
            "select singer.name , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name",
            "select singer.name , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name",
            "select singer.name , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name",
            "select singer.name , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name"
        ],
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "pred": [
            "select student_id from friend intersect select student_id from likes",
            "select student_id from friend intersect select student_id from likes",
            "select student_id from friend intersect select student_id from likes",
            "select student_id from friend intersect select student_id from likes",
            "select student_id from friend intersect select student_id from likes",
            "select student_id from friend intersect select student_id from likes",
            "select student_id from friend intersect select student_id from likes"
        ],
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    7,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "pred": [
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc",
            "select major_record_format from orchestra group by major_record_format order by count ( * ) asc"
        ],
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
            "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
            "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
            "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
            "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
            "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2",
            "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) >= 2"
        ],
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    33,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "pred": [
            "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
            "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
            "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
            "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
            "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
            "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
            "select name from visitor where level_of_membership > 4 order by level_of_membership desc"
        ],
        "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines",
            "select count ( * ) from airlines"
        ],
        "gold": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "pred": [
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )",
            "select name from singer where singer_id not in ( select singer_id from song )"
        ],
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'",
            "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'",
            "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'",
            "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'",
            "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'",
            "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'",
            "select document_id , template_id , document_description from documents where document_name = 'Robbin CV'"
        ],
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Robbin CV\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "pred": [
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'"
        ],
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ],
                        "\"Todd Casey\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'CVO'"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"CVO\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from cars_data where horsepower > 150",
            "select count ( * ) from cars_data where horsepower > 150",
            "select count ( * ) from cars_data where horsepower > 150",
            "select count ( * ) from cars_data where horsepower > 150",
            "select count ( * ) from cars_data where horsepower > 150",
            "select count ( * ) from cars_data where horsepower > 150",
            "select count ( * ) from cars_data where horsepower > 150"
        ],
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    150.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "pred": [
            "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id"
        ],
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "pred": [
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'"
        ],
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the country codes for countries that do not speak English?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    23,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"English\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Tabatha Gehling\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    7,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        "\"Kelly Clauss\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "pred": [
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4",
            "select grade from highschooler group by grade having count ( * ) >= 4"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "pred": [
            "select age from dogs order by age desc limit 1",
            "select age from dogs order by age desc limit 1",
            "select age from dogs order by age desc limit 1",
            "select age from dogs order by age desc limit 1",
            "select age from dogs order by age desc limit 1",
            "select age from dogs order by age desc limit 1",
            "select age from dogs order by age desc limit 1"
        ],
        "gold": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "pred": [
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language != 'English'"
        ],
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which cities are in European countries where English is not the official language?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Europe\"",
                    null
                ],
                "and",
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ],
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        23,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        25,
                                        false
                                    ],
                                    null
                                ],
                                "\"T\"",
                                null
                            ],
                            "and",
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        24,
                                        false
                                    ],
                                    null
                                ],
                                "\"English\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2"
        ],
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                40,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"Indiana\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    40,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    43,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [
                    [
                        0,
                        33,
                        false
                    ]
                ],
                "having": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                3,
                                0,
                                false
                            ],
                            null
                        ],
                        2.0,
                        null
                    ]
                ],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "pred": [
            "select airportname from airports where airportcode not in ( select airportcode from flights ) and airports.airportcode not in ( select airportcode from flights )",
            "select airportname from airports where airportcode not in ( select airportcode from flights ) and airports.airportcode not in ( select airportcode from flights )",
            "select airportname from airports where airportcode not in ( select airportcode from flights ) and airports.airportcode not in ( select airportcode from flights )",
            "select airportname from airports where airportcode not in ( select airportcode from flights ) and airports.airportcode not in ( select airportcode from flights )",
            "select airportname from airports where airportcode not in ( select airportcode from flights ) and airports.airportcode not in ( select airportcode from flights )",
            "select airportname from airports where airportcode not in ( select airportcode from flights ) and airports.airportcode not in ( select airportcode from flights )",
            "select airportname from airports where airportcode not in ( select airportcode from flights ) and airports.airportcode not in ( select airportcode from flights )"
        ],
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            12,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": {
                            "from": {
                                "table_units": [
                                    [
                                        "table_unit",
                                        2
                                    ]
                                ],
                                "conds": []
                            },
                            "select": [
                                false,
                                [
                                    [
                                        0,
                                        [
                                            0,
                                            [
                                                0,
                                                13,
                                                false
                                            ],
                                            null
                                        ]
                                    ]
                                ]
                            ],
                            "where": [],
                            "groupBy": [],
                            "having": [],
                            "orderBy": [],
                            "limit": null,
                            "intersect": null,
                            "union": null,
                            "except": null
                        },
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "pred": [
            "select count ( * ) from players",
            "select count ( * ) from players",
            "select count ( * ) from players",
            "select count ( * ) from players",
            "select count ( * ) from players",
            "select count ( * ) from players",
            "select count ( * ) from players"
        ],
        "gold": "SELECT count(*) FROM players",
        "question": "How many players are there?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'",
            "select other_details from paragraphs where paragraph_text = 'Korea'"
        ],
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"korea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "pred": [
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )",
            "select name from teacher where teacher_id not in ( select teacher_id from course_arrange )"
        ],
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1",
            "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most students enrolled?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        8
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            50,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "pred": [
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "pred": [
            "select countrycode from countrylanguage where language = 'English' or language = 'Dutch'",
            "select countrycode from countrylanguage where language = 'English' or language = 'Dutch'",
            "select countrycode from countrylanguage where language = 'English' or language = 'Dutch'",
            "select countrycode from countrylanguage where language = 'English' or language = 'Dutch'",
            "select countrycode from countrylanguage where language = 'English' or language = 'Dutch'",
            "select countrycode from countrylanguage where language = 'English' or language = 'Dutch'",
            "select countrycode from countrylanguage where language = 'English' or language = 'Dutch'"
        ],
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"english\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"t\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    9,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"dutch\"",
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ],
                        "\"t\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "pred": [
            "select country from singer where age > 40 intersect select country from singer where age < 30",
            "select country from singer where age > 40 intersect select country from singer where age < 30",
            "select country from singer where age > 40 intersect select country from singer where age < 30",
            "select country from singer where age > 40 intersect select country from singer where age < 30",
            "select country from singer where age > 40 intersect select country from singer where age < 30",
            "select country from singer where age > 40 intersect select country from singer where age < 30",
            "select country from singer where age > 40 intersect select country from singer where age < 30"
        ],
        "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    10,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        4,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        30.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1",
            "select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "pred": [
            "select country_code , count ( * ) from players group by country_code",
            "select country_code , count ( * ) from players group by country_code",
            "select country_code , count ( * ) from players group by country_code",
            "select country_code , count ( * ) from players group by country_code",
            "select country_code , count ( * ) from players group by country_code",
            "select country_code , count ( * ) from players group by country_code",
            "select country_code , count ( * ) from players group by country_code"
        ],
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )"
        ],
        "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            45,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "pred": [
            "select avg ( loser_age ) , winner_age from matches group by winner_age",
            "select avg ( loser_age ) , winner_age from matches group by winner_age",
            "select avg ( loser_age ) , winner_age from matches group by winner_age",
            "select avg ( loser_age ) , winner_age from matches group by winner_age",
            "select avg ( loser_age ) , winner_age from matches group by winner_age",
            "select avg ( loser_age ) , winner_age from matches group by winner_age",
            "select avg ( loser_age ) , winner_age from matches group by winner_age"
        ],
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all matches.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'",
            "select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = 'Presentation'"
        ],
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Presentation\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from cars_data where year = 1980",
            "select count ( * ) from cars_data where year = 1980",
            "select count ( * ) from cars_data where year = 1980",
            "select count ( * ) from cars_data where year = 1980",
            "select count ( * ) from cars_data where year = 1980",
            "select count ( * ) from cars_data where year = 1980",
            "select count ( * ) from cars_data where year = 1980"
        ],
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "pred": [
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype",
            "select pettype , avg ( weight ) from pets group by pettype"
        ],
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1",
            "select documents.document_id , documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = 'Republic' group by countrylanguage.language having count ( * ) = 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "pred": [
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.maker = model_list.model group by car_makers.maker having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.maker = model_list.model group by car_makers.maker having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.maker = model_list.model group by car_makers.maker having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.maker = model_list.model group by car_makers.maker having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.maker = model_list.model group by car_makers.maker having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.maker = model_list.model group by car_makers.maker having count ( * ) >= 3",
            "select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) >= 2 intersect select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.maker = model_list.model group by car_makers.maker having count ( * ) >= 3"
        ],
        "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ],
                        [
                            "table_unit",
                            4
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    12,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    6,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    7,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [
                    [
                        0,
                        6,
                        false
                    ]
                ],
                "having": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                3,
                                0,
                                false
                            ],
                            null
                        ],
                        3.0,
                        null
                    ]
                ],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "pred": [
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc",
            "select record_company from orchestra order by year_of_founded desc"
        ],
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "pred": [
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player"
        ],
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop"
        ],
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airlines where country = 'USA'",
            "select count ( * ) from airlines where country = 'USA'",
            "select count ( * ) from airlines where country = 'USA'",
            "select count ( * ) from airlines where country = 'USA'",
            "select count ( * ) from airlines where country = 'USA'",
            "select count ( * ) from airlines where country = 'USA'",
            "select count ( * ) from airlines where country = 'USA'"
        ],
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "pred": [
            "select count ( * ) , highschooler.name from highschooler join friend on highschooler.id = friend.friend_id group by highschooler.id",
            "select count ( * ) , highschooler.name from highschooler join friend on highschooler.id = friend.friend_id group by highschooler.id",
            "select count ( * ) , highschooler.name from highschooler join friend on highschooler.id = friend.friend_id group by highschooler.id",
            "select count ( * ) , highschooler.name from highschooler join friend on highschooler.id = friend.friend_id group by highschooler.id",
            "select count ( * ) , highschooler.name from highschooler join friend on highschooler.id = friend.friend_id group by highschooler.id",
            "select count ( * ) , highschooler.name from highschooler join friend on highschooler.id = friend.friend_id group by highschooler.id",
            "select count ( * ) , highschooler.name from highschooler join friend on highschooler.id = friend.friend_id group by highschooler.id"
        ],
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "pred": [
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code"
        ],
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                49,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs",
            "select date_arrived , date_departed from dogs"
        ],
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1",
            "select city from employee where age < 30 group by city having count ( * ) > 1"
        ],
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "pred": [
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )",
            "select name from highschooler where id not in ( select student_id from friend )"
        ],
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "What are the names of students who have no friends?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "pred": [
            "select earnings from poker_player order by earnings desc",
            "select earnings from poker_player order by earnings desc",
            "select earnings from poker_player order by earnings desc",
            "select earnings from poker_player order by earnings desc",
            "select earnings from poker_player order by earnings desc",
            "select earnings from poker_player order by earnings desc",
            "select earnings from poker_player order by earnings desc"
        ],
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "pred": [
            "select name from teacher order by age asc",
            "select name from teacher order by age asc",
            "select name from teacher order by age asc",
            "select name from teacher order by age asc",
            "select name from teacher order by age asc",
            "select name from teacher order by age asc",
            "select name from teacher order by age asc"
        ],
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "pred": [
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'"
        ],
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            25,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        21,
                                        false
                                    ],
                                    null
                                ],
                                "\"Ben Jones\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "pred": [
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1"
        ],
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select section_name , section_description from sections",
            "select section_name , section_description from sections",
            "select section_name , section_description from sections",
            "select section_name , section_description from sections",
            "select section_name , section_description from sections",
            "select section_name , section_description from sections",
            "select section_name , section_description from sections"
        ],
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline where flights.sourceairport = 'AHD'"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "pred": [
            "select first_name , last_name from players where hand = 'L' order by birth_date asc",
            "select first_name , last_name from players where hand = 'L' order by birth_date asc",
            "select first_name , last_name from players where hand = 'L' order by birth_date asc",
            "select first_name , last_name from players where hand = 'L' order by birth_date asc",
            "select first_name , last_name from players where hand = 'L' order by birth_date asc",
            "select first_name , last_name from players where hand = 'L' order by birth_date asc",
            "select first_name , last_name from players where hand = 'L' order by birth_date asc"
        ],
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "pred": [
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1",
            "select hometown from teacher group by hometown order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "pred": [
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3",
            "select name from country order by population desc limit 3"
        ],
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "pred": [
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1",
            "select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1"
        ],
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015",
            "select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015"
        ],
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    18,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        2015.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang'"
        ],
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Michael Chang\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        "\"Ben Jones\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )",
            "select count ( * ) from owners where owner_id not in ( select owner_id from dogs )"
        ],
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            21,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id group by orchestra.conductor_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1"
        ],
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014"
        ],
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all singer names in concerts in year 2014.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "pred": [
            "select max ( accelerate ) , cylinders from cars_data group by cylinders",
            "select max ( accelerate ) , cylinders from cars_data group by cylinders",
            "select max ( accelerate ) , cylinders from cars_data group by cylinders",
            "select max ( accelerate ) , cylinders from cars_data group by cylinders",
            "select max ( accelerate ) , cylinders from cars_data group by cylinders",
            "select max ( accelerate ) , cylinders from cars_data group by cylinders",
            "select max ( accelerate ) , cylinders from cars_data group by cylinders"
        ],
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( distinct professionals.professional_id ) from treatments join professionals on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select count ( distinct professionals.professional_id ) from treatments join professionals on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select count ( distinct professionals.professional_id ) from treatments join professionals on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select count ( distinct professionals.professional_id ) from treatments join professionals on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select count ( distinct professionals.professional_id ) from treatments join professionals on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select count ( distinct professionals.professional_id ) from treatments join professionals on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select count ( distinct professionals.professional_id ) from treatments join professionals on treatments.professional_id = professionals.professional_id join dogs on treatments.dog_id = dogs.dog_id"
        ],
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                46,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the transcript with the least number of results?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ],
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            52,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    56,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "pred": [
            "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )",
            "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )",
            "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )",
            "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )",
            "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )",
            "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )",
            "select name from museum where num_of_staff > ( select min ( num_of_staff ) from museum where open_year > 2010 )"
        ],
        "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            3,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                3,
                                [
                                    0,
                                    [
                                        0,
                                        4,
                                        false
                                    ],
                                    null
                                ],
                                2010.0,
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    300000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "pred": [
            "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'",
            "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'",
            "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'",
            "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'",
            "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'",
            "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'",
            "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'"
        ],
        "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Brig\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "pred": [
            "select count ( distinct language ) from countrylanguage",
            "select count ( distinct language ) from countrylanguage",
            "select count ( distinct language ) from countrylanguage",
            "select count ( distinct language ) from countrylanguage",
            "select count ( distinct language ) from countrylanguage",
            "select count ( distinct language ) from countrylanguage",
            "select count ( distinct language ) from countrylanguage"
        ],
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "pred": [
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'",
            "select countrycode from countrylanguage where language != 'English'"
        ],
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the country codes for countries that do not speak English.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    23,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"English\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "pred": [
            "select avg ( dogs.age ) from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select avg ( dogs.age ) from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select avg ( dogs.age ) from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select avg ( dogs.age ) from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select avg ( dogs.age ) from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select avg ( dogs.age ) from treatments join dogs on treatments.dog_id = dogs.dog_id",
            "select avg ( dogs.age ) from treatments join dogs on treatments.dog_id = dogs.dog_id"
        ],
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    8,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            45,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "pred": [
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003",
            "select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003"
        ],
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    2003.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    9,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        2003.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "pred": [
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "pred": [
            "select distinct model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.year > 1980",
            "select distinct model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.year > 1980",
            "select distinct model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.year > 1980",
            "select distinct model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.year > 1980",
            "select distinct model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.year > 1980",
            "select distinct model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.year > 1980",
            "select distinct model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.year > 1980"
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the cards produced after 1980?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "pred": [
            "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
            "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
            "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
            "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
            "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
            "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
            "select contestant_name from contestants where contestant_name != 'Jessie Alloway'"
        ],
        "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Jessie Alloway\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "pred": [
            "select min ( weight ) from cars_data where year = 1974 and cylinders = 8",
            "select min ( weight ) from cars_data where year = 1974 and cylinders = 8",
            "select min ( weight ) from cars_data where year = 1974 and cylinders = 8",
            "select min ( weight ) from cars_data where year = 1974 and cylinders = 8",
            "select min ( weight ) from cars_data where year = 1974 and cylinders = 8",
            "select min ( weight ) from cars_data where year = 1974 and cylinders = 8",
            "select min ( weight ) from cars_data where year = 1974 and cylinders = 8"
        ],
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    8.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1974.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by evaluation.employee_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "pred": [
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1"
        ],
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'",
            "select count ( * ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'"
        ],
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PPT\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'United Airlines'",
            "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'United Airlines'",
            "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'United Airlines'",
            "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'United Airlines'",
            "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'United Airlines'",
            "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'United Airlines'",
            "select flights.flightno from airlines join flights on airlines.airline = flights.airline where airlines.airline = 'United Airlines'"
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "pred": [
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'"
        ],
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ],
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        9,
                                        false
                                    ],
                                    null
                                ],
                                "and",
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            11,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        12,
                                        false
                                    ],
                                    null
                                ],
                                "\"cat\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )",
            "select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment )"
        ],
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            46,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "pred": [
            "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'",
            "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'",
            "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'",
            "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'",
            "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'",
            "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'",
            "select avg ( age ) , min ( age ) , max ( age ) from singer where country = 'France'"
        ],
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"France\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "pred": [
            "select id from highschooler except select student_id from friend",
            "select id from highschooler except select student_id from friend",
            "select id from highschooler except select student_id from friend",
            "select id from highschooler except select student_id from friend",
            "select id from highschooler except select student_id from friend",
            "select id from highschooler except select student_id from friend",
            "select id from highschooler except select student_id from friend"
        ],
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of high school students who do not have friends?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    4,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "pred": [
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500",
            "select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500"
        ],
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"General Motors\"",
                    null
                ],
                "or",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'",
            "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'",
            "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'",
            "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'",
            "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'",
            "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'",
            "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'"
        ],
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"American Motor Company\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "pred": [
            "select name , population , lifeexpectancy from country where continent = 'Asia' and surfacearea = ( select max ( surfacearea ) from country where continent = 'Asia' )",
            "select name , population , lifeexpectancy from country where continent = 'Asia' and surfacearea = ( select max ( surfacearea ) from country where continent = 'Asia' )",
            "select name , population , lifeexpectancy from country where continent = 'Asia' and surfacearea = ( select max ( surfacearea ) from country where continent = 'Asia' )",
            "select name , population , lifeexpectancy from country where continent = 'Asia' and surfacearea = ( select max ( surfacearea ) from country where continent = 'Asia' )",
            "select name , population , lifeexpectancy from country where continent = 'Asia' and surfacearea = ( select max ( surfacearea ) from country where continent = 'Asia' )",
            "select name , population , lifeexpectancy from country where continent = 'Asia' and surfacearea = ( select max ( surfacearea ) from country where continent = 'Asia' )",
            "select name , population , lifeexpectancy from country where continent = 'Asia' and surfacearea = ( select max ( surfacearea ) from country where continent = 'Asia' )"
        ],
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "pred": [
            "select votes.created , votes.state , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling'",
            "select votes.created , votes.state , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling'",
            "select votes.created , votes.state , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling'",
            "select votes.created , votes.state , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling'",
            "select votes.created , votes.state , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling'",
            "select votes.created , votes.state , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling'",
            "select votes.created , votes.state , votes.phone_number from votes join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = 'Tabatha Gehling'"
        ],
        "gold": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Tabatha Gehling\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "pred": [
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show",
            "select avg ( attendance ) from show"
        ],
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "pred": [
            "select maker , id from car_makers group by maker having count ( * ) > 3",
            "select maker , id from car_makers group by maker having count ( * ) > 3",
            "select maker , id from car_makers group by maker having count ( * ) > 3",
            "select maker , id from car_makers group by maker having count ( * ) > 3",
            "select maker , id from car_makers group by maker having count ( * ) > 3",
            "select maker , id from car_makers group by maker having count ( * ) > 3",
            "select maker , id from car_makers group by maker having count ( * ) > 3"
        ],
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "pred": [
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )",
            "select count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = ( select max ( capacity ) from stadium )"
        ],
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [
                            "desc",
                            [
                                [
                                    0,
                                    [
                                        0,
                                        4,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ],
                        "limit": 1,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "pred": [
            "select count ( * ) , year from matches group by year",
            "select count ( * ) , year from matches group by year",
            "select count ( * ) , year from matches group by year",
            "select count ( * ) , year from matches group by year",
            "select count ( * ) , year from matches group by year",
            "select count ( * ) , year from matches group by year",
            "select count ( * ) , year from matches group by year"
        ],
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) < 200",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) < 200",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) < 200",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) < 200",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) < 200",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) < 200",
            "select airlines.airline from airlines join flights on airlines.airline = flights.airline group by airlines.airline having count ( * ) < 200"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    200.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "pred": [
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1",
            "select grade from highschooler group by grade order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by template_type_code",
            "select template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by template_type_code",
            "select template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by template_type_code",
            "select template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by template_type_code",
            "select template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by template_type_code",
            "select template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by template_type_code",
            "select template_type_code , count ( * ) from documents join templates on documents.template_id = templates.template_id group by template_type_code"
        ],
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "pred": [
            "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id"
        ],
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    8,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            45,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "pred": [
            "select distinct name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )",
            "select distinct name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )",
            "select distinct name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )",
            "select distinct name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )",
            "select distinct name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )",
            "select distinct name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )",
            "select distinct name from country where surfacearea > ( select min ( surfacearea ) from country where continent = 'Europe' )"
        ],
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            12,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ],
                                "\"Europe\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "pred": [
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number order by count ( * ) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number order by count ( * ) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number order by count ( * ) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number order by count ( * ) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number order by count ( * ) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number order by count ( * ) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code from templates except select template_type_code from documents join templates on documents.template_id = templates.template_id",
            "select template_type_code from templates except select template_type_code from documents join templates on documents.template_id = templates.template_id",
            "select template_type_code from templates except select template_type_code from documents join templates on documents.template_id = templates.template_id",
            "select template_type_code from templates except select template_type_code from documents join templates on documents.template_id = templates.template_id",
            "select template_type_code from templates except select template_type_code from documents join templates on documents.template_id = templates.template_id",
            "select template_type_code from templates except select template_type_code from documents join templates on documents.template_id = templates.template_id",
            "select template_type_code from templates except select template_type_code from documents join templates on documents.template_id = templates.template_id"
        ],
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all template type codes that are not used by any document.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    5,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "pred": [
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
            "select cost_of_treatment from treatments order by date_of_treatment desc limit 1"
        ],
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                49,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            48,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "pred": [
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )",
            "select lname from student where stuid in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pet_age = 3 )"
        ],
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "pred": [
            "select name from teacher where hometown != 'Little Lever Urban District'",
            "select name from teacher where hometown != 'Little Lever Urban District'",
            "select name from teacher where hometown != 'Little Lever Urban District'",
            "select name from teacher where hometown != 'Little Lever Urban District'",
            "select name from teacher where hometown != 'Little Lever Urban District'",
            "select name from teacher where hometown != 'Little Lever Urban District'",
            "select name from teacher where hometown != 'Little Lever Urban District'"
        ],
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"little lever urban district\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "pred": [
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )",
            "select song_name from singer where age > ( select avg ( age ) from singer )"
        ],
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            13,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1",
            "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "pred": [
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1",
            "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1"
        ],
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id",
            "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id",
            "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id",
            "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id",
            "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id",
            "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id",
            "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id"
        ],
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )",
            "select professionals.first_name , professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < ( select avg ( cost_of_treatment ) from treatments )"
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                40,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            49,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            49,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count ( * ) > 1"
        ],
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more likes?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs"
        ],
        "gold": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "pred": [
            "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
            "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
            "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
            "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
            "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
            "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'",
            "select title from cartoon where directed_by = 'Ben Jones' or directed_by = 'Brandon Vietti'"
        ],
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Ben Jones\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Brandon Vietti\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "pred": [
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'"
        ],
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )"
        ],
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            13,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by dogs.owner_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "pred": [
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'",
            "select air_date from tv_series where episode = 'A Love of a Lifetime'"
        ],
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "pred": [
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese'",
            "select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'Chinese'"
        ],
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"t\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"chinese\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "pred": [
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33",
            "select name from teacher where age = 32 or age = 33"
        ],
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    32.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    33.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "pred": [
            "select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle'",
            "select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle'",
            "select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle'",
            "select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle'",
            "select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle'",
            "select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle'",
            "select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle'"
        ],
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "pred": [
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )",
            "select name from stadium where stadium_id not in ( select stadium_id from concert )"
        ],
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any concert.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            18,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name , student_enrolment.student_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select semesters.semester_name , student_enrolment.student_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.student_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    28,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "pred": [
            "select car_names.make , cars_data.year from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1",
            "select car_names.make , cars_data.year from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1",
            "select car_names.make , cars_data.year from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1",
            "select car_names.make , cars_data.year from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1",
            "select car_names.make , cars_data.year from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1",
            "select car_names.make , cars_data.year from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1",
            "select car_names.make , cars_data.year from car_names join cars_data on car_names.makeid = cars_data.id order by cars_data.year asc limit 1"
        ],
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            23,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1",
            "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1",
            "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1",
            "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1",
            "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1",
            "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1",
            "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "pred": [
            "select winner_name , winner_rank from matches order by winner_age asc limit 3",
            "select winner_name , winner_rank from matches order by winner_age asc limit 3",
            "select winner_name , winner_rank from matches order by winner_age asc limit 3",
            "select winner_name , winner_rank from matches order by winner_age asc limit 3",
            "select winner_name , winner_rank from matches order by winner_age asc limit 3",
            "select winner_name , winner_rank from matches order by winner_age asc limit 3",
            "select winner_name , winner_rank from matches order by winner_age asc limit 3"
        ],
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.continent = 'Asia' group by countrylanguage.language order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )",
            "select name from shop where shop_id not in ( select shop_id from hiring )"
        ],
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            11,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "pred": [
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'"
        ],
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            25,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        21,
                                        false
                                    ],
                                    null
                                ],
                                "\"Ben Jones\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select addresses.address_id , addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1",
            "select addresses.address_id , addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "pred": [
            "select count ( * ) from votes where state = 'NY' or state = 'CA'",
            "select count ( * ) from votes where state = 'NY' or state = 'CA'",
            "select count ( * ) from votes where state = 'NY' or state = 'CA'",
            "select count ( * ) from votes where state = 'NY' or state = 'CA'",
            "select count ( * ) from votes where state = 'NY' or state = 'CA'",
            "select count ( * ) from votes where state = 'NY' or state = 'CA'",
            "select count ( * ) from votes where state = 'NY' or state = 'CA'"
        ],
        "gold": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"NY\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"CA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "pred": [
            "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
            "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1"
        ],
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Spanish\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix'",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix'",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix'",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix'",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix'",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix'",
            "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = 'Beatrix'"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Beatrix\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "pred": [
            "select language , count ( * ) from tv_channel group by language",
            "select language , count ( * ) from tv_channel group by language",
            "select language , count ( * ) from tv_channel group by language",
            "select language , count ( * ) from tv_channel group by language",
            "select language , count ( * ) from tv_channel group by language",
            "select language , count ( * ) from tv_channel group by language",
            "select language , count ( * ) from tv_channel group by language"
        ],
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "pred": [
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1"
        ],
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs",
            "select avg ( age ) from dogs"
        ],
        "gold": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the dogs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "pred": [
            "select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000",
            "select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000",
            "select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000",
            "select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000",
            "select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000",
            "select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000",
            "select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000"
        ],
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            45,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [
                            [
                                0,
                                45,
                                false
                            ]
                        ],
                        "having": [
                            [
                                false,
                                3,
                                [
                                    0,
                                    [
                                        4,
                                        49,
                                        false
                                    ],
                                    null
                                ],
                                1000.0,
                                null
                            ]
                        ],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "pred": [
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player",
            "select final_table_made , best_finish from poker_player"
        ],
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.city >= 1",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.city >= 1",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.city >= 1",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.city >= 1",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.city >= 1",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.city >= 1",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.city >= 1"
        ],
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ],
                    [
                        0,
                        34,
                        false
                    ],
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcript_contents.transcript_id order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ],
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            52,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    56,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "pred": [
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'",
            "select name from conductor where nationality != 'USA'"
        ],
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'"
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1",
            "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "pred": [
            "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'",
            "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'",
            "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'",
            "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'",
            "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'",
            "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'",
            "select count ( distinct country.continent ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Chinese'"
        ],
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Chinese\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , count ( * ) from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "pred": [
            "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3",
            "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3",
            "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3",
            "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3",
            "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3",
            "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3",
            "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count ( * ) > 3"
        ],
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select count ( * ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select count ( * ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select count ( * ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select count ( * ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select count ( * ) from dogs join treatments on dogs.dog_id = treatments.dog_id",
            "select count ( * ) from dogs join treatments on dogs.dog_id = treatments.dog_id"
        ],
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                45,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat'",
            "select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat'",
            "select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat'",
            "select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat'",
            "select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat'",
            "select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat'",
            "select student.fname from has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' except select student.fname from has_pet join pets on has_pet.petid = pets.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat'"
        ],
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ],
                "and",
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ],
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        9,
                                        false
                                    ],
                                    null
                                ],
                                "and",
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            11,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        12,
                                        false
                                    ],
                                    null
                                ],
                                "\"cat\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "pred": [
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1",
            "select pettype , weight from pets order by pet_age asc limit 1"
        ],
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "pred": [
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1",
            "select city from airports group by city order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "pred": [
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "pred": [
            "select airportname from airports where city = 'Aberdeen'",
            "select airportname from airports where city = 'Aberdeen'",
            "select airportname from airports where city = 'Aberdeen'",
            "select airportname from airports where city = 'Aberdeen'",
            "select airportname from airports where city = 'Aberdeen'",
            "select airportname from airports where city = 'Aberdeen'",
            "select airportname from airports where city = 'Aberdeen'"
        ],
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "pred": [
            "select content from tv_channel where series_name = 'Sky Radio'",
            "select content from tv_channel where series_name = 'Sky Radio'",
            "select content from tv_channel where series_name = 'Sky Radio'",
            "select content from tv_channel where series_name = 'Sky Radio'",
            "select content from tv_channel where series_name = 'Sky Radio'",
            "select content from tv_channel where series_name = 'Sky Radio'",
            "select content from tv_channel where series_name = 'Sky Radio'"
        ],
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "pred": [
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'",
            "select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey'"
        ],
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ],
                        "\"Todd Casey\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )",
            "select name from shop where number_products > ( select avg ( number_products ) from shop )"
        ],
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( distinct department_id ) from degree_programs",
            "select count ( distinct department_id ) from degree_programs",
            "select count ( distinct department_id ) from degree_programs",
            "select count ( distinct department_id ) from degree_programs",
            "select count ( distinct department_id ) from degree_programs",
            "select count ( distinct department_id ) from degree_programs",
            "select count ( distinct department_id ) from degree_programs"
        ],
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "pred": [
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Spanish'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Spanish'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Spanish'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Spanish'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Spanish'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Spanish'",
            "select count ( * ) from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'Spanish'"
        ],
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Spanish\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "pred": [
            "select count ( distinct pettype ) from pets",
            "select count ( distinct pettype ) from pets",
            "select count ( distinct pettype ) from pets",
            "select count ( distinct pettype ) from pets",
            "select count ( distinct pettype ) from pets",
            "select count ( distinct pettype ) from pets",
            "select count ( distinct pettype ) from pets"
        ],
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1"
        ],
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "pred": [
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'"
        ],
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a cat pet.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    11,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"cat\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1",
            "select document_id from paragraphs group by document_id order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "pred": [
            "select note from death where note like '%East%'",
            "select note from death where note like '%East%'",
            "select note from death where note like '%East%'",
            "select note from death where note like '%East%'",
            "select note from death where note like '%East%'",
            "select note from death where note like '%East%'",
            "select note from death where note like '%East%'"
        ],
        "gold": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"%East%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select degree_program_id from student_enrolment group by degree_program_id order by count ( * ) desc limit 1",
            "select degree_program_id from student_enrolment group by degree_program_id order by count ( * ) desc limit 1",
            "select degree_program_id from student_enrolment group by degree_program_id order by count ( * ) desc limit 1",
            "select degree_program_id from student_enrolment group by degree_program_id order by count ( * ) desc limit 1",
            "select degree_program_id from student_enrolment group by degree_program_id order by count ( * ) desc limit 1",
            "select degree_program_id from student_enrolment group by degree_program_id order by count ( * ) desc limit 1",
            "select degree_program_id from student_enrolment group by degree_program_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering'",
            "select count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering'",
            "select count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering'",
            "select count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering'",
            "select count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering'",
            "select count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering'",
            "select count ( * ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'Engineering'"
        ],
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"engineer\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "pred": [
            "select count ( * ) from concert where year = 2014 or year = 2015",
            "select count ( * ) from concert where year = 2014 or year = 2015",
            "select count ( * ) from concert where year = 2014 or year = 2015",
            "select count ( * ) from concert where year = 2014 or year = 2015",
            "select count ( * ) from concert where year = 2014 or year = 2015",
            "select count ( * ) from concert where year = 2014 or year = 2015",
            "select count ( * ) from concert where year = 2014 or year = 2015"
        ],
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2015.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "pred": [
            "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id"
        ],
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                48,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )",
            "select count ( * ) from professionals where professional_id not in ( select professional_id from treatments )"
        ],
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            46,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id where professionals.state = 'Indiana' union select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id group by professionals.professional_id having count ( * ) > 2"
        ],
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                40,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"Indiana\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    40,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    43,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [
                    [
                        0,
                        33,
                        false
                    ]
                ],
                "having": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                3,
                                0,
                                false
                            ],
                            null
                        ],
                        2.0,
                        null
                    ]
                ],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'"
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_id , version_number , template_type_code from templates",
            "select template_id , version_number , template_type_code from templates",
            "select template_id , version_number , template_type_code from templates",
            "select template_id , version_number , template_type_code from templates",
            "select template_id , version_number , template_type_code from templates",
            "select template_id , version_number , template_type_code from templates",
            "select template_id , version_number , template_type_code from templates"
        ],
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
            "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id"
        ],
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "pred": [
            "select avg ( weight ) , year from cars_data group by year",
            "select avg ( weight ) , year from cars_data group by year",
            "select avg ( weight ) , year from cars_data group by year",
            "select avg ( weight ) , year from cars_data group by year",
            "select avg ( weight ) , year from cars_data group by year",
            "select avg ( weight ) , year from cars_data group by year",
            "select avg ( weight ) , year from cars_data group by year"
        ],
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014",
            "select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014"
        ],
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'"
        ],
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"Math\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        "and",
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    11,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        "\"dog\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "pred": [
            "select count ( distinct governmentform ) from country where continent = 'Africa'",
            "select count ( distinct governmentform ) from country where continent = 'Africa'",
            "select count ( distinct governmentform ) from country where continent = 'Africa'",
            "select count ( distinct governmentform ) from country where continent = 'Africa'",
            "select count ( distinct governmentform ) from country where continent = 'Africa'",
            "select count ( distinct governmentform ) from country where continent = 'Africa'",
            "select count ( distinct governmentform ) from country where continent = 'Africa'"
        ],
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different forms of governments are there in Africa?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
            "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
            "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
            "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
            "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
            "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
            "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code"
        ],
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "pred": [
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'",
            "select avg ( lifeexpectancy ) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language != 'English'"
        ],
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ],
                                [
                                    "table_unit",
                                    3
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            8,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        23,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        24,
                                        false
                                    ],
                                    null
                                ],
                                "\"English\"",
                                null
                            ],
                            "and",
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        25,
                                        false
                                    ],
                                    null
                                ],
                                "\"T\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select address_id from addresses where line_1 and line_2 = 1",
            "select address_id from addresses where line_1 and line_2 = 1",
            "select address_id from addresses where line_1 and line_2 = 1",
            "select address_id from addresses where line_1 and line_2 = 1",
            "select address_id from addresses where line_1 and line_2 = 1",
            "select address_id from addresses where line_1 and line_2 = 1",
            "select address_id from addresses where line_1 and line_2 = 1"
        ],
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1",
            "select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1"
        ],
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    1,
                                    [
                                        0,
                                        [
                                            0,
                                            26,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang'",
            "select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' intersect select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Michael Chang'"
        ],
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Michael Chang\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        "\"Ben Jones\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_program_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "pred": [
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number having count ( * ) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number having count ( * ) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number having count ( * ) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number having count ( * ) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number having count ( * ) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number having count ( * ) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by votes.contestant_number having count ( * ) >= 2"
        ],
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "pred": [
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1",
            "select year from matches group by year order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name from rankings join matches on rankings.ranking_points = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from rankings join matches on rankings.ranking_points = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from rankings join matches on rankings.ranking_points = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from rankings join matches on rankings.ranking_points = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from rankings join matches on rankings.ranking_points = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from rankings join matches on rankings.ranking_points = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from rankings join matches on rankings.ranking_points = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1"
        ],
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"Australian Open\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents"
        ],
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    10,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "pred": [
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan'",
            "select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Afghanistan'"
        ],
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Afghanistan\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "pred": [
            "select abbreviation from airlines where airline = 'JetBlue Airways'",
            "select abbreviation from airlines where airline = 'JetBlue Airways'",
            "select abbreviation from airlines where airline = 'JetBlue Airways'",
            "select abbreviation from airlines where airline = 'JetBlue Airways'",
            "select abbreviation from airlines where airline = 'JetBlue Airways'",
            "select abbreviation from airlines where airline = 'JetBlue Airways'",
            "select abbreviation from airlines where airline = 'JetBlue Airways'"
        ],
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id group by rankings.player_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "pred": [
            "select continent , count ( * ) from continents group by continent",
            "select continent , count ( * ) from continents group by continent",
            "select continent , count ( * ) from continents group by continent",
            "select continent , count ( * ) from continents group by continent",
            "select continent , count ( * ) from continents group by continent",
            "select continent , count ( * ) from continents group by continent",
            "select continent , count ( * ) from continents group by continent"
        ],
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "pred": [
            "select open_year , num_of_staff from museum where name = 'Plaza Museum'",
            "select open_year , num_of_staff from museum where name = 'Plaza Museum'",
            "select open_year , num_of_staff from museum where name = 'Plaza Museum'",
            "select open_year , num_of_staff from museum where name = 'Plaza Museum'",
            "select open_year , num_of_staff from museum where name = 'Plaza Museum'",
            "select open_year , num_of_staff from museum where name = 'Plaza Museum'",
            "select open_year , num_of_staff from museum where name = 'Plaza Museum'"
        ],
        "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Plaza Museum\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select document_id from paragraphs group by document_id having count ( * ) >= 2",
            "select document_id from paragraphs group by document_id having count ( * ) >= 2",
            "select document_id from paragraphs group by document_id having count ( * ) >= 2",
            "select document_id from paragraphs group by document_id having count ( * ) >= 2",
            "select document_id from paragraphs group by document_id having count ( * ) >= 2",
            "select document_id from paragraphs group by document_id having count ( * ) >= 2",
            "select document_id from paragraphs group by document_id having count ( * ) >= 2"
        ],
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "pred": [
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )",
            "select name from people where people_id not in ( select people_id from poker_player )"
        ],
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            2,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "pred": [
            "select first_name from professionals union select first_name from owners",
            "select first_name from professionals union select first_name from owners",
            "select first_name from professionals union select first_name from owners",
            "select first_name from professionals union select first_name from owners",
            "select first_name from professionals union select first_name from owners",
            "select first_name from professionals union select first_name from owners",
            "select first_name from professionals union select first_name from owners"
        ],
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            4
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    11,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": {
                    "from": {
                        "table_units": [
                            [
                                "table_unit",
                                5
                            ]
                        ],
                        "conds": []
                    },
                    "select": [
                        false,
                        [
                            [
                                0,
                                [
                                    0,
                                    [
                                        0,
                                        25,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        ]
                    ],
                    "where": [],
                    "groupBy": [],
                    "having": [],
                    "orderBy": [],
                    "limit": null,
                    "intersect": null,
                    "union": null,
                    "except": null
                }
            },
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company",
            "select record_company , count ( * ) from orchestra group by record_company"
        ],
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "pred": [
            "select name , result from battle where bulgarian_commander != 'Boril'",
            "select name , result from battle where bulgarian_commander != 'Boril'",
            "select name , result from battle where bulgarian_commander != 'Boril'",
            "select name , result from battle where bulgarian_commander != 'Boril'",
            "select name , result from battle where bulgarian_commander != 'Boril'",
            "select name , result from battle where bulgarian_commander != 'Boril'",
            "select name , result from battle where bulgarian_commander != 'Boril'"
        ],
        "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Boril\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "pred": [
            "select name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )",
            "select name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )",
            "select name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )",
            "select name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )",
            "select name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )",
            "select name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )",
            "select name from country where surfacearea > ( select max ( surfacearea ) from country where continent = 'Europe' )"
        ],
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater area than that of any country in Europe?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            12,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ],
                                "\"Europe\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "pred": [
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.age > 20",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.age > 20",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.age > 20",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.age > 20",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.age > 20",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.age > 20",
            "select count ( * ) from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where student.age > 20"
        ],
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    20.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "pred": [
            "select name , country , age from singer order by age desc",
            "select name , country , age from singer order by age desc",
            "select name , country , age from singer order by age desc",
            "select name , country , age from singer order by age desc",
            "select name , country , age from singer order by age desc",
            "select name , country , age from singer order by age desc",
            "select name , country , age from singer order by age desc"
        ],
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count ( * ) >= 2"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "pred": [
            "select visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum ( visit.total_spent ) desc limit 1"
        ],
        "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "pred": [
            "select sum ( total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1",
            "select sum ( total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1",
            "select sum ( total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1",
            "select sum ( total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1",
            "select sum ( total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1",
            "select sum ( total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1",
            "select sum ( total_spent ) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1"
        ],
        "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    23,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"English\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "pred": [
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1",
            "select language , count ( * ) from tv_channel group by language order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "pred": [
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'",
            "select id from tv_channel except select tv_channel.id from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones'"
        ],
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    25,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        "\"Ben Jones\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "pred": [
            "select name , surfacearea from country order by population desc limit 5",
            "select name , surfacearea from country order by population desc limit 5",
            "select name , surfacearea from country order by population desc limit 5",
            "select name , surfacearea from country order by population desc limit 5",
            "select name , surfacearea from country order by population desc limit 5",
            "select name , surfacearea from country order by population desc limit 5",
            "select name , surfacearea from country order by population desc limit 5"
        ],
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 5,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "pred": [
            "select distinct language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic'",
            "select distinct language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic'",
            "select distinct language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic'",
            "select distinct language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic'",
            "select distinct language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic'",
            "select distinct language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic'",
            "select distinct language from countrylanguage join country on countrylanguage.countrycode = country.code where country.governmentform = 'Republic'"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports",
            "select count ( * ) from airports"
        ],
        "gold": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "pred": [
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1",
            "select continent from country group by continent order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "pred": [
            "select name from conductor order by year_of_work desc limit 1",
            "select name from conductor order by year_of_work desc limit 1",
            "select name from conductor order by year_of_work desc limit 1",
            "select name from conductor order by year_of_work desc limit 1",
            "select name from conductor order by year_of_work desc limit 1",
            "select name from conductor order by year_of_work desc limit 1",
            "select name from conductor order by year_of_work desc limit 1"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "pred": [
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'",
            "select pixel_aspect_ratio_par , country from tv_channel where language != 'English'"
        ],
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "pred": [
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014",
            "select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014"
        ],
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    18,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        2014.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( distinct addresses.address_id ) from addresses join students on addresses.address_id = students.current_address_id",
            "select count ( distinct addresses.address_id ) from addresses join students on addresses.address_id = students.current_address_id",
            "select count ( distinct addresses.address_id ) from addresses join students on addresses.address_id = students.current_address_id",
            "select count ( distinct addresses.address_id ) from addresses join students on addresses.address_id = students.current_address_id",
            "select count ( distinct addresses.address_id ) from addresses join students on addresses.address_id = students.current_address_id",
            "select count ( distinct addresses.address_id ) from addresses join students on addresses.address_id = students.current_address_id",
            "select count ( distinct addresses.address_id ) from addresses join students on addresses.address_id = students.current_address_id"
        ],
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different addresses do the students currently live?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                33,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1",
            "select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count ( * ) asc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "pred": [
            "select count ( * ) from matches",
            "select count ( * ) from matches",
            "select count ( * ) from matches",
            "select count ( * ) from matches",
            "select count ( * ) from matches",
            "select count ( * ) from matches",
            "select count ( * ) from matches"
        ],
        "gold": "SELECT count(*) FROM matches",
        "question": "Find the total number of matches.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1",
            "select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "pred": [
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'",
            "select name , country from singer where song_name like '%Hey%'"
        ],
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "pred": [
            "select citizenship , max ( net_worth_millions ) from singer group by citizenship",
            "select citizenship , max ( net_worth_millions ) from singer group by citizenship",
            "select citizenship , max ( net_worth_millions ) from singer group by citizenship",
            "select citizenship , max ( net_worth_millions ) from singer group by citizenship",
            "select citizenship , max ( net_worth_millions ) from singer group by citizenship",
            "select citizenship , max ( net_worth_millions ) from singer group by citizenship",
            "select citizenship , max ( net_worth_millions ) from singer group by citizenship"
        ],
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "pred": [
            "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
            "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
            "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
            "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
            "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
            "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
            "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'"
        ],
        "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Kaloyan\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Baldwin I\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"NorthCarolina\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    32,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    true,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    37,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "extra"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "pred": [
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer",
            "select birth_year , citizenship from singer"
        ],
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Dutch\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count ( * ) from documents",
            "select count ( * ) from documents",
            "select count ( * ) from documents",
            "select count ( * ) from documents",
            "select count ( * ) from documents",
            "select count ( * ) from documents",
            "select count ( * ) from documents"
        ],
        "gold": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "pred": [
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970",
            "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970"
        ],
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "\"1970\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "pred": [
            "select name from people where nationality != 'Russia'",
            "select name from people where nationality != 'Russia'",
            "select name from people where nationality != 'Russia'",
            "select name from people where nationality != 'Russia'",
            "select name from people where nationality != 'Russia'",
            "select name from people where nationality != 'Russia'",
            "select name from people where nationality != 'Russia'"
        ],
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"Russia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' intersect select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'French'"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "Give the names of countries with English and French as official languages.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    9,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"French\"",
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ],
                        "\"T\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1",
            "select transcript_date , other_details from transcripts order by transcript_date asc limit 1"
        ],
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "pred": [
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2",
            "select nationality from people group by nationality having count ( * ) >= 2"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.countrycode = country.code where country.name = 'Aruba' group by countrylanguage.language order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Aruba\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "pred": [
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1",
            "select language from countrylanguage group by language order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "pred": [
            "select name from conductor order by age asc",
            "select name from conductor order by age asc",
            "select name from conductor order by age asc",
            "select name from conductor order by age asc",
            "select name from conductor order by age asc",
            "select name from conductor order by age asc",
            "select name from conductor order by age asc"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "pred": [
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955",
            "select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955"
        ],
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    1945.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    5,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        1955.0,
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2"
        ],
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name from matches join rankings on matches.winner_id = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join rankings on matches.winner_id = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join rankings on matches.winner_id = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join rankings on matches.winner_id = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join rankings on matches.winner_id = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join rankings on matches.winner_id = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join rankings on matches.winner_id = matches.winner_id where matches.tourney_name = 'Australian Open' order by rankings.ranking_points desc limit 1"
        ],
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"Australian Open\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id",
            "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id"
        ],
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            6
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    33,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    34,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    41,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "extra"
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count ( * ) = 2"
        ],
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from ( select country from car_makers group by country having count ( * ) > 2 )",
            "select count ( * ) from ( select country from car_makers group by country having count ( * ) > 2 )",
            "select count ( * ) from ( select country from car_makers group by country having count ( * ) > 2 )",
            "select count ( * ) from ( select country from car_makers group by country having count ( * ) > 2 )",
            "select count ( * ) from ( select country from car_makers group by country having count ( * ) > 2 )",
            "select count ( * ) from ( select country from car_makers group by country having count ( * ) > 2 )",
            "select count ( * ) from ( select country from car_makers group by country having count ( * ) > 2 )"
        ],
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "How many countries has more than 2 car makers ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'",
            "select students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'"
        ],
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"haiti\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"09700166582\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count ( * ) desc limit 1",
            "select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "pred": [
            "select title from cartoon where directed_by = 'Ben Jones'",
            "select title from cartoon where directed_by = 'Ben Jones'",
            "select title from cartoon where directed_by = 'Ben Jones'",
            "select title from cartoon where directed_by = 'Ben Jones'",
            "select title from cartoon where directed_by = 'Ben Jones'",
            "select title from cartoon where directed_by = 'Ben Jones'",
            "select title from cartoon where directed_by = 'Ben Jones'"
        ],
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Ben Jones\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'",
            "select country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'"
        ],
        "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "Which countries have either English or Dutch as an official language?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            3
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    8,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    0,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ],
                        "\"Dutch\"",
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ],
                        "\"T\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "pred": [
            "select age , hometown from teacher",
            "select age , hometown from teacher",
            "select age , hometown from teacher",
            "select age , hometown from teacher",
            "select age , hometown from teacher",
            "select age , hometown from teacher",
            "select age , hometown from teacher"
        ],
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5",
            "select version_number , template_type_code from templates where version_number > 5"
        ],
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "pred": [
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'",
            "select major , age from student except select student.major , student.age from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat'"
        ],
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ],
                                [
                                    "table_unit",
                                    1
                                ],
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": [
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        9,
                                        false
                                    ],
                                    null
                                ],
                                "and",
                                [
                                    false,
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            11,
                                            false
                                        ],
                                        null
                                    ],
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ]
                            ]
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            1,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        12,
                                        false
                                    ],
                                    null
                                ],
                                "\"cat\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'",
            "select student.fname from pets join has_pet on pets.petid = has_pet.petid join student on has_pet.stuid = student.stuid where pets.pettype = 'cat' or pets.pettype = 'dog'"
        ],
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "pred": [
            "select count ( * ) , student_id from friend group by student_id",
            "select count ( * ) , student_id from friend group by student_id",
            "select count ( * ) , student_id from friend group by student_id",
            "select count ( * ) , student_id from friend group by student_id",
            "select count ( * ) , student_id from friend group by student_id",
            "select count ( * ) , student_id from friend group by student_id",
            "select count ( * ) , student_id from friend group by student_id"
        ],
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents",
            "select template_id from templates except select template_id from documents"
        ],
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ]
                    ],
                    "conds": []
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    10,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            }
        },
        "hardness": "hard"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( * ) from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_enrolment_id",
            "select count ( * ) from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_enrolment_id",
            "select count ( * ) from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_enrolment_id",
            "select count ( * ) from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_enrolment_id",
            "select count ( * ) from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_enrolment_id",
            "select count ( * ) from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_enrolment_id",
            "select count ( * ) from transcripts join student_enrolment_courses on transcripts.transcript_id = student_enrolment_courses.student_enrolment_id"
        ],
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                55,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    55,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    2,
                                    [
                                        0,
                                        [
                                            0,
                                            20,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ],
                "and",
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "pred": [
            "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'",
            "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'",
            "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'",
            "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'",
            "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'",
            "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'",
            "select battle.name , battle.date from battle join ship on battle.id = ship.lost_in_battle where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'"
        ],
        "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Lettice\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            0
                        ],
                        [
                            "table_unit",
                            1
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    1,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ],
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    3,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        "\"HMS Atalanta\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "pred": [
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )"
        ],
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "What is the average age for all students who do not own any pets ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'",
            "select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math'"
        ],
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"Math\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count ( distinct template_id ) from documents",
            "select count ( distinct template_id ) from documents",
            "select count ( distinct template_id ) from documents",
            "select count ( distinct template_id ) from documents",
            "select count ( distinct template_id ) from documents",
            "select count ( distinct template_id ) from documents",
            "select count ( distinct template_id ) from documents"
        ],
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "pred": [
            "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'",
            "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'",
            "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'",
            "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'",
            "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'",
            "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'",
            "select avg ( gnp ) , sum ( population ) from country where governmentform = 'US Territory'"
        ],
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"US Territory\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )",
            "select model_list.model from model_list join cars_data on model_list.model = cars_data.id where cars_data.weight < ( select avg ( weight ) from cars_data )"
        ],
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            21,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id",
            "select template_id , count ( * ) from documents group by template_id"
        ],
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "pred": [
            "select count ( * ) from cars_data where cylinders > 4",
            "select count ( * ) from cars_data where cylinders > 4",
            "select count ( * ) from cars_data where cylinders > 4",
            "select count ( * ) from cars_data where cylinders > 4",
            "select count ( * ) from cars_data where cylinders > 4",
            "select count ( * ) from cars_data where cylinders > 4",
            "select count ( * ) from cars_data where cylinders > 4"
        ],
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1",
            "select manager_name , district from shop order by number_products desc limit 1"
        ],
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "pred": [
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district",
            "select count ( * ) , district from city where population > ( select avg ( population ) from city ) group by district"
        ],
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    0
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            5,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "pred": [
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )",
            "select avg ( age ) from student where stuid not in ( select stuid from has_pet )"
        ],
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "Find the average age of students who do not have any pet .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'",
            "select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'"
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "pred": [
            "select citizenship , count ( * ) from singer group by citizenship",
            "select citizenship , count ( * ) from singer group by citizenship",
            "select citizenship , count ( * ) from singer group by citizenship",
            "select citizenship , count ( * ) from singer group by citizenship",
            "select citizenship , count ( * ) from singer group by citizenship",
            "select citizenship , count ( * ) from singer group by citizenship",
            "select citizenship , count ( * ) from singer group by citizenship"
        ],
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "pred": [
            "select avg ( num_of_staff ) from museum where open_year < 2009",
            "select avg ( num_of_staff ) from museum where open_year < 2009",
            "select avg ( num_of_staff ) from museum where open_year < 2009",
            "select avg ( num_of_staff ) from museum where open_year < 2009",
            "select avg ( num_of_staff ) from museum where open_year < 2009",
            "select avg ( num_of_staff ) from museum where open_year < 2009",
            "select avg ( num_of_staff ) from museum where open_year < 2009"
        ],
        "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    2009.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "pred": [
            "select ranking_date , count ( * ) from rankings group by ranking_date",
            "select ranking_date , count ( * ) from rankings group by ranking_date",
            "select ranking_date , count ( * ) from rankings group by ranking_date",
            "select ranking_date , count ( * ) from rankings group by ranking_date",
            "select ranking_date , count ( * ) from rankings group by ranking_date",
            "select ranking_date , count ( * ) from rankings group by ranking_date",
            "select ranking_date , count ( * ) from rankings group by ranking_date"
        ],
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    39,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "pred": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Dutch\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )",
            "select count ( * ) from dogs where age < ( select avg ( age ) from dogs )"
        ],
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many dogs have an age below the average?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    5
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    5,
                                    [
                                        0,
                                        [
                                            0,
                                            26,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1",
            "select owners.owner_id , owners.last_name from owners join treatments on owners.owner_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "pred": [
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1",
            "select year from concert group by year order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop",
            "select min ( number_products ) , max ( number_products ) from shop"
        ],
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count ( * ) >= 2"
        ],
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'Bachelor' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master'",
            "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'Bachelor' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master'",
            "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'Bachelor' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master'",
            "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'Bachelor' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master'",
            "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'Bachelor' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master'",
            "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'Bachelor' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master'",
            "select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = student_enrolment.degree_program_id where degree_programs.degree_summary_name = 'Bachelor' intersect select semesters.semester_name from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id join degree_programs on degree_programs.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master'"
        ],
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Master\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            3
                        ],
                        [
                            "table_unit",
                            7
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    18,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                45,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    true,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    46,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        "\"Bachelor\"",
                        null
                    ]
                ],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'"
        ],
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Abilene\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id",
            "select highschooler.name from highschooler join friend on highschooler.id = friend.friend_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.liked_id join friend on highschooler.id = friend.friend_id"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": {
                "from": {
                    "table_units": [
                        [
                            "table_unit",
                            2
                        ],
                        [
                            "table_unit",
                            0
                        ]
                    ],
                    "conds": [
                        [
                            false,
                            2,
                            [
                                0,
                                [
                                    0,
                                    7,
                                    false
                                ],
                                null
                            ],
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                },
                "select": [
                    false,
                    [
                        [
                            0,
                            [
                                0,
                                [
                                    0,
                                    2,
                                    false
                                ],
                                null
                            ]
                        ]
                    ]
                ],
                "where": [],
                "groupBy": [],
                "having": [],
                "orderBy": [],
                "limit": null,
                "intersect": null,
                "union": null,
                "except": null
            },
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "pred": [
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid",
            "select max ( horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.makeid"
        ],
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "pred": [
            "select title , directed_by from cartoon order by original_air_date asc",
            "select title , directed_by from cartoon order by original_air_date asc",
            "select title , directed_by from cartoon order by original_air_date asc",
            "select title , directed_by from cartoon order by original_air_date asc",
            "select title , directed_by from cartoon order by original_air_date asc",
            "select title , directed_by from cartoon order by original_air_date asc",
            "select title , directed_by from cartoon order by original_air_date asc"
        ],
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )",
            "select orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )"
        ],
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            13,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "pred": [
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )"
        ],
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    7
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            45,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "pred": [
            "select museum.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1",
            "select museum.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1",
            "select museum.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1",
            "select museum.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1",
            "select museum.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1",
            "select museum.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1",
            "select museum.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "pred": [
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1",
            "select song_name , song_release_year from singer order by age asc limit 1"
        ],
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "pred": [
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type",
            "select charge_type , sum ( charge_amount ) from charges group by charge_type"
        ],
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count ( distinct degree_program_id ) from degree_programs",
            "select count ( distinct degree_program_id ) from degree_programs",
            "select count ( distinct degree_program_id ) from degree_programs",
            "select count ( distinct degree_program_id ) from degree_programs",
            "select count ( distinct degree_program_id ) from degree_programs",
            "select count ( distinct degree_program_id ) from degree_programs",
            "select count ( distinct degree_program_id ) from degree_programs"
        ],
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                20,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "pred": [
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'",
            "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene'"
        ],
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Abilene\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "pred": [
            "select count ( * ) from tv_channel where language = 'English'",
            "select count ( * ) from tv_channel where language = 'English'",
            "select count ( * ) from tv_channel where language = 'English'",
            "select count ( * ) from tv_channel where language = 'English'",
            "select count ( * ) from tv_channel where language = 'English'",
            "select count ( * ) from tv_channel where language = 'English'",
            "select count ( * ) from tv_channel where language = 'English'"
        ],
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1",
            "select templates.template_id , templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_id order by count ( * ) desc limit 1"
        ],
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "pred": [
            "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )",
            "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )",
            "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )",
            "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )",
            "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )",
            "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )",
            "select count ( * ) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' )"
        ],
        "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    1
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            7,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [
                            [
                                false,
                                2,
                                [
                                    0,
                                    [
                                        0,
                                        10,
                                        false
                                    ],
                                    null
                                ],
                                "\"225\"",
                                null
                            ]
                        ],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "extra"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "pred": [
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'",
            "select flightno from flights where sourceairport = 'APG'"
        ],
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "pred": [
            "select max ( capacity ) , avg ( average ) from stadium",
            "select max ( capacity ) , avg ( average ) from stadium",
            "select max ( capacity ) , avg ( average ) from stadium",
            "select max ( capacity ) , avg ( average ) from stadium",
            "select max ( capacity ) , avg ( average ) from stadium",
            "select max ( capacity ) , avg ( average ) from stadium",
            "select max ( capacity ) , avg ( average ) from stadium"
        ],
        "gold": "select max(capacity), average from stadium",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "pred": [
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10",
            "select count ( * ) from highschooler where grade = 9 or grade = 10"
        ],
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    9.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "medium"
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1",
            "select templates.template_id from documents join templates on documents.template_id = templates.template_id group by templates.template_id having count ( * ) > 1"
        ],
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "easy"
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "pred": [
            "select name from museum where museum_id not in ( select museum_id from visit )",
            "select name from museum where museum_id not in ( select museum_id from visit )",
            "select name from museum where museum_id not in ( select museum_id from visit )",
            "select name from museum where museum_id not in ( select museum_id from visit )",
            "select name from museum where museum_id not in ( select museum_id from visit )",
            "select name from museum where museum_id not in ( select museum_id from visit )",
            "select name from museum where museum_id not in ( select museum_id from visit )"
        ],
        "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no visitor yet?",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    8,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    {
                        "from": {
                            "table_units": [
                                [
                                    "table_unit",
                                    2
                                ]
                            ],
                            "conds": []
                        },
                        "select": [
                            false,
                            [
                                [
                                    0,
                                    [
                                        0,
                                        [
                                            0,
                                            9,
                                            false
                                        ],
                                        null
                                    ]
                                ]
                            ]
                        ],
                        "where": [],
                        "groupBy": [],
                        "having": [],
                        "orderBy": [],
                        "limit": null,
                        "intersect": null,
                        "union": null,
                        "except": null
                    },
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "hardness": "hard"
    }
]