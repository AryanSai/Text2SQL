[
    {
        "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
        ],
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "hardness": "extra"
    },
    {
        "input": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "pred": [
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
        ],
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "pred": [
            "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10",
            "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10",
            "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10",
            "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10",
            "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10",
            "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10",
            "select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by death.id having  sum(death.killed) > 10"
        ],
        "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "hardness": "hard"
    },
    {
        "input": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\"",
            "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\"",
            "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\"",
            "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\"",
            "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\"",
            "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\"",
            "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"APG\"   intersect select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"CVO\""
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "hardness": "extra"
    },
    {
        "input": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "pred": [
            "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10",
            "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10",
            "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10",
            "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10",
            "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10",
            "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10",
            "select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10"
        ],
        "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "hardness": "easy"
    },
    {
        "input": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights where  flights.destairport = \"ATO\"",
            "select count(*) from flights where  flights.destairport = \"ATO\"",
            "select count(*) from flights where  flights.destairport = \"ATO\"",
            "select count(*) from flights where  flights.destairport = \"ATO\"",
            "select count(*) from flights where  flights.destairport = \"ATO\"",
            "select count(*) from flights where  flights.destairport = \"ATO\"",
            "select count(*) from flights where  flights.destairport = \"ATO\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "hardness": "easy"
    },
    {
        "input": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "pred": [
            "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )",
            "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )",
            "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )",
            "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )",
            "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )",
            "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )",
            "select count(*) from visitor where  visitor.id not in (select visit.visitor_ID from visit join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2010  )"
        ],
        "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "hardness": "extra"
    },
    {
        "input": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals"
        ],
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "hardness": "hard"
    },
    {
        "input": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "pred": [
            "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype",
            "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype",
            "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype",
            "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype",
            "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype",
            "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype",
            "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from Pets  group by pets.pettype"
        ],
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each type of pet.",
        "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "hardness": "medium"
    },
    {
        "input": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "pred": [
            "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
            "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
            "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
            "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
            "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
            "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
            "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
        ],
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "hardness": "medium"
    },
    {
        "input": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
        ],
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
            "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
            "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
            "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
            "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
            "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
            "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
        ],
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.title from Cartoon   order by cartoon.title asc",
            "select cartoon.title from Cartoon   order by cartoon.title asc",
            "select cartoon.title from Cartoon   order by cartoon.title asc",
            "select cartoon.title from Cartoon   order by cartoon.title asc",
            "select cartoon.title from Cartoon   order by cartoon.title asc",
            "select cartoon.title from Cartoon   order by cartoon.title asc",
            "select cartoon.title from Cartoon   order by cartoon.title asc"
        ],
        "gold": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "sql": "SELECT Title FROM Cartoon ORDER BY title",
        "hardness": "easy"
    },
    {
        "input": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend"
        ],
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "hardness": "hard"
    },
    {
        "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
        ],
        "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "hardness": "extra"
    },
    {
        "input": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals",
            "select owners.state from Owners   intersect select professionals.state from Professionals"
        ],
        "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "hardness": "hard"
    },
    {
        "input": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "pred": [
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year > 1980"
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct car models are the produced after 1980?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "hardness": "hard"
    },
    {
        "input": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
        ],
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "hardness": "medium"
    },
    {
        "input": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "pred": [
            "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
        ],
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "hardness": "extra"
    },
    {
        "input": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.city from employee  group by employee.city having  count(*) > 30",
            "select employee.city from employee  group by employee.city having  count(*) > 30",
            "select employee.city from employee  group by employee.city having  count(*) > 30",
            "select employee.city from employee  group by employee.city having  count(*) > 30",
            "select employee.city from employee  group by employee.city having  count(*) > 30",
            "select employee.city from employee  group by employee.city having  count(*) > 30",
            "select employee.city from employee  group by employee.city having  count(*) > 30"
        ],
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "hardness": "medium"
    },
    {
        "input": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
            "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
            "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
            "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
            "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
            "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
            "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
        ],
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest version number and its template type code?",
        "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "hardness": "medium"
    },
    {
        "input": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city"
        ],
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "hardness": "medium"
    },
    {
        "input": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\""
        ],
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the usa?",
        "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "hardness": "hard"
    },
    {
        "input": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\""
        ],
        "gold": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "hardness": "easy"
    },
    {
        "input": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
        ],
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which shops run with no employees? Find the shop names",
        "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "hardness": "hard"
    },
    {
        "input": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "pred": [
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1"
        ],
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count(*) from Templates where  templates.template_type_code = \"CV\"",
            "select count(*) from Templates where  templates.template_type_code = \"CV\"",
            "select count(*) from Templates where  templates.template_type_code = \"CV\"",
            "select count(*) from Templates where  templates.template_type_code = \"CV\"",
            "select count(*) from Templates where  templates.template_type_code = \"CV\"",
            "select count(*) from Templates where  templates.template_type_code = \"CV\"",
            "select count(*) from Templates where  templates.template_type_code = \"CV\""
        ],
        "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "hardness": "easy"
    },
    {
        "input": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
        ],
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "hardness": "medium"
    },
    {
        "input": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "pred": [
            "select country.continent from country where  country.name = \"Anguilla\"",
            "select country.continent from country where  country.name = \"Anguilla\"",
            "select country.continent from country where  country.name = \"Anguilla\"",
            "select country.continent from country where  country.name = \"Anguilla\"",
            "select country.continent from country where  country.name = \"Anguilla\"",
            "select country.continent from country where  country.name = \"Anguilla\"",
            "select country.continent from country where  country.name = \"Anguilla\""
        ],
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "hardness": "easy"
    },
    {
        "input": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "pred": [
            "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\"",
            "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\"",
            "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\"",
            "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\"",
            "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\"",
            "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\"",
            "select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = \"volvo\""
        ],
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "hardness": "medium"
    },
    {
        "input": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select departments.department_description from Departments where  departments.department_name like \"%computer%\"",
            "select departments.department_description from Departments where  departments.department_name like \"%computer%\"",
            "select departments.department_description from Departments where  departments.department_name like \"%computer%\"",
            "select departments.department_description from Departments where  departments.department_name like \"%computer%\"",
            "select departments.department_description from Departments where  departments.department_name like \"%computer%\"",
            "select departments.department_description from Departments where  departments.department_name like \"%computer%\"",
            "select departments.department_description from Departments where  departments.department_name like \"%computer%\""
        ],
        "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "hardness": "medium"
    },
    {
        "input": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "pred": [
            "select players.country_code from players  group by players.country_code having  count(*) > 50",
            "select players.country_code from players  group by players.country_code having  count(*) > 50",
            "select players.country_code from players  group by players.country_code having  count(*) > 50",
            "select players.country_code from players  group by players.country_code having  count(*) > 50",
            "select players.country_code from players  group by players.country_code having  count(*) > 50",
            "select players.country_code from players  group by players.country_code having  count(*) > 50",
            "select players.country_code from players  group by players.country_code having  count(*) > 50"
        ],
        "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "hardness": "easy"
    },
    {
        "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0",
            "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0",
            "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0",
            "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0",
            "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0",
            "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0",
            "select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1   intersect select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 0"
        ],
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "hardness": "medium"
    },
    {
        "input": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses"
        ],
        "gold": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "sql": "SELECT count(*) FROM Courses",
        "hardness": "easy"
    },
    {
        "input": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "pred": [
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
        ],
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "hardness": "extra"
    },
    {
        "input": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
        ],
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "hardness": "hard"
    },
    {
        "input": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
        ],
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "hardness": "medium"
    },
    {
        "input": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
        ],
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any concerts?",
        "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "hardness": "hard"
    },
    {
        "input": "What is the number of continents?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from continents",
            "select count(*) from continents",
            "select count(*) from continents",
            "select count(*) from continents",
            "select count(*) from continents",
            "select count(*) from continents",
            "select count(*) from continents"
        ],
        "gold": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "sql": "SELECT count(*) FROM CONTINENTS;",
        "hardness": "easy"
    },
    {
        "input": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "pred": [
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
        ],
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "hardness": "extra"
    },
    {
        "input": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "pred": [
            "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , countries.countryid , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
        ],
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "hardness": "medium"
    },
    {
        "input": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "pred": [
            "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Asia\" or country.continent = \"Europe\""
        ],
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "hardness": "medium"
    },
    {
        "input": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "pred": [
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
            "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
            "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
            "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
            "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
            "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
            "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
        ],
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "pred": [
            "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )",
            "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )",
            "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )",
            "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )",
            "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )",
            "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )",
            "select count(*) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )"
        ],
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in countries that do not speak English?",
        "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "hardness": "extra"
    },
    {
        "input": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "pred": [
            "select players.hand , count(*) from players  group by players.hand",
            "select players.hand , count(*) from players  group by players.hand",
            "select players.hand , count(*) from players  group by players.hand",
            "select players.hand , count(*) from players  group by players.hand",
            "select players.hand , count(*) from players  group by players.hand",
            "select players.hand , count(*) from players  group by players.hand",
            "select players.hand , count(*) from players  group by players.hand"
        ],
        "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "hardness": "medium"
    },
    {
        "input": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "pred": [
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
        ],
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "hardness": "hard"
    },
    {
        "input": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
        ],
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "hardness": "hard"
    },
    {
        "input": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "pred": [
            "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )",
            "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )",
            "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )",
            "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )",
            "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )",
            "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )",
            "select battle.name , battle.result , battle.bulgarian_commander from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.location = \"English Channel\"  )"
        ],
        "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "hardness": "extra"
    },
    {
        "input": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "pred": [
            "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
        ],
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "hardness": "extra"
    },
    {
        "input": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "pred": [
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1",
            "select people.nationality from people  group by people.nationality  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs"
        ],
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "hardness": "medium"
    },
    {
        "input": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "pred": [
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
        ],
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "hardness": "extra"
    },
    {
        "input": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryname having  count(*) >= 3"
        ],
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "hardness": "extra"
    },
    {
        "input": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "pred": [
            "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
            "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
            "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
            "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
            "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
            "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
            "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
        ],
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "hardness": "medium"
    },
    {
        "input": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
        ],
        "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "hardness": "medium"
    },
    {
        "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\" and flights.destairport != \"APG\""
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "hardness": "extra"
    },
    {
        "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "pred": [
            "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011",
            "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011",
            "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011",
            "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011",
            "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011",
            "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011",
            "select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011"
        ],
        "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "hardness": "hard"
    },
    {
        "input": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "pred": [
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3"
        ],
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "hardness": "medium"
    },
    {
        "input": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "pred": [
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
        ],
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own cats as pets?",
        "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "hardness": "hard"
    },
    {
        "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "pred": [
            "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent",
            "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent",
            "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent",
            "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent",
            "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent",
            "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent",
            "select countries.continent , countries.countryid , count(*) from countries  group by countries.continent"
        ],
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "hardness": "medium"
    },
    {
        "input": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select count( distinct shop.location) from shop",
            "select count( distinct shop.location) from shop",
            "select count( distinct shop.location) from shop",
            "select count( distinct shop.location) from shop",
            "select count( distinct shop.location) from shop",
            "select count( distinct shop.location) from shop",
            "select count( distinct shop.location) from shop"
        ],
        "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store locations.",
        "sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "hardness": "easy"
    },
    {
        "input": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "What are the names of nations where both English and French are official languages?",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "hardness": "extra"
    },
    {
        "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "pred": [
            "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3",
            "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3",
            "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3",
            "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3",
            "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3",
            "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3",
            "select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
        ],
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "hardness": "medium"
    },
    {
        "input": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
        ],
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "hardness": "easy"
    },
    {
        "input": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\"",
            "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\"",
            "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\"",
            "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\"",
            "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\"",
            "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\"",
            "select airlines.airline from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  flights.sourceairport = \"CVO\" and airports.airportcode != \"APG\""
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "hardness": "extra"
    },
    {
        "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "pred": [
            "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
        ],
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "hardness": "extra"
    },
    {
        "input": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "pred": [
            "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
            "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
            "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
            "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
            "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
            "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
            "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )"
        ],
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "hardness": "hard"
    },
    {
        "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
        ],
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "hardness": "extra"
    },
    {
        "input": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "hardness": "hard"
    },
    {
        "input": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by",
            "select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
        ],
        "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "hardness": "medium"
    },
    {
        "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "hardness": "extra"
    },
    {
        "input": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "pred": [
            "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
            "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
            "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
            "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
            "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
            "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
            "select count( distinct matches.winner_hand) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
        ],
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "hardness": "medium"
    },
    {
        "input": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
        ],
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "hardness": "medium"
    },
    {
        "input": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\""
        ],
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "hardness": "easy"
    },
    {
        "input": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014",
            "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014",
            "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014",
            "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014",
            "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014",
            "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014",
            "select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014"
        ],
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "hardness": "hard"
    },
    {
        "input": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
        ],
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "hardness": "medium"
    },
    {
        "input": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "pred": [
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "pred": [
            "select sum(country.surfacearea) from country where  country.continent = \"Carribean\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Carribean\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Carribean\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Carribean\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Carribean\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Carribean\"",
            "select sum(country.surfacearea) from country where  country.continent = \"Carribean\""
        ],
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "hardness": "easy"
    },
    {
        "input": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "pred": [
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
        ],
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "hardness": "medium"
    },
    {
        "input": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
        ],
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "hardness": "extra"
    },
    {
        "input": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc"
        ],
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "hardness": "easy"
    },
    {
        "input": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "pred": [
            "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1",
            "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1",
            "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1",
            "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1",
            "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1",
            "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1",
            "select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
        ],
        "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "pred": [
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
        ],
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "hardness": "extra"
    },
    {
        "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "hardness": "hard"
    },
    {
        "input": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "pred": [
            "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid",
            "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid",
            "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid",
            "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid",
            "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid",
            "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid",
            "select count(*) , has_pet.stuid from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID  group by has_pet.stuid"
        ],
        "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "hardness": "medium"
    },
    {
        "input": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "pred": [
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "pred": [
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000",
            "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000"
        ],
        "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "hardness": "medium"
    },
    {
        "input": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
        ],
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "hardness": "medium"
    },
    {
        "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "pred": [
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
        ],
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "hardness": "hard"
    },
    {
        "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "pred": [
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "hardness": "extra"
    },
    {
        "input": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
            "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
        ],
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "hardness": "medium"
    },
    {
        "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by treatments.dog_id  order by sum(treatments.cost_of_treatment) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "hardness": "hard"
    },
    {
        "input": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id , documents.document_name , documents.document_description from Documents",
            "select documents.document_id , documents.document_name , documents.document_description from Documents",
            "select documents.document_id , documents.document_name , documents.document_description from Documents",
            "select documents.document_id , documents.document_name , documents.document_description from Documents",
            "select documents.document_id , documents.document_name , documents.document_description from Documents",
            "select documents.document_id , documents.document_name , documents.document_description from Documents",
            "select documents.document_id , documents.document_name , documents.document_description from Documents"
        ],
        "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "hardness": "medium"
    },
    {
        "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\"",
            "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\"",
            "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\"",
            "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\"",
            "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\"",
            "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\"",
            "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.semester_id = \"Bachelors\""
        ],
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country   order by country.population asc limit 3",
            "select country.name from country   order by country.population asc limit 3",
            "select country.name from country   order by country.population asc limit 3",
            "select country.name from country   order by country.population asc limit 3",
            "select country.name from country   order by country.population asc limit 3",
            "select country.name from country   order by country.population asc limit 3",
            "select country.name from country   order by country.population asc limit 3"
        ],
        "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "hardness": "medium"
    },
    {
        "input": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
        ],
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "hardness": "extra"
    },
    {
        "input": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "pred": [
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
        ],
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "Give the names of nations that speak both English and French.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "hardness": "extra"
    },
    {
        "input": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "pred": [
            "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1",
            "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1",
            "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1",
            "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1",
            "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1",
            "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1",
            "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.injured  order by sum(death.injured) desc limit 1"
        ],
        "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the ship id and name that caused most total injuries?",
        "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
        ],
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name , highschooler.grade from Highschooler",
            "select highschooler.name , highschooler.grade from Highschooler",
            "select highschooler.name , highschooler.grade from Highschooler",
            "select highschooler.name , highschooler.grade from Highschooler",
            "select highschooler.name , highschooler.grade from Highschooler",
            "select highschooler.name , highschooler.grade from Highschooler",
            "select highschooler.name , highschooler.grade from Highschooler"
        ],
        "gold": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "sql": "SELECT name ,  grade FROM Highschooler",
        "hardness": "medium"
    },
    {
        "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
        ],
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "hardness": "extra"
    },
    {
        "input": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most employees? Give me the shop name.",
        "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "pred": [
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
        ],
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "hardness": "extra"
    },
    {
        "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1"
        ],
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "hardness": "extra"
    },
    {
        "input": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "pred": [
            "select airports.city , airports.country from airports where  airports.airportname = \"Alton\"",
            "select airports.city , airports.country from airports where  airports.airportname = \"Alton\"",
            "select airports.city , airports.country from airports where  airports.airportname = \"Alton\"",
            "select airports.city , airports.country from airports where  airports.airportname = \"Alton\"",
            "select airports.city , airports.country from airports where  airports.airportname = \"Alton\"",
            "select airports.city , airports.country from airports where  airports.airportname = \"Alton\"",
            "select airports.city , airports.country from airports where  airports.airportname = \"Alton\""
        ],
        "gold": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "hardness": "medium"
    },
    {
        "input": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "pred": [
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
        ],
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "hardness": "extra"
    },
    {
        "input": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "hardness": "hard"
    },
    {
        "input": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "pred": [
            "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
            "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
            "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
            "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
            "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
            "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
            "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
        ],
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the total sales of their songs.",
        "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "hardness": "medium"
    },
    {
        "input": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "pred": [
            "select avg(poker_player.earnings) from poker_player",
            "select avg(poker_player.earnings) from poker_player",
            "select avg(poker_player.earnings) from poker_player",
            "select avg(poker_player.earnings) from poker_player",
            "select avg(poker_player.earnings) from poker_player",
            "select avg(poker_player.earnings) from poker_player",
            "select avg(poker_player.earnings) from poker_player"
        ],
        "gold": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "sql": "SELECT avg(Earnings) FROM poker_player",
        "hardness": "easy"
    },
    {
        "input": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
        ],
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the countries where there is not a single car maker?",
        "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "hardness": "hard"
    },
    {
        "input": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "pred": [
            "select distinct dogs.breed_code , dogs.size_code from Dogs",
            "select distinct dogs.breed_code , dogs.size_code from Dogs",
            "select distinct dogs.breed_code , dogs.size_code from Dogs",
            "select distinct dogs.breed_code , dogs.size_code from Dogs",
            "select distinct dogs.breed_code , dogs.size_code from Dogs",
            "select distinct dogs.breed_code , dogs.size_code from Dogs",
            "select distinct dogs.breed_code , dogs.size_code from Dogs"
        ],
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "hardness": "medium"
    },
    {
        "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1",
            "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "How many singers are from each country?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.country , count(*) from singer  group by singer.country",
            "select singer.country , count(*) from singer  group by singer.country",
            "select singer.country , count(*) from singer  group by singer.country",
            "select singer.country , count(*) from singer  group by singer.country",
            "select singer.country , count(*) from singer  group by singer.country",
            "select singer.country , count(*) from singer  group by singer.country",
            "select singer.country , count(*) from singer  group by singer.country"
        ],
        "gold": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "hardness": "medium"
    },
    {
        "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "pred": [
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_makers  group by car_makers.id having  count(*) >= 3"
        ],
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "hardness": "extra"
    },
    {
        "input": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )",
            "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )",
            "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )",
            "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )",
            "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )",
            "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )",
            "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )"
        ],
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "question": "Find the first name of students who have both cat and dog pets .",
        "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "hardness": "extra"
    },
    {
        "input": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "pred": [
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
        ],
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id"
        ],
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "hardness": "medium"
    },
    {
        "input": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1",
            "select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
        ],
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "pred": [
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
        ],
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "hardness": "easy"
    },
    {
        "input": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "pred": [
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
        ],
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "hardness": "hard"
    },
    {
        "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
        ],
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "hardness": "hard"
    },
    {
        "input": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportname from airports where  airports.airportcode = \"AKO\"",
            "select airports.airportname from airports where  airports.airportcode = \"AKO\"",
            "select airports.airportname from airports where  airports.airportcode = \"AKO\"",
            "select airports.airportname from airports where  airports.airportcode = \"AKO\"",
            "select airports.airportname from airports where  airports.airportcode = \"AKO\"",
            "select airports.airportname from airports where  airports.airportcode = \"AKO\"",
            "select airports.airportname from airports where  airports.airportcode = \"AKO\""
        ],
        "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "hardness": "easy"
    },
    {
        "input": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.professional_id = \"PROF\" or owners.first_name != \"dog\""
        ],
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "hardness": "hard"
    },
    {
        "input": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
        ],
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "pred": [
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
        ],
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "hardness": "hard"
    },
    {
        "input": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
            "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
            "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
            "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
            "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
            "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
            "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
        ],
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "hardness": "medium"
    },
    {
        "input": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "pred": [
            "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1",
            "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1",
            "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1",
            "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1",
            "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1",
            "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1",
            "select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "pred": [
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
        ],
        "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "hardness": "hard"
    },
    {
        "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
        ],
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "hardness": "hard"
    },
    {
        "input": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "hardness": "easy"
    },
    {
        "input": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "pred": [
            "select people.name , people.birth_date from people   order by people.name asc",
            "select people.name , people.birth_date from people   order by people.name asc",
            "select people.name , people.birth_date from people   order by people.name asc",
            "select people.name , people.birth_date from people   order by people.name asc",
            "select people.name , people.birth_date from people   order by people.name asc",
            "select people.name , people.birth_date from people   order by people.name asc",
            "select people.name , people.birth_date from people   order by people.name asc"
        ],
        "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "hardness": "medium"
    },
    {
        "input": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\""
        ],
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "hardness": "hard"
    },
    {
        "input": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "pred": [
            "select singer.name from singer   order by singer.net_worth_millions asc",
            "select singer.name from singer   order by singer.net_worth_millions asc",
            "select singer.name from singer   order by singer.net_worth_millions asc",
            "select singer.name from singer   order by singer.net_worth_millions asc",
            "select singer.name from singer   order by singer.net_worth_millions asc",
            "select singer.name from singer   order by singer.net_worth_millions asc",
            "select singer.name from singer   order by singer.net_worth_millions asc"
        ],
        "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "hardness": "easy"
    },
    {
        "input": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "hardness": "extra"
    },
    {
        "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "pred": [
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
        ],
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "hardness": "hard"
    },
    {
        "input": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "What are the names of nations speak both English and French?",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "hardness": "extra"
    },
    {
        "input": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "pred": [
            "select avg(stadium.capacity) , max(stadium.capacity) from stadium",
            "select avg(stadium.capacity) , max(stadium.capacity) from stadium",
            "select avg(stadium.capacity) , max(stadium.capacity) from stadium",
            "select avg(stadium.capacity) , max(stadium.capacity) from stadium",
            "select avg(stadium.capacity) , max(stadium.capacity) from stadium",
            "select avg(stadium.capacity) , max(stadium.capacity) from stadium",
            "select avg(stadium.capacity) , max(stadium.capacity) from stadium"
        ],
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "sql": "select avg(capacity) ,  max(capacity) from stadium",
        "hardness": "medium"
    },
    {
        "input": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "pred": [
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
        ],
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "How many likes does Kyle have?",
        "db_id": "network_1",
        "pred": [
            "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = \"Kyle\""
        ],
        "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many likes does Kyle have?",
        "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "hardness": "medium"
    },
    {
        "input": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
            "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
            "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
            "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
            "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
            "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
            "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
        ],
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "hardness": "medium"
    },
    {
        "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1",
            "select matches.winner_name , rankings.ranking_points from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id  group by matches.winner_name  order by count(*) desc limit 1"
        ],
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID   order by teacher.name asc"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "hardness": "hard"
    },
    {
        "input": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
        ],
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "hardness": "medium"
    },
    {
        "input": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "pred": [
            "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1",
            "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1",
            "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1",
            "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1",
            "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1",
            "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1",
            "select properties.property_name from Properties where  properties.property_type_code = \"House\"   union select properties.property_name from Properties where  properties.property_type_code = \"Apartment\" and properties.room_count > 1"
        ],
        "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "hardness": "hard"
    },
    {
        "input": "What airline serves the most flights?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
        ],
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "hardness": "hard"
    },
    {
        "input": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select courses.course_description from Courses where  courses.course_name = \"math\"",
            "select courses.course_description from Courses where  courses.course_name = \"math\"",
            "select courses.course_description from Courses where  courses.course_name = \"math\"",
            "select courses.course_description from Courses where  courses.course_name = \"math\"",
            "select courses.course_description from Courses where  courses.course_name = \"math\"",
            "select courses.course_description from Courses where  courses.course_name = \"math\"",
            "select courses.course_description from Courses where  courses.course_name = \"math\""
        ],
        "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the descriptions for all the math courses?",
        "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "hardness": "easy"
    },
    {
        "input": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "pred": [
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
        ],
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "hardness": "hard"
    },
    {
        "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"",
            "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"",
            "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"",
            "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"",
            "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"",
            "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"",
            "select dogs.name , owners.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\""
        ],
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "hardness": "medium"
    },
    {
        "input": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select sections.section_description from Sections where  sections.section_name = \"h\"",
            "select sections.section_description from Sections where  sections.section_name = \"h\"",
            "select sections.section_description from Sections where  sections.section_name = \"h\"",
            "select sections.section_description from Sections where  sections.section_name = \"h\"",
            "select sections.section_description from Sections where  sections.section_name = \"h\"",
            "select sections.section_description from Sections where  sections.section_name = \"h\"",
            "select sections.section_description from Sections where  sections.section_name = \"h\""
        ],
        "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "hardness": "easy"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "pred": [
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
        ],
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "hardness": "medium"
    },
    {
        "input": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
            "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1"
        ],
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000",
            "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000"
        ],
        "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "hardness": "hard"
    },
    {
        "input": "What is the total number of singers?",
        "db_id": "concert_singer",
        "pred": [
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer"
        ],
        "gold": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "sql": "SELECT count(*) FROM singer",
        "hardness": "easy"
    },
    {
        "input": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "pred": [
            "select max(matches.loser_rank) from matches",
            "select max(matches.loser_rank) from matches",
            "select max(matches.loser_rank) from matches",
            "select max(matches.loser_rank) from matches",
            "select max(matches.loser_rank) from matches",
            "select max(matches.loser_rank) from matches",
            "select max(matches.loser_rank) from matches"
        ],
        "gold": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all matches.",
        "sql": "SELECT min(loser_rank) FROM matches",
        "hardness": "easy"
    },
    {
        "input": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "hardness": "extra"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
            "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "hardness": "extra"
    },
    {
        "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
        ],
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "hardness": "hard"
    },
    {
        "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1",
            "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
        ],
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\""
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "hardness": "hard"
    },
    {
        "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "pred": [
            "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\"",
            "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\"",
            "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\"",
            "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\"",
            "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\"",
            "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\"",
            "select max(performance.share) , min(performance.share) from performance where  performance.type != \"Live final\""
        ],
        "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "hardness": "medium"
    },
    {
        "input": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "pred": [
            "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000",
            "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000",
            "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000",
            "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000",
            "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000",
            "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000",
            "select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000"
        ],
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "hardness": "easy"
    },
    {
        "input": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
        ],
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the codes of template types that are not used for any document?",
        "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "hardness": "hard"
    },
    {
        "input": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1",
            "select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "hardness": "hard"
    },
    {
        "input": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
        ],
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "hardness": "extra"
    },
    {
        "input": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the course with most number of enrollments?",
        "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
            "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
            "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
            "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
            "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
            "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
            "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\""
        ],
        "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "hardness": "medium"
    },
    {
        "input": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "pred": [
            "select people.nationality , count(*) from people  group by people.nationality",
            "select people.nationality , count(*) from people  group by people.nationality",
            "select people.nationality , count(*) from people  group by people.nationality",
            "select people.nationality , count(*) from people  group by people.nationality",
            "select people.nationality , count(*) from people  group by people.nationality",
            "select people.nationality , count(*) from people  group by people.nationality",
            "select people.nationality , count(*) from people  group by people.nationality"
        ],
        "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "hardness": "medium"
    },
    {
        "input": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "pred": [
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
        ],
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "hardness": "hard"
    },
    {
        "input": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses",
            "select count(*) from Courses"
        ],
        "gold": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "sql": "SELECT count(*) FROM Courses",
        "hardness": "easy"
    },
    {
        "input": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
        ],
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "hardness": "medium"
    },
    {
        "input": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "pred": [
            "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )",
            "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )",
            "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )",
            "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )",
            "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )",
            "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )",
            "select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )"
        ],
        "gold": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many contestants did not get voted?",
        "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "hardness": "extra"
    },
    {
        "input": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
        ],
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the template ids with template type description \"Presentation\".",
        "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "hardness": "medium"
    },
    {
        "input": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "pred": [
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
        ],
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "hardness": "easy"
    },
    {
        "input": "How many airlines do we have?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines"
        ],
        "gold": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "sql": "SELECT count(*) FROM AIRLINES",
        "hardness": "easy"
    },
    {
        "input": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "pred": [
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\"",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\" and pets.pettype = \"dog\""
        ],
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many dog pets are raised by female students?",
        "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "hardness": "hard"
    },
    {
        "input": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "pred": [
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"",
            "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"",
            "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"",
            "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"",
            "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"",
            "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"",
            "select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\""
        ],
        "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "hardness": "medium"
    },
    {
        "input": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select distinct templates.template_type_code from Templates",
            "select distinct templates.template_type_code from Templates",
            "select distinct templates.template_type_code from Templates",
            "select distinct templates.template_type_code from Templates",
            "select distinct templates.template_type_code from Templates",
            "select distinct templates.template_type_code from Templates",
            "select distinct templates.template_type_code from Templates"
        ],
        "gold": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "sql": "SELECT DISTINCT template_type_code FROM Templates",
        "hardness": "easy"
    },
    {
        "input": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
        ],
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "hardness": "easy"
    },
    {
        "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "hardness": "hard"
    },
    {
        "input": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
        ],
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "hardness": "hard"
    },
    {
        "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
        ],
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "hardness": "hard"
    },
    {
        "input": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   except select country.code from country where  country.governmentform = \"Republic\""
        ],
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "hardness": "hard"
    },
    {
        "input": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1"
        ],
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "hardness": "medium"
    },
    {
        "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\"",
            "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\"",
            "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\"",
            "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\"",
            "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\"",
            "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\"",
            "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id where  treatments.cost_of_treatment != 1000 and owners.owner_id = \"null\""
        ],
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "hardness": "hard"
    },
    {
        "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
        ],
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "hardness": "hard"
    },
    {
        "input": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "pred": [
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc",
            "select sections.section_name from Sections   order by sections.section_name desc"
        ],
        "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "hardness": "easy"
    },
    {
        "input": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\"",
            "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\"",
            "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\"",
            "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\"",
            "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\"",
            "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\"",
            "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\""
        ],
        "gold": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "hardness": "medium"
    },
    {
        "input": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
        ],
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "hardness": "medium"
    },
    {
        "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "pred": [
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
        ],
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1",
            "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1",
            "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1",
            "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1",
            "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1",
            "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1",
            "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "hardness": "medium"
    },
    {
        "input": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "pred": [
            "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"",
            "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"",
            "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"",
            "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"",
            "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"",
            "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"",
            "select avg(country.lifeexpectancy) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\""
        ],
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "hardness": "medium"
    },
    {
        "input": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )",
            "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code where  breeds.breed_name = (select min(Breeds.breed_name) from Breeds  )"
        ],
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "hardness": "extra"
    },
    {
        "input": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "pred": [
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.mpg desc limit 1"
        ],
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "question": "What is the car model with the highest mpg ?",
        "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "hardness": "hard"
    },
    {
        "input": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "pred": [
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
        ],
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "hardness": "medium"
    },
    {
        "input": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "hardness": "easy"
    },
    {
        "input": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
            "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
            "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
            "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
            "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
            "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
            "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016"
        ],
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "hardness": "hard"
    },
    {
        "input": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
        ],
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "hardness": "hard"
    },
    {
        "input": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
        ],
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "Show names of all high school students who do not have any friends.",
        "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "hardness": "hard"
    },
    {
        "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc",
            "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc",
            "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc",
            "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc",
            "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc",
            "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc",
            "select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
        ],
        "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "hardness": "medium"
    },
    {
        "input": "Return the number of  airports.",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports"
        ],
        "gold": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "sql": "SELECT count(*) FROM AIRPORTS",
        "hardness": "easy"
    },
    {
        "input": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "pred": [
            "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype",
            "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype",
            "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype",
            "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype",
            "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype",
            "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype",
            "select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
        ],
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "hardness": "medium"
    },
    {
        "input": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"",
            "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"",
            "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"",
            "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"",
            "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"",
            "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"",
            "select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\""
        ],
        "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "hardness": "medium"
    },
    {
        "input": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "pred": [
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer"
        ],
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "sql": "SELECT Birth_Year ,  Citizenship FROM singer",
        "hardness": "medium"
    },
    {
        "input": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.grade from Highschooler",
            "select highschooler.grade from Highschooler",
            "select highschooler.grade from Highschooler",
            "select highschooler.grade from Highschooler",
            "select highschooler.grade from Highschooler",
            "select highschooler.grade from Highschooler",
            "select highschooler.grade from Highschooler"
        ],
        "gold": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "sql": "SELECT grade FROM Highschooler",
        "hardness": "easy"
    },
    {
        "input": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "pred": [
            "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
            "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
            "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
            "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
            "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
            "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
            "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
        ],
        "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
        ],
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "hardness": "hard"
    },
    {
        "input": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"",
            "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"",
            "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"",
            "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"",
            "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"",
            "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"",
            "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "hardness": "medium"
    },
    {
        "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "pred": [
            "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\""
        ],
        "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "hardness": "medium"
    },
    {
        "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
        ],
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "hardness": "hard"
    },
    {
        "input": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3",
            "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3",
            "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3",
            "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3",
            "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3",
            "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3",
            "select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3"
        ],
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "hardness": "easy"
    },
    {
        "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\"",
            "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country having  count(*) > 3  union select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.maker = \"fiat\""
        ],
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "hardness": "extra"
    },
    {
        "input": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "pred": [
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
            "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\"",
            "select documents.document_id from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = \"Ireland\""
        ],
        "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "hardness": "hard"
    },
    {
        "input": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "pred": [
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.horsepower asc limit 1"
        ],
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "pred": [
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
        ],
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "hardness": "hard"
    },
    {
        "input": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
        ],
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "hardness": "easy"
    },
    {
        "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "pred": [
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "hardness": "extra"
    },
    {
        "input": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"",
            "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\""
        ],
        "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "hardness": "easy"
    },
    {
        "input": "What model has the most different versions?",
        "db_id": "car_1",
        "pred": [
            "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
            "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
            "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
            "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
            "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
            "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
            "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1"
        ],
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1",
            "select departments.department_name , departments.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
        ],
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "hardness": "extra"
    },
    {
        "input": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "pred": [
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show"
        ],
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "sql": "SELECT avg(Attendance) FROM SHOW",
        "hardness": "easy"
    },
    {
        "input": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "pred": [
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
        ],
        "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "hardness": "hard"
    },
    {
        "input": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
        ],
        "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the country codes of countries where people use languages other than English?",
        "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "hardness": "easy"
    },
    {
        "input": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
        ],
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "hardness": "easy"
    },
    {
        "input": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "pred": [
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
        ],
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "pred": [
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
            "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
        ],
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "hardness": "extra"
    },
    {
        "input": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
            "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
            "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
            "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
            "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
            "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
            "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
        ],
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "hardness": "hard"
    },
    {
        "input": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc",
            "select conductor.name from conductor   order by conductor.year_of_work desc"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "hardness": "easy"
    },
    {
        "input": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
            "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "hardness": "extra"
    },
    {
        "input": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
        ],
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
            "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
        ],
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the countries with no car makers?",
        "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "hardness": "hard"
    },
    {
        "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "pred": [
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
            "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
        ],
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "hardness": "hard"
    },
    {
        "input": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "pred": [
            "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\"",
            "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\"",
            "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\"",
            "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\"",
            "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\"",
            "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\"",
            "select country.region from city join country on city.CountryCode = country.Code where  city.name = \"Kabul\""
        ],
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "hardness": "medium"
    },
    {
        "input": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "pred": [
            "select count(*) , likes.student_id from Likes  group by likes.student_id",
            "select count(*) , likes.student_id from Likes  group by likes.student_id",
            "select count(*) , likes.student_id from Likes  group by likes.student_id",
            "select count(*) , likes.student_id from Likes  group by likes.student_id",
            "select count(*) , likes.student_id from Likes  group by likes.student_id",
            "select count(*) , likes.student_id from Likes  group by likes.student_id",
            "select count(*) , likes.student_id from Likes  group by likes.student_id"
        ],
        "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "hardness": "medium"
    },
    {
        "input": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "pred": [
            "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
            "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
            "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
            "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
            "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
            "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
            "select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
        ],
        "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the total sales for their songs?",
        "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "hardness": "medium"
    },
    {
        "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "pred": [
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
        ],
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "hardness": "extra"
    },
    {
        "input": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\"",
            "select addresses.zip_postcode from Addresses where  addresses.city = \"Port Chelsea\""
        ],
        "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "hardness": "easy"
    },
    {
        "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
        ],
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "hardness": "medium"
    },
    {
        "input": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
            "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
        ],
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "hardness": "hard"
    },
    {
        "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "pred": [
            "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3",
            "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3",
            "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3",
            "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3",
            "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3",
            "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3",
            "select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
        ],
        "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "hardness": "medium"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1",
            "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1",
            "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1",
            "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1",
            "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1",
            "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1",
            "select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
        ],
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "pred": [
            "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
            "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
            "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
            "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
            "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
            "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
            "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
        ],
        "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "hardness": "easy"
    },
    {
        "input": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
        ],
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of dogs of an age below the average.",
        "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "hardness": "hard"
    },
    {
        "input": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "pred": [
            "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
        ],
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "hardness": "medium"
    },
    {
        "input": "How many singers are there?",
        "db_id": "singer",
        "pred": [
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer",
            "select count(*) from singer"
        ],
        "gold": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "sql": "SELECT count(*) FROM singer",
        "hardness": "easy"
    },
    {
        "input": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "pred": [
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1",
            "select players.country_code from players  group by players.country_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "hardness": "hard"
    },
    {
        "input": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "pred": [
            "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID",
            "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID",
            "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID",
            "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID",
            "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID",
            "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID",
            "select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
        ],
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "hardness": "medium"
    },
    {
        "input": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.hometown , count(*) from teacher  group by teacher.hometown",
            "select teacher.hometown , count(*) from teacher  group by teacher.hometown",
            "select teacher.hometown , count(*) from teacher  group by teacher.hometown",
            "select teacher.hometown , count(*) from teacher  group by teacher.hometown",
            "select teacher.hometown , count(*) from teacher  group by teacher.hometown",
            "select teacher.hometown , count(*) from teacher  group by teacher.hometown",
            "select teacher.hometown , count(*) from teacher  group by teacher.hometown"
        ],
        "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "hardness": "medium"
    },
    {
        "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
        ],
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "hardness": "medium"
    },
    {
        "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1",
            "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by concert.stadium_id  order by count(*) desc limit 1"
        ],
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "hardness": "extra"
    },
    {
        "input": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "pred": [
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1",
            "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1"
        ],
        "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "hardness": "hard"
    },
    {
        "input": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "hardness": "medium"
    },
    {
        "input": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "pred": [
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1",
            "select cars_data.cylinders from cars_data   order by cars_data.accelerate asc limit 1"
        ],
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "pred": [
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1",
            "select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\""
        ],
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "hardness": "easy"
    },
    {
        "input": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.id from Highschooler where  highschooler.name = \"Kyle\""
        ],
        "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "hardness": "easy"
    },
    {
        "input": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "hardness": "medium"
    },
    {
        "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
        ],
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "hardness": "extra"
    },
    {
        "input": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "pred": [
            "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1",
            "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1",
            "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1",
            "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1",
            "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1",
            "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1",
            "select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
        ],
        "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "hardness": "medium"
    },
    {
        "input": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname having  count(*) >= 3"
        ],
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "hardness": "extra"
    },
    {
        "input": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "pred": [
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1",
            "select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by dogs.breed_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "pred": [
            "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\"",
            "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\"",
            "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\"",
            "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\"",
            "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\"",
            "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\"",
            "select count(*) from Cartoon where  cartoon.written_by = \"Joseph Kuhr\""
        ],
        "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "hardness": "easy"
    },
    {
        "input": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "pred": [
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
        ],
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "hardness": "medium"
    },
    {
        "input": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from cars_data where  cars_data.cylinders > 6",
            "select count(*) from cars_data where  cars_data.cylinders > 6",
            "select count(*) from cars_data where  cars_data.cylinders > 6",
            "select count(*) from cars_data where  cars_data.cylinders > 6",
            "select count(*) from cars_data where  cars_data.cylinders > 6",
            "select count(*) from cars_data where  cars_data.cylinders > 6",
            "select count(*) from cars_data where  cars_data.cylinders > 6"
        ],
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "hardness": "easy"
    },
    {
        "input": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "pred": [
            "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
            "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
            "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
            "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
            "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
            "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
            "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1"
        ],
        "gold": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "sql": "SELECT max(charge_amount) FROM Charges",
        "hardness": "easy"
    },
    {
        "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "pred": [
            "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8",
            "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8",
            "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8",
            "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8",
            "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8",
            "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8",
            "select max(cars_data.mpg) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8"
        ],
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "hardness": "medium"
    },
    {
        "input": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common hometown of teachers.",
        "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs"
        ],
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "sql": "SELECT date_arrived ,  date_departed FROM Dogs",
        "hardness": "medium"
    },
    {
        "input": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
        ],
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "hardness": "extra"
    },
    {
        "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "pred": [
            "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\"",
            "select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\"   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"Australian Open\""
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "hardness": "extra"
    },
    {
        "input": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1",
            "select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "pred": [
            "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )",
            "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )",
            "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )",
            "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )",
            "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )",
            "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )",
            "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders != 3   order by car_names.makeid asc limit 1 )"
        ],
        "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )",
            "select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )"
        ],
        "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the employees who never received any evaluation?",
        "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "hardness": "hard"
    },
    {
        "input": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language  order by count(*) desc limit 1"
        ],
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "hardness": "medium"
    },
    {
        "input": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs"
        ],
        "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "hardness": "medium"
    },
    {
        "input": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "pred": [
            "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\"",
            "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\"",
            "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\"",
            "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\"",
            "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\"",
            "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\"",
            "select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = \"AirCon\""
        ],
        "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the feature type name of feature AirCon?",
        "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "hardness": "medium"
    },
    {
        "input": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "pred": [
            "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\"",
            "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\"",
            "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\"",
            "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\"",
            "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\"",
            "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\"",
            "select count(*) from matches join players on matches.winner_id = players.player_id where  players.hand = \"left\" and matches.tourney_name = \"WTA Championships\""
        ],
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "hardness": "medium"
    },
    {
        "input": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\"",
            "select templates.template_type_code from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Book\""
        ],
        "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "hardness": "easy"
    },
    {
        "input": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "pred": [
            "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
            "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
        ],
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "hardness": "extra"
    },
    {
        "input": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count(*) from Transcripts",
            "select count(*) from Transcripts",
            "select count(*) from Transcripts",
            "select count(*) from Transcripts",
            "select count(*) from Transcripts",
            "select count(*) from Transcripts",
            "select count(*) from Transcripts"
        ],
        "gold": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are released?",
        "sql": "SELECT count(*) FROM Transcripts",
        "hardness": "easy"
    },
    {
        "input": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "pred": [
            "select sum(country.surfacearea) from country where  country.region = \"Caracas\"",
            "select sum(country.surfacearea) from country where  country.region = \"Caracas\"",
            "select sum(country.surfacearea) from country where  country.region = \"Caracas\"",
            "select sum(country.surfacearea) from country where  country.region = \"Caracas\"",
            "select sum(country.surfacearea) from country where  country.region = \"Caracas\"",
            "select sum(country.surfacearea) from country where  country.region = \"Caracas\"",
            "select sum(country.surfacearea) from country where  country.region = \"Caracas\""
        ],
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "hardness": "easy"
    },
    {
        "input": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "pred": [
            "select avg(matches.winner_rank) from matches",
            "select avg(matches.winner_rank) from matches",
            "select avg(matches.winner_rank) from matches",
            "select avg(matches.winner_rank) from matches",
            "select avg(matches.winner_rank) from matches",
            "select avg(matches.winner_rank) from matches",
            "select avg(matches.winner_rank) from matches"
        ],
        "gold": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all matches?",
        "sql": "SELECT avg(winner_rank) FROM matches",
        "hardness": "easy"
    },
    {
        "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id",
            "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id",
            "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id",
            "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id",
            "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id",
            "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id",
            "select max(transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id"
        ],
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "pred": [
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
            "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
        ],
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "hardness": "hard"
    },
    {
        "input": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
        ],
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "hardness": "hard"
    },
    {
        "input": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city",
            "select employee.city , count(*) from employee  group by employee.city"
        ],
        "gold": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "hardness": "medium"
    },
    {
        "input": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1",
            "select country.name from country where  country.continent = \"Asia\"   order by country.lifeexpectancy asc limit 1"
        ],
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\"",
            "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\"",
            "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\"",
            "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\"",
            "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\"",
            "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\"",
            "select documents.document_name , documents.template_id from Documents where  documents.document_description like \"%w%\""
        ],
        "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "hardness": "medium"
    },
    {
        "input": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
        ],
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "hardness": "medium"
    },
    {
        "input": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "pred": [
            "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
            "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
            "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
            "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
            "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
            "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
            "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
        ],
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "hardness": "medium"
    },
    {
        "input": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
            "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
            "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
            "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
            "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
            "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
            "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
        ],
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "hardness": "medium"
    },
    {
        "input": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "pred": [
            "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1",
            "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1",
            "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1",
            "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1",
            "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1",
            "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1",
            "select friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  friend.friend_id = 4 and likes.liked_id = 1"
        ],
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "hardness": "hard"
    },
    {
        "input": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc",
            "select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc"
        ],
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "hardness": "medium"
    },
    {
        "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2",
            "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2",
            "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2",
            "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2",
            "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2",
            "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2",
            "select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
        ],
        "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "hardness": "medium"
    },
    {
        "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "pred": [
            "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc",
            "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc",
            "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc",
            "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc",
            "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc",
            "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc",
            "select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc"
        ],
        "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "hardness": "medium"
    },
    {
        "input": "What is the total number of airlines?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines",
            "select count(*) from airlines"
        ],
        "gold": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "sql": "SELECT count(*) FROM AIRLINES",
        "hardness": "easy"
    },
    {
        "input": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "pred": [
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )",
            "select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )"
        ],
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "hardness": "hard"
    },
    {
        "input": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\"",
            "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\"",
            "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\"",
            "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\"",
            "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\"",
            "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\"",
            "select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = \"Robbin CV\""
        ],
        "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "hardness": "medium"
    },
    {
        "input": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
        ],
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "hardness": "hard"
    },
    {
        "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\""
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "hardness": "extra"
    },
    {
        "input": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from cars_data where  cars_data.horsepower > 150",
            "select count(*) from cars_data where  cars_data.horsepower > 150",
            "select count(*) from cars_data where  cars_data.horsepower > 150",
            "select count(*) from cars_data where  cars_data.horsepower > 150",
            "select count(*) from cars_data where  cars_data.horsepower > 150",
            "select count(*) from cars_data where  cars_data.horsepower > 150",
            "select count(*) from cars_data where  cars_data.horsepower > 150"
        ],
        "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "hardness": "easy"
    },
    {
        "input": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "pred": [
            "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
            "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
        ],
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "hardness": "medium"
    },
    {
        "input": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
        ],
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the country codes for countries that do not speak English?",
        "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "hardness": "hard"
    },
    {
        "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "pred": [
            "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\"",
            "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\"",
            "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\"",
            "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\"",
            "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\"",
            "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\"",
            "select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Kelly Clauss\""
        ],
        "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "hardness": "extra"
    },
    {
        "input": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4",
            "select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "hardness": "easy"
    },
    {
        "input": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.age from Dogs   order by dogs.age desc limit 1",
            "select dogs.age from Dogs   order by dogs.age desc limit 1",
            "select dogs.age from Dogs   order by dogs.age desc limit 1",
            "select dogs.age from Dogs   order by dogs.age desc limit 1",
            "select dogs.age from Dogs   order by dogs.age desc limit 1",
            "select dogs.age from Dogs   order by dogs.age desc limit 1",
            "select dogs.age from Dogs   order by dogs.age desc limit 1"
        ],
        "gold": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "sql": "SELECT max(age) FROM Dogs",
        "hardness": "easy"
    },
    {
        "input": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "pred": [
            "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )",
            "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )",
            "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )",
            "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )",
            "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )",
            "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )",
            "select city.name from city where  city.countrycode in (select country.Code from country join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language != \"English\"  )"
        ],
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which cities are in European countries where English is not the official language?",
        "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "hardness": "extra"
    },
    {
        "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2"
        ],
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "hardness": "extra"
    },
    {
        "input": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "pred": [
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
            "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode",
            "select airports.airportname from airports   except select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode"
        ],
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "hardness": "hard"
    },
    {
        "input": "How many players are there?",
        "db_id": "wta_1",
        "pred": [
            "select count(*) from players",
            "select count(*) from players",
            "select count(*) from players",
            "select count(*) from players",
            "select count(*) from players",
            "select count(*) from players",
            "select count(*) from players"
        ],
        "gold": "SELECT count(*) FROM players",
        "question": "How many players are there?",
        "sql": "SELECT count(*) FROM players",
        "hardness": "easy"
    },
    {
        "input": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\"",
            "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = \"Korea\""
        ],
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "hardness": "medium"
    },
    {
        "input": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )",
            "select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )"
        ],
        "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "hardness": "hard"
    },
    {
        "input": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\""
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "hardness": "medium"
    },
    {
        "input": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1",
            "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by student_enrolment_courses.course_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most students enrolled?",
        "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "pred": [
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
        ],
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "hardness": "extra"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "pred": [
            "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30",
            "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30",
            "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30",
            "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30",
            "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30",
            "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30",
            "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30"
        ],
        "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "hardness": "hard"
    },
    {
        "input": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "How many players are from each country?",
        "db_id": "wta_1",
        "pred": [
            "select players.country_code , count(*) from players  group by players.country_code",
            "select players.country_code , count(*) from players  group by players.country_code",
            "select players.country_code , count(*) from players  group by players.country_code",
            "select players.country_code , count(*) from players  group by players.country_code",
            "select players.country_code , count(*) from players  group by players.country_code",
            "select players.country_code , count(*) from players  group by players.country_code",
            "select players.country_code , count(*) from players  group by players.country_code"
        ],
        "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "hardness": "medium"
    },
    {
        "input": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
        ],
        "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "hardness": "extra"
    },
    {
        "input": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "pred": [
            "select avg(matches.loser_age) , avg(matches.winner_age) from matches",
            "select avg(matches.loser_age) , avg(matches.winner_age) from matches",
            "select avg(matches.loser_age) , avg(matches.winner_age) from matches",
            "select avg(matches.loser_age) , avg(matches.winner_age) from matches",
            "select avg(matches.loser_age) , avg(matches.winner_age) from matches",
            "select avg(matches.loser_age) , avg(matches.winner_age) from matches",
            "select avg(matches.loser_age) , avg(matches.winner_age) from matches"
        ],
        "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all matches.",
        "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "hardness": "medium"
    },
    {
        "input": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"",
            "select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\""
        ],
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "hardness": "medium"
    },
    {
        "input": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "hardness": "medium"
    },
    {
        "input": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980",
            "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980",
            "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980",
            "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980",
            "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980",
            "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980",
            "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980"
        ],
        "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "hardness": "easy"
    },
    {
        "input": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "pred": [
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype",
            "select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
        ],
        "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "hardness": "medium"
    },
    {
        "input": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1",
            "select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by countrylanguage.language having  count(*) = 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "hardness": "hard"
    },
    {
        "input": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "pred": [
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
            "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3"
        ],
        "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "hardness": "extra"
    },
    {
        "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc",
            "select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc"
        ],
        "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "hardness": "easy"
    },
    {
        "input": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "pred": [
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player"
        ],
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "hardness": "medium"
    },
    {
        "input": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop"
        ],
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "hardness": "medium"
    },
    {
        "input": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from airlines where  airlines.country = \"USA\"",
            "select count(*) from airlines where  airlines.country = \"USA\"",
            "select count(*) from airlines where  airlines.country = \"USA\"",
            "select count(*) from airlines where  airlines.country = \"USA\"",
            "select count(*) from airlines where  airlines.country = \"USA\"",
            "select count(*) from airlines where  airlines.country = \"USA\"",
            "select count(*) from airlines where  airlines.country = \"USA\""
        ],
        "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "hardness": "easy"
    },
    {
        "input": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
            "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
            "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
            "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
            "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
            "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
            "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
        ],
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "hardness": "medium"
    },
    {
        "input": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "pred": [
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
        ],
        "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "hardness": "medium"
    },
    {
        "input": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs",
            "select dogs.date_arrived , dogs.date_departed from Dogs"
        ],
        "gold": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "sql": "SELECT date_arrived ,  date_departed FROM Dogs",
        "hardness": "medium"
    },
    {
        "input": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
            "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
            "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
            "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
            "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
            "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
            "select employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1"
        ],
        "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "hardness": "medium"
    },
    {
        "input": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
            "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
            "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
            "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
            "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
            "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
            "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
        ],
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "What are the names of students who have no friends?",
        "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "hardness": "hard"
    },
    {
        "input": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "pred": [
            "select poker_player.earnings from poker_player   order by poker_player.earnings desc",
            "select poker_player.earnings from poker_player   order by poker_player.earnings desc",
            "select poker_player.earnings from poker_player   order by poker_player.earnings desc",
            "select poker_player.earnings from poker_player   order by poker_player.earnings desc",
            "select poker_player.earnings from poker_player   order by poker_player.earnings desc",
            "select poker_player.earnings from poker_player   order by poker_player.earnings desc",
            "select poker_player.earnings from poker_player   order by poker_player.earnings desc"
        ],
        "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "hardness": "easy"
    },
    {
        "input": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from teacher   order by teacher.age asc",
            "select teacher.name from teacher   order by teacher.age asc",
            "select teacher.name from teacher   order by teacher.age asc",
            "select teacher.name from teacher   order by teacher.age asc",
            "select teacher.name from teacher   order by teacher.age asc",
            "select teacher.name from teacher   order by teacher.age asc",
            "select teacher.name from teacher   order by teacher.age asc"
        ],
        "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "hardness": "easy"
    },
    {
        "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
        ],
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "hardness": "hard"
    },
    {
        "input": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "pred": [
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
        ],
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "hardness": "medium"
    },
    {
        "input": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select sections.section_name , sections.section_description from Sections",
            "select sections.section_name , sections.section_description from Sections",
            "select sections.section_name , sections.section_description from Sections",
            "select sections.section_name , sections.section_description from Sections",
            "select sections.section_name , sections.section_description from Sections",
            "select sections.section_name , sections.section_description from Sections",
            "select sections.section_name , sections.section_description from Sections"
        ],
        "gold": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "sql": "SELECT section_name ,  section_description FROM Sections",
        "hardness": "medium"
    },
    {
        "input": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\""
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "hardness": "medium"
    },
    {
        "input": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc",
            "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc",
            "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc",
            "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc",
            "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc",
            "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc",
            "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc"
        ],
        "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "hardness": "medium"
    },
    {
        "input": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1",
            "select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1"
        ],
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3",
            "select country.name from country   order by country.population desc limit 3"
        ],
        "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "hardness": "medium"
    },
    {
        "input": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "pred": [
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
            "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
        ],
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015",
            "select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
        ],
        "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "hardness": "extra"
    },
    {
        "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
        ],
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "hardness": "extra"
    },
    {
        "input": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )",
            "select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )"
        ],
        "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "hardness": "extra"
    },
    {
        "input": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1",
            "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
        ],
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "hardness": "easy"
    },
    {
        "input": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
        ],
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all singer names in concerts in year 2014.",
        "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "hardness": "hard"
    },
    {
        "input": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "pred": [
            "select max(cars_data.accelerate) , cars_data.cylinders from cars_data",
            "select max(cars_data.accelerate) , cars_data.cylinders from cars_data",
            "select max(cars_data.accelerate) , cars_data.cylinders from cars_data",
            "select max(cars_data.accelerate) , cars_data.cylinders from cars_data",
            "select max(cars_data.accelerate) , cars_data.cylinders from cars_data",
            "select max(cars_data.accelerate) , cars_data.cylinders from cars_data",
            "select max(cars_data.accelerate) , cars_data.cylinders from cars_data"
        ],
        "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "hardness": "medium"
    },
    {
        "input": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select count( distinct treatments.professional_id) from Treatments",
            "select count( distinct treatments.professional_id) from Treatments",
            "select count( distinct treatments.professional_id) from Treatments",
            "select count( distinct treatments.professional_id) from Treatments",
            "select count( distinct treatments.professional_id) from Treatments",
            "select count( distinct treatments.professional_id) from Treatments",
            "select count( distinct treatments.professional_id) from Treatments"
        ],
        "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "hardness": "easy"
    },
    {
        "input": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
        ],
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the transcript with the least number of results?",
        "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "pred": [
            "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )",
            "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )",
            "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )",
            "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )",
            "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )",
            "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )",
            "select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )"
        ],
        "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "hardness": "hard"
    },
    {
        "input": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "hardness": "medium"
    },
    {
        "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "pred": [
            "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"",
            "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"",
            "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"",
            "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"",
            "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"",
            "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"",
            "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\""
        ],
        "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "hardness": "medium"
    },
    {
        "input": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "pred": [
            "select count( distinct countrylanguage.language) from countrylanguage",
            "select count( distinct countrylanguage.language) from countrylanguage",
            "select count( distinct countrylanguage.language) from countrylanguage",
            "select count( distinct countrylanguage.language) from countrylanguage",
            "select count( distinct countrylanguage.language) from countrylanguage",
            "select count( distinct countrylanguage.language) from countrylanguage",
            "select count( distinct countrylanguage.language) from countrylanguage"
        ],
        "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "hardness": "easy"
    },
    {
        "input": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID",
            "select teacher.name , course_arrange.course_id from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "hardness": "medium"
    },
    {
        "input": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
            "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
        ],
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the country codes for countries that do not speak English.",
        "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "hardness": "hard"
    },
    {
        "input": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "hardness": "medium"
    },
    {
        "input": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "pred": [
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
        ],
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "hardness": "hard"
    },
    {
        "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003",
            "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003"
        ],
        "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "hardness": "hard"
    },
    {
        "input": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "pred": [
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "hardness": "easy"
    },
    {
        "input": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "pred": [
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980"
        ],
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the cards produced after 1980?",
        "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "hardness": "hard"
    },
    {
        "input": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "pred": [
            "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\"",
            "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\"",
            "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\"",
            "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\"",
            "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\"",
            "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\"",
            "select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != \"Jessie Alloway\""
        ],
        "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "hardness": "easy"
    },
    {
        "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "pred": [
            "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8",
            "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8",
            "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8",
            "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8",
            "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8",
            "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8",
            "select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8"
        ],
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "hardness": "medium"
    },
    {
        "input": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "pred": [
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
        ],
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"",
            "select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\""
        ],
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "hardness": "medium"
    },
    {
        "input": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"",
            "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"",
            "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"",
            "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"",
            "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"",
            "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"",
            "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\""
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "hardness": "medium"
    },
    {
        "input": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "pred": [
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
        ],
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "hardness": "extra"
    },
    {
        "input": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )",
            "select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )"
        ],
        "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "hardness": "hard"
    },
    {
        "input": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "pred": [
            "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\"",
            "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\"",
            "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\"",
            "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\"",
            "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\"",
            "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\"",
            "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\""
        ],
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "hardness": "medium"
    },
    {
        "input": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend",
            "select highschooler.id from Highschooler   except select friend.student_id from Friend"
        ],
        "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of high school students who do not have friends?",
        "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "hardness": "hard"
    },
    {
        "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "pred": [
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500",
            "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\" or cars_data.weight > 3500"
        ],
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "hardness": "extra"
    },
    {
        "input": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "pred": [
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc",
            "select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc"
        ],
        "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "hardness": "medium"
    },
    {
        "input": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"",
            "select count(*) from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\""
        ],
        "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "hardness": "medium"
    },
    {
        "input": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "pred": [
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1",
            "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   order by country.lifeexpectancy desc limit 1"
        ],
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "pred": [
            "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"",
            "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"",
            "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"",
            "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"",
            "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"",
            "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"",
            "select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\""
        ],
        "gold": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "hardness": "medium"
    },
    {
        "input": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select degree_programs.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "pred": [
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show",
            "select avg(show.attendance) from show"
        ],
        "gold": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "sql": "SELECT avg(Attendance) FROM SHOW",
        "hardness": "easy"
    },
    {
        "input": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "pred": [
            "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
        ],
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "hardness": "medium"
    },
    {
        "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "pred": [
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1",
            "select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID   order by stadium.capacity desc limit 1"
        ],
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "hardness": "hard"
    },
    {
        "input": "How many matches were played in each year?",
        "db_id": "wta_1",
        "pred": [
            "select matches.year , count(*) from matches  group by matches.year",
            "select matches.year , count(*) from matches  group by matches.year",
            "select matches.year , count(*) from matches  group by matches.year",
            "select matches.year , count(*) from matches  group by matches.year",
            "select matches.year , count(*) from matches  group by matches.year",
            "select matches.year , count(*) from matches  group by matches.year",
            "select matches.year , count(*) from matches  group by matches.year"
        ],
        "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "hardness": "medium"
    },
    {
        "input": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "pred": [
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200",
            "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200"
        ],
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "hardness": "medium"
    },
    {
        "input": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1",
            "select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1"
        ],
        "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code",
            "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code",
            "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code",
            "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code",
            "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code",
            "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code",
            "select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
        ],
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "hardness": "medium"
    },
    {
        "input": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "pred": [
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
            "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
        ],
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "hardness": "hard"
    },
    {
        "input": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
        ],
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "hardness": "hard"
    },
    {
        "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "pred": [
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
        ],
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID",
            "select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID"
        ],
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all template type codes that are not used by any document.",
        "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "hardness": "hard"
    },
    {
        "input": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "pred": [
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1",
            "select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1"
        ],
        "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "pred": [
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\"",
            "select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = \"cat\""
        ],
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "hardness": "hard"
    },
    {
        "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
            "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
            "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
            "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
            "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
            "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
            "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\""
        ],
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "sql": "select name from teacher where hometown != \"little lever urban district\"",
        "hardness": "easy"
    },
    {
        "input": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "pred": [
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )",
            "select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )"
        ],
        "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "hardness": "hard"
    },
    {
        "input": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "pred": [
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1",
            "select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1"
        ],
        "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
            "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
            "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
            "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
            "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
            "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
            "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
        ],
        "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "hardness": "medium"
    },
    {
        "input": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
            "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
        ],
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "hardness": "extra"
    },
    {
        "input": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1",
            "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by orchestra.year_of_founded having  count(*) > 1"
        ],
        "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "hardness": "medium"
    },
    {
        "input": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more likes?",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "hardness": "medium"
    },
    {
        "input": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs"
        ],
        "gold": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the dogs.",
        "sql": "SELECT avg(age) FROM Dogs",
        "hardness": "easy"
    },
    {
        "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\""
        ],
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "hardness": "medium"
    },
    {
        "input": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
            "select flights.flightno from flights where  flights.sourceairport = \"APG\""
        ],
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "hardness": "easy"
    },
    {
        "input": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
        ],
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "hardness": "hard"
    },
    {
        "input": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1",
            "select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "pred": [
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\"",
            "select tv_series.air_date from TV_series where  tv_series.episode = \"A Love of a Lifetime\""
        ],
        "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "hardness": "easy"
    },
    {
        "input": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "pred": [
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
            "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
        ],
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "hardness": "hard"
    },
    {
        "input": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33",
            "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33"
        ],
        "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "hardness": "medium"
    },
    {
        "input": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "pred": [
            "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
            "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
        ],
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "hardness": "hard"
    },
    {
        "input": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )"
        ],
        "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any concert.",
        "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "hardness": "hard"
    },
    {
        "input": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1",
            "select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "pred": [
            "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
            "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
            "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
            "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
            "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
            "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
            "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
        ],
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "hardness": "extra"
    },
    {
        "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1",
            "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1",
            "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1",
            "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1",
            "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1",
            "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1",
            "select owners.owner_id , owners.zip_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(dogs.owner_id) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1",
            "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1",
            "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1",
            "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1",
            "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1",
            "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1",
            "select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
            "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
            "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
            "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
            "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
            "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
            "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
        ],
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "hardness": "medium"
    },
    {
        "input": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by countrylanguage.language  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )",
            "select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )"
        ],
        "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "hardness": "hard"
    },
    {
        "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
        ],
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "hardness": "hard"
    },
    {
        "input": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
            "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "pred": [
            "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\"",
            "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\"",
            "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\"",
            "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\"",
            "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\"",
            "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\"",
            "select count(*) from VOTES where  votes.state = \"NY\" or votes.state = \"CA\""
        ],
        "gold": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "hardness": "medium"
    },
    {
        "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "pred": [
            "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
            "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
        ],
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "hardness": "medium"
    },
    {
        "input": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
            "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
            "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
            "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
            "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
            "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
            "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\""
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "hardness": "medium"
    },
    {
        "input": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
        ],
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "hardness": "medium"
    },
    {
        "input": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "pred": [
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1",
            "select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1"
        ],
        "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "pred": [
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs",
            "select avg(dogs.age) from Dogs"
        ],
        "gold": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the dogs?",
        "sql": "SELECT avg(age) FROM Dogs",
        "hardness": "easy"
    },
    {
        "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "pred": [
            "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )",
            "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )",
            "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )",
            "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )",
            "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )",
            "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )",
            "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )"
        ],
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "hardness": "hard"
    },
    {
        "input": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "pred": [
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player",
            "select poker_player.final_table_made , poker_player.best_finish from poker_player"
        ],
        "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "hardness": "medium"
    },
    {
        "input": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )",
            "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )",
            "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )",
            "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )",
            "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )",
            "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )",
            "select students.first_name from Students where  students.permanent_address_id not in (select students.permanent_address_id from Students  )"
        ],
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "hardness": "easy"
    },
    {
        "input": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
            "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1"
        ],
        "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\"",
            "select conductor.name from conductor where  conductor.nationality != \"USA\""
        ],
        "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "hardness": "easy"
    },
    {
        "input": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
        ],
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "hardness": "medium"
    },
    {
        "input": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1",
            "select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1"
        ],
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "How many continents speak Chinese?",
        "db_id": "world_1",
        "pred": [
            "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
            "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
            "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
            "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
            "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
            "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
            "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
        ],
        "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "hardness": "medium"
    },
    {
        "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "pred": [
            "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
            "select car_makers.fullname , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
        ],
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "hardness": "medium"
    },
    {
        "input": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Dogs",
            "select count(*) from Dogs",
            "select count(*) from Dogs",
            "select count(*) from Dogs",
            "select count(*) from Dogs",
            "select count(*) from Dogs",
            "select count(*) from Dogs"
        ],
        "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "hardness": "easy"
    },
    {
        "input": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
        ],
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "hardness": "extra"
    },
    {
        "input": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "pred": [
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1",
            "select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
        ],
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "pred": [
            "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
            "select airports.city from airports  group by airports.city  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
        ],
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportname from airports where  airports.city = \"Aberdeen\"",
            "select airports.airportname from airports where  airports.city = \"Aberdeen\"",
            "select airports.airportname from airports where  airports.city = \"Aberdeen\"",
            "select airports.airportname from airports where  airports.city = \"Aberdeen\"",
            "select airports.airportname from airports where  airports.city = \"Aberdeen\"",
            "select airports.airportname from airports where  airports.city = \"Aberdeen\"",
            "select airports.airportname from airports where  airports.city = \"Aberdeen\""
        ],
        "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "hardness": "easy"
    },
    {
        "input": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\"",
            "select tv_channel.content from TV_Channel where  tv_channel.series_name = \"Sky Radio\""
        ],
        "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "hardness": "easy"
    },
    {
        "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"",
            "select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\""
        ],
        "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "hardness": "hard"
    },
    {
        "input": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )",
            "select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )"
        ],
        "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "hardness": "hard"
    },
    {
        "input": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count( distinct degree_programs.department_id) from Degree_Programs",
            "select count( distinct degree_programs.department_id) from Degree_Programs",
            "select count( distinct degree_programs.department_id) from Degree_Programs",
            "select count( distinct degree_programs.department_id) from Degree_Programs",
            "select count( distinct degree_programs.department_id) from Degree_Programs",
            "select count( distinct degree_programs.department_id) from Degree_Programs",
            "select count( distinct degree_programs.department_id) from Degree_Programs"
        ],
        "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "hardness": "easy"
    },
    {
        "input": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "pred": [
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"",
            "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\""
        ],
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "hardness": "extra"
    },
    {
        "input": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "pred": [
            "select count( distinct pets.pettype) from Pets",
            "select count( distinct pets.pettype) from Pets",
            "select count( distinct pets.pettype) from Pets",
            "select count( distinct pets.pettype) from Pets",
            "select count( distinct pets.pettype) from Pets",
            "select count( distinct pets.pettype) from Pets",
            "select count( distinct pets.pettype) from Pets"
        ],
        "gold": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "sql": "SELECT count(DISTINCT pettype) FROM pets",
        "hardness": "easy"
    },
    {
        "input": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
        ],
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "pred": [
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
            "select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
        ],
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a cat pet.",
        "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "hardness": "hard"
    },
    {
        "input": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1"
        ],
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "pred": [
            "select death.note from death where  death.note like \"%East%\"",
            "select death.note from death where  death.note like \"%East%\"",
            "select death.note from death where  death.note like \"%East%\"",
            "select death.note from death where  death.note like \"%East%\"",
            "select death.note from death where  death.note like \"%East%\"",
            "select death.note from death where  death.note like \"%East%\"",
            "select death.note from death where  death.note like \"%East%\""
        ],
        "gold": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "hardness": "medium"
    },
    {
        "input": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\"",
            "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\"",
            "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\"",
            "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\"",
            "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\"",
            "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\"",
            "select count(*) from Degree_Programs where  degree_programs.department_id = \"Engineering\""
        ],
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "hardness": "medium"
    },
    {
        "input": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "pred": [
            "select count(*) from concert where  concert.year = 2014 or concert.year = 2015",
            "select count(*) from concert where  concert.year = 2014 or concert.year = 2015",
            "select count(*) from concert where  concert.year = 2014 or concert.year = 2015",
            "select count(*) from concert where  concert.year = 2014 or concert.year = 2015",
            "select count(*) from concert where  concert.year = 2014 or concert.year = 2015",
            "select count(*) from concert where  concert.year = 2014 or concert.year = 2015",
            "select count(*) from concert where  concert.year = 2014 or concert.year = 2015"
        ],
        "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts occurred in 2014 or 2015?",
        "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "hardness": "medium"
    },
    {
        "input": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "pred": [
            "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
        ],
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "hardness": "medium"
    },
    {
        "input": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )",
            "select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )"
        ],
        "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "hardness": "extra"
    },
    {
        "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2",
            "select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = \"Indiana\"   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
        ],
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "hardness": "extra"
    },
    {
        "input": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "hardness": "medium"
    },
    {
        "input": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id , templates.version_number , templates.template_type_code from Templates",
            "select templates.template_id , templates.version_number , templates.template_type_code from Templates",
            "select templates.template_id , templates.version_number , templates.template_type_code from Templates",
            "select templates.template_id , templates.version_number , templates.template_type_code from Templates",
            "select templates.template_id , templates.version_number , templates.template_type_code from Templates",
            "select templates.template_id , templates.version_number , templates.template_type_code from Templates",
            "select templates.template_id , templates.version_number , templates.template_type_code from Templates"
        ],
        "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "hardness": "medium"
    },
    {
        "input": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id",
            "select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
        ],
        "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "hardness": "medium"
    },
    {
        "input": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "pred": [
            "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year",
            "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year",
            "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year",
            "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year",
            "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year",
            "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year",
            "select avg(cars_data.weight) , avg(cars_data.year) , cars_data.year from cars_data  group by cars_data.year"
        ],
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "hardness": "medium"
    },
    {
        "input": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014",
            "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014"
        ],
        "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "hardness": "hard"
    },
    {
        "input": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
            "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
        ],
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "hardness": "hard"
    },
    {
        "input": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
        ],
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "hardness": "hard"
    },
    {
        "input": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\""
        ],
        "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "hardness": "extra"
    },
    {
        "input": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "pred": [
            "select count( distinct country.governmentform) from country where  country.continent = \"Africa\"",
            "select count( distinct country.governmentform) from country where  country.continent = \"Africa\"",
            "select count( distinct country.governmentform) from country where  country.continent = \"Africa\"",
            "select count( distinct country.governmentform) from country where  country.continent = \"Africa\"",
            "select count( distinct country.governmentform) from country where  country.continent = \"Africa\"",
            "select count( distinct country.governmentform) from country where  country.continent = \"Africa\"",
            "select count( distinct country.governmentform) from country where  country.continent = \"Africa\""
        ],
        "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different forms of governments are there in Africa?",
        "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "hardness": "easy"
    },
    {
        "input": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID",
            "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
        ],
        "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "hardness": "medium"
    },
    {
        "input": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code",
            "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code",
            "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code",
            "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code",
            "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code",
            "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code",
            "select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code"
        ],
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "hardness": "medium"
    },
    {
        "input": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "pred": [
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
            "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
        ],
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "hardness": "extra"
    },
    {
        "input": "What are the makers and models?",
        "db_id": "car_1",
        "pred": [
            "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
            "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
            "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
            "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
            "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
            "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
            "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
        ],
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "hardness": "medium"
    },
    {
        "input": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2",
            "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2",
            "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2",
            "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2",
            "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2",
            "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2",
            "select addresses.address_id from Addresses where  addresses.line_1 = 1 and addresses.line_2 = 2"
        ],
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "sql": "SELECT line_1 ,  line_2 FROM addresses",
        "hardness": "medium"
    },
    {
        "input": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
            "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
        ],
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "hardness": "extra"
    },
    {
        "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\"",
            "select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Michael Chang\""
        ],
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "hardness": "extra"
    },
    {
        "input": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
            "select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "pred": [
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2",
            "select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
        ],
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "hardness": "medium"
    },
    {
        "input": "Which year had the most matches?",
        "db_id": "wta_1",
        "pred": [
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1",
            "select matches.year from matches  group by matches.year  order by count(*) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
        ],
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents"
        ],
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "hardness": "hard"
    },
    {
        "input": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "pred": [
            "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
            "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
            "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
            "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
            "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
            "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
            "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
        ],
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "hardness": "medium"
    },
    {
        "input": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "pred": [
            "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\"",
            "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\""
        ],
        "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "hardness": "easy"
    },
    {
        "input": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "pred": [
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1",
            "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.tours  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "pred": [
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent",
            "select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
        ],
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "hardness": "hard"
    },
    {
        "input": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "pred": [
            "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\"",
            "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\"",
            "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\"",
            "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\"",
            "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\"",
            "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\"",
            "select museum.open_year , museum.num_of_staff from museum where  museum.name = \"Palais Museum\""
        ],
        "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "hardness": "medium"
    },
    {
        "input": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2",
            "select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2"
        ],
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "hardness": "easy"
    },
    {
        "input": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "pred": [
            "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
            "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
            "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
            "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
            "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
            "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
            "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
        ],
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "hardness": "hard"
    },
    {
        "input": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\"",
            "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name = \"professional\" or owners.first_name != \"dog\""
        ],
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "hardness": "hard"
    },
    {
        "input": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company",
            "select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
        ],
        "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "hardness": "medium"
    },
    {
        "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "pred": [
            "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\"",
            "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\"",
            "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\"",
            "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\"",
            "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\"",
            "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\"",
            "select battle.name , battle.result from battle where  battle.bulgarian_commander != \"Boril\""
        ],
        "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "hardness": "medium"
    },
    {
        "input": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
            "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
            "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
            "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
            "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
            "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
            "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
        ],
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "hardness": "easy"
    },
    {
        "input": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "pred": [
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
            "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
        ],
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater area than that of any country in Europe?",
        "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "hardness": "hard"
    },
    {
        "input": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "pred": [
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20",
            "select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20"
        ],
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "hardness": "medium"
    },
    {
        "input": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name , singer.country , singer.age from singer   order by singer.age desc",
            "select singer.name , singer.country , singer.age from singer   order by singer.age desc",
            "select singer.name , singer.country , singer.age from singer   order by singer.age desc",
            "select singer.name , singer.country , singer.age from singer   order by singer.age desc",
            "select singer.name , singer.country , singer.age from singer   order by singer.age desc",
            "select singer.name , singer.country , singer.age from singer   order by singer.age desc",
            "select singer.name , singer.country , singer.age from singer   order by singer.age desc"
        ],
        "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "hardness": "medium"
    },
    {
        "input": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "hardness": "medium"
    },
    {
        "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "pred": [
            "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
            "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1"
        ],
        "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "pred": [
            "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1",
            "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1",
            "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1",
            "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1",
            "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1",
            "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1",
            "select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1"
        ],
        "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "hardness": "medium"
    },
    {
        "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "pred": [
            "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"",
            "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"",
            "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"",
            "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"",
            "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"",
            "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"",
            "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\""
        ],
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "hardness": "hard"
    },
    {
        "input": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1",
            "select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
        ],
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "hardness": "hard"
    },
    {
        "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = \"Ben Jones\""
        ],
        "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "hardness": "hard"
    },
    {
        "input": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "pred": [
            "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
            "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
            "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
            "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
            "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
            "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
            "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
        ],
        "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "hardness": "medium"
    },
    {
        "input": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\""
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "hardness": "hard"
    },
    {
        "input": "How many airports do we have?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports",
            "select count(*) from airports"
        ],
        "gold": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "sql": "SELECT count(*) FROM AIRPORTS",
        "hardness": "easy"
    },
    {
        "input": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "pred": [
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1",
            "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from conductor   order by conductor.year_of_work desc limit 1",
            "select conductor.name from conductor   order by conductor.year_of_work desc limit 1",
            "select conductor.name from conductor   order by conductor.year_of_work desc limit 1",
            "select conductor.name from conductor   order by conductor.year_of_work desc limit 1",
            "select conductor.name from conductor   order by conductor.year_of_work desc limit 1",
            "select conductor.name from conductor   order by conductor.year_of_work desc limit 1",
            "select conductor.name from conductor   order by conductor.year_of_work desc limit 1"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "pred": [
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\"",
            "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != \"English\""
        ],
        "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "hardness": "medium"
    },
    {
        "input": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "pred": [
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )",
            "select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert where  concert.year = 2014  )"
        ],
        "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "hardness": "hard"
    },
    {
        "input": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count( distinct addresses.address_id) from Addresses",
            "select count( distinct addresses.address_id) from Addresses",
            "select count( distinct addresses.address_id) from Addresses",
            "select count( distinct addresses.address_id) from Addresses",
            "select count( distinct addresses.address_id) from Addresses",
            "select count( distinct addresses.address_id) from Addresses",
            "select count( distinct addresses.address_id) from Addresses"
        ],
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different addresses do the students currently live?",
        "sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "hardness": "easy"
    },
    {
        "input": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "pred": [
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
            "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1"
        ],
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Find the total number of matches.",
        "db_id": "wta_1",
        "pred": [
            "select count(*) from matches",
            "select count(*) from matches",
            "select count(*) from matches",
            "select count(*) from matches",
            "select count(*) from matches",
            "select count(*) from matches",
            "select count(*) from matches"
        ],
        "gold": "SELECT count(*) FROM matches",
        "question": "Find the total number of matches.",
        "sql": "SELECT count(*) FROM matches",
        "hardness": "easy"
    },
    {
        "input": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1",
            "select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1"
        ],
        "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "pred": [
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"",
            "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\""
        ],
        "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "hardness": "medium"
    },
    {
        "input": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "pred": [
            "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship",
            "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship",
            "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship",
            "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship",
            "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship",
            "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship",
            "select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
        ],
        "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "hardness": "medium"
    },
    {
        "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "pred": [
            "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
            "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
            "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
            "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
            "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
            "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
            "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\""
        ],
        "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "hardness": "medium"
    },
    {
        "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )",
            "select students.last_name from Students where  students.student_id not in (select Student_Enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"  )"
        ],
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "hardness": "extra"
    },
    {
        "input": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "pred": [
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer",
            "select singer.birth_year , singer.citizenship from singer"
        ],
        "gold": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "sql": "SELECT Birth_Year ,  Citizenship FROM singer",
        "hardness": "medium"
    },
    {
        "input": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "pred": [
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
        ],
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "hardness": "hard"
    },
    {
        "input": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count(*) from Documents",
            "select count(*) from Documents",
            "select count(*) from Documents",
            "select count(*) from Documents",
            "select count(*) from Documents",
            "select count(*) from Documents",
            "select count(*) from Documents"
        ],
        "gold": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "sql": "SELECT count(*) FROM Documents",
        "hardness": "easy"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "pred": [
            "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
            "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
        ],
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "hardness": "extra"
    },
    {
        "input": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "pred": [
            "select people.name from people where  people.nationality != \"Russia\"",
            "select people.name from people where  people.nationality != \"Russia\"",
            "select people.name from people where  people.nationality != \"Russia\"",
            "select people.name from people where  people.nationality != \"Russia\"",
            "select people.name from people where  people.nationality != \"Russia\"",
            "select people.name from people where  people.nationality != \"Russia\"",
            "select people.name from people where  people.nationality != \"Russia\""
        ],
        "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "hardness": "easy"
    },
    {
        "input": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
        ],
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "Give the names of countries with English and French as official languages.",
        "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "hardness": "extra"
    },
    {
        "input": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1",
            "select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
        ],
        "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "pred": [
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2",
            "select people.nationality from people  group by people.nationality having  count(*) >= 2"
        ],
        "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "hardness": "easy"
    },
    {
        "input": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
            "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
        ],
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "pred": [
            "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1",
            "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1"
        ],
        "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "pred": [
            "select conductor.name from conductor   order by conductor.age asc",
            "select conductor.name from conductor   order by conductor.age asc",
            "select conductor.name from conductor   order by conductor.age asc",
            "select conductor.name from conductor   order by conductor.age asc",
            "select conductor.name from conductor   order by conductor.age asc",
            "select conductor.name from conductor   order by conductor.age asc",
            "select conductor.name from conductor   order by conductor.age asc"
        ],
        "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "hardness": "easy"
    },
    {
        "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "pred": [
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955",
            "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955"
        ],
        "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "hardness": "hard"
    },
    {
        "input": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
        ],
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "hardness": "medium"
    },
    {
        "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "pred": [
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1",
            "select matches.winner_name from matches join players on matches.winner_id = players.player_id join rankings on players.player_id = rankings.player_id where  matches.tourney_name = \"Australian Open\"   order by rankings.ranking_points desc limit 1"
        ],
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id",
            "select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
        ],
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "hardness": "extra"
    },
    {
        "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2",
            "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
        ],
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "hardness": "medium"
    },
    {
        "input": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
            "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
            "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
            "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
            "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
            "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
            "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
        ],
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "How many countries has more than 2 car makers ?",
        "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "hardness": "medium"
    },
    {
        "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
            "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
        ],
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "hardness": "hard"
    },
    {
        "input": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1",
            "select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.liked_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\"",
            "select cartoon.title from Cartoon where  cartoon.directed_by = \"Ben Jones\""
        ],
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "hardness": "easy"
    },
    {
        "input": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "pred": [
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
            "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
        ],
        "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "Which countries have either English or Dutch as an official language?",
        "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "hardness": "extra"
    },
    {
        "input": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.age , teacher.hometown from teacher",
            "select teacher.age , teacher.hometown from teacher",
            "select teacher.age , teacher.hometown from teacher",
            "select teacher.age , teacher.hometown from teacher",
            "select teacher.age , teacher.hometown from teacher",
            "select teacher.age , teacher.hometown from teacher",
            "select teacher.age , teacher.hometown from teacher"
        ],
        "gold": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "sql": "SELECT Age ,  Hometown FROM teacher",
        "hardness": "medium"
    },
    {
        "input": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5",
            "select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
        ],
        "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "hardness": "medium"
    },
    {
        "input": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "pred": [
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
            "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )"
        ],
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "hardness": "extra"
    },
    {
        "input": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "pred": [
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
            "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
        ],
        "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "hardness": "extra"
    },
    {
        "input": "How many friends does each student have?",
        "db_id": "network_1",
        "pred": [
            "select count(*) , friend.student_id from Friend  group by friend.student_id",
            "select count(*) , friend.student_id from Friend  group by friend.student_id",
            "select count(*) , friend.student_id from Friend  group by friend.student_id",
            "select count(*) , friend.student_id from Friend  group by friend.student_id",
            "select count(*) , friend.student_id from Friend  group by friend.student_id",
            "select count(*) , friend.student_id from Friend  group by friend.student_id",
            "select count(*) , friend.student_id from Friend  group by friend.student_id"
        ],
        "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "hardness": "medium"
    },
    {
        "input": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents",
            "select templates.template_id from Templates   except select documents.template_id from Documents"
        ],
        "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "hardness": "hard"
    },
    {
        "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1",
            "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1",
            "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1",
            "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1",
            "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1",
            "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1",
            "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcript_contents.transcript_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "pred": [
            "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4",
            "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4",
            "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4",
            "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4",
            "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4",
            "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4",
            "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower < 4"
        ],
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "hardness": "extra"
    },
    {
        "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "pred": [
            "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\"",
            "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\"",
            "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\"",
            "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\"",
            "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\"",
            "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\"",
            "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\""
        ],
        "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "hardness": "extra"
    },
    {
        "input": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "pred": [
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
        ],
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "What is the average age for all students who do not own any pets ?",
        "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "hardness": "extra"
    },
    {
        "input": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\""
        ],
        "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "hardness": "hard"
    },
    {
        "input": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select count( distinct templates.template_id) from Templates",
            "select count( distinct templates.template_id) from Templates",
            "select count( distinct templates.template_id) from Templates",
            "select count( distinct templates.template_id) from Templates",
            "select count( distinct templates.template_id) from Templates",
            "select count( distinct templates.template_id) from Templates",
            "select count( distinct templates.template_id) from Templates"
        ],
        "gold": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "hardness": "easy"
    },
    {
        "input": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "pred": [
            "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\"",
            "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\"",
            "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\"",
            "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\"",
            "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\"",
            "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\"",
            "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\""
        ],
        "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "hardness": "medium"
    },
    {
        "input": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "pred": [
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
            "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
        ],
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "hardness": "extra"
    },
    {
        "input": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id",
            "select documents.template_id , count(*) from Documents  group by documents.template_id"
        ],
        "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "hardness": "medium"
    },
    {
        "input": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "pred": [
            "select count(*) from cars_data where  cars_data.cylinders > 4",
            "select count(*) from cars_data where  cars_data.cylinders > 4",
            "select count(*) from cars_data where  cars_data.cylinders > 4",
            "select count(*) from cars_data where  cars_data.cylinders > 4",
            "select count(*) from cars_data where  cars_data.cylinders > 4",
            "select count(*) from cars_data where  cars_data.cylinders > 4",
            "select count(*) from cars_data where  cars_data.cylinders > 4"
        ],
        "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "hardness": "easy"
    },
    {
        "input": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1",
            "select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
        ],
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "pred": [
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district",
            "select city.district , count(*) from city where  city.population > (select avg(city.population) from city  )  group by city.district"
        ],
        "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "hardness": "extra"
    },
    {
        "input": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "pred": [
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )",
            "select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )"
        ],
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "Find the average age of students who do not have any pet .",
        "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "hardness": "extra"
    },
    {
        "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
        ],
        "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "hardness": "medium"
    },
    {
        "input": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "pred": [
            "select singer.citizenship , count(*) from singer  group by singer.citizenship",
            "select singer.citizenship , count(*) from singer  group by singer.citizenship",
            "select singer.citizenship , count(*) from singer  group by singer.citizenship",
            "select singer.citizenship , count(*) from singer  group by singer.citizenship",
            "select singer.citizenship , count(*) from singer  group by singer.citizenship",
            "select singer.citizenship , count(*) from singer  group by singer.citizenship",
            "select singer.citizenship , count(*) from singer  group by singer.citizenship"
        ],
        "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "hardness": "medium"
    },
    {
        "input": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "pred": [
            "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009",
            "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009",
            "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009",
            "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009",
            "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009",
            "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009",
            "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009"
        ],
        "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "hardness": "easy"
    },
    {
        "input": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "pred": [
            "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date",
            "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date",
            "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date",
            "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date",
            "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date",
            "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date",
            "select rankings.ranking_date , count(*) from rankings  group by rankings.ranking_date"
        ],
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "hardness": "medium"
    },
    {
        "input": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "pred": [
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
            "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
        ],
        "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "hardness": "hard"
    },
    {
        "input": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )",
            "select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )"
        ],
        "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many dogs have an age below the average?",
        "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "hardness": "hard"
    },
    {
        "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "pred": [
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
            "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
        ],
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "pred": [
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1",
            "select concert.year from concert  group by concert.year  order by count(*) desc limit 1"
        ],
        "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "hardness": "hard"
    },
    {
        "input": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "pred": [
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop",
            "select min(shop.number_products) , max(shop.number_products) from shop"
        ],
        "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "hardness": "medium"
    },
    {
        "input": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "pred": [
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
            "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
        ],
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "hardness": "medium"
    },
    {
        "input": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
            "select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Master\"   intersect select semesters.semester_name from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
        ],
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "hardness": "extra"
    },
    {
        "input": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
        ],
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "hardness": "hard"
    },
    {
        "input": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "pred": [
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id",
            "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id"
        ],
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "hardness": "hard"
    },
    {
        "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "pred": [
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
            "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
        ],
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "hardness": "extra"
    },
    {
        "input": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "pred": [
            "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc",
            "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc",
            "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc",
            "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc",
            "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc",
            "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc",
            "select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
        ],
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "hardness": "medium"
    },
    {
        "input": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "pred": [
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )",
            "select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )"
        ],
        "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "hardness": "hard"
    },
    {
        "input": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "pred": [
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )",
            "select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )"
        ],
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "hardness": "extra"
    },
    {
        "input": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "pred": [
            "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1",
            "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1",
            "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1",
            "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1",
            "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1",
            "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1",
            "select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "pred": [
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1",
            "select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
        ],
        "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "hardness": "medium"
    },
    {
        "input": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "pred": [
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
            "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
        ],
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "hardness": "medium"
    },
    {
        "input": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "pred": [
            "select count( distinct degree_programs.degree_program_id) from Degree_Programs",
            "select count( distinct degree_programs.degree_program_id) from Degree_Programs",
            "select count( distinct degree_programs.degree_program_id) from Degree_Programs",
            "select count( distinct degree_programs.degree_program_id) from Degree_Programs",
            "select count( distinct degree_programs.degree_program_id) from Degree_Programs",
            "select count( distinct degree_programs.degree_program_id) from Degree_Programs",
            "select count( distinct degree_programs.degree_program_id) from Degree_Programs"
        ],
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "hardness": "easy"
    },
    {
        "input": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "pred": [
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\"",
            "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" or airports.city = \"Abilene\""
        ],
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "hardness": "hard"
    },
    {
        "input": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "pred": [
            "select count(*) from TV_Channel where  tv_channel.language = \"English\"",
            "select count(*) from TV_Channel where  tv_channel.language = \"English\"",
            "select count(*) from TV_Channel where  tv_channel.language = \"English\"",
            "select count(*) from TV_Channel where  tv_channel.language = \"English\"",
            "select count(*) from TV_Channel where  tv_channel.language = \"English\"",
            "select count(*) from TV_Channel where  tv_channel.language = \"English\"",
            "select count(*) from TV_Channel where  tv_channel.language = \"English\""
        ],
        "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "hardness": "easy"
    },
    {
        "input": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1",
            "select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
        ],
        "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "hardness": "extra"
    },
    {
        "input": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "pred": [
            "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )",
            "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )",
            "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )",
            "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )",
            "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )",
            "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )",
            "select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = \"225\"  )"
        ],
        "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "hardness": "extra"
    },
    {
        "input": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "pred": [
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
            "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
        ],
        "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "hardness": "easy"
    },
    {
        "input": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "pred": [
            "select max(stadium.capacity) , avg(stadium.average) from stadium",
            "select max(stadium.capacity) , avg(stadium.average) from stadium",
            "select max(stadium.capacity) , avg(stadium.average) from stadium",
            "select max(stadium.capacity) , avg(stadium.average) from stadium",
            "select max(stadium.capacity) , avg(stadium.average) from stadium",
            "select max(stadium.capacity) , avg(stadium.average) from stadium",
            "select max(stadium.capacity) , avg(stadium.average) from stadium"
        ],
        "gold": "select max(capacity), average from stadium",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "sql": "select max(capacity), average from stadium",
        "hardness": "medium"
    },
    {
        "input": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "pred": [
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10",
            "select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10"
        ],
        "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "hardness": "medium"
    },
    {
        "input": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "pred": [
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1",
            "select documents.template_id from Documents  group by documents.template_id having  count(*) > 1"
        ],
        "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "hardness": "easy"
    },
    {
        "input": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "pred": [
            "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )",
            "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )",
            "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )",
            "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )",
            "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )",
            "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )",
            "select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )"
        ],
        "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no visitor yet?",
        "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "hardness": "hard"
    }
]