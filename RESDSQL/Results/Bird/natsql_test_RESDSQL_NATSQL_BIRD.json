[
  {
    "db_id": "toxicology",
    "input_sequence": "Which molecules have triple bonds and list all the elements they contain. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal RF don't have thrombosis? | examination : examination.diagnosis ( Normal , thrombosis ) , examination.thrombosis , examination.id , examination.symptoms , examination.kct , examination.* | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.glu , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the score and the link type ID for post ID 395? | posts : posts.score , posts.id , posts.posttypeid , posts.body , posts.title , posts.* | postlinks : postlinks.linktypeid , postlinks.postid , postlinks.relatedpostid , postlinks.id , postlinks.creationdate , postlinks.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment ( link , type ) , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.title",
      "posts.*",
      "postlinks.linktypeid",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.id",
      "postlinks.creationdate",
      "postlinks.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which molecules have triple bonds and list all the elements they contain. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many atoms with iodine and with sulfur type elements are there in single bond molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.tg , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height of all neutral superheroes. | superhero : superhero.height_cm , superhero.alignment_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.* | alignment : alignment.alignment ( Neutral ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.alignment_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more in-patient or outpatient who were male? What is the deviation in percentage? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.examination date , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.ra , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.ra",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? | legalities : legalities.format ( legacy ) , legalities.status , legalities.uuid , legalities.id , legalities.* | cards : cards.frameversion , cards.artist ( D. Alexander Gregory ) , cards.name , cards.hascontentwarning , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.id",
      "legalities.*",
      "cards.frameversion",
      "cards.artist",
      "cards.name",
      "cards.hascontentwarning",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the hero name and race of Charles Chandler. | race : race.race , race.id , race.* | superhero : superhero.superhero_name , superhero.full_name ( Charles Chandler ) , superhero.race_id , superhero.skin_colour_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "race.race",
      "race.id",
      "race.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | player : player.player_name ( Marko Arnautovic ) , player.player_api_id , player.player_fifa_api_id , player.birthday , player.id , player.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.id",
      "player.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the name of the closed event whose cost has exceeded the budget the most. | expense : expense.cost , expense.approved , expense.link_to_budget , expense.link_to_member , expense.expense_id , expense.* | event : event.event_name , event.status ( Closed ) , event.event_id , event.notes , event.location , event.* | budget : budget.event_status ( Closed ) , budget.amount , budget.budget_id , budget.link_to_event , budget.category , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.approved",
      "expense.link_to_budget",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.*",
      "event.event_name",
      "event.status",
      "event.event_id",
      "event.notes",
      "event.location",
      "event.*",
      "budget.event_status",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.category",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many gold-eyed superheroes did Marvel Comics publish? | superhero : superhero.eye_colour_id , superhero.hair_colour_id , superhero.publisher_id , superhero.id , superhero.skin_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.skin_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements for bond id TR001_10_11? | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. | expense : expense.cost , expense.expense_date , expense.expense_description ( Pizza ) , expense.expense_id , expense.approved , expense.* | event : event.event_name , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city ( Hundred ) , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_date",
      "expense.expense_description",
      "expense.expense_id",
      "expense.approved",
      "expense.*",
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. | superhero : superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.alignment_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | alignment : alignment.alignment ( Good ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.alignment_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. | superhero : superhero.eye_colour_id , superhero.publisher_id , superhero.skin_colour_id , superhero.hair_colour_id , superhero.superhero_name , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.publisher_id",
      "superhero.skin_colour_id",
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? | cards : cards.name ( Tendo Ice Bridge ) , cards.isonlineonly , cards.facename ( Ice ) , cards.uuid , cards.originalreleasedate , cards.* | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.name , foreign_data.id , foreign_data.text , foreign_data.* | sets : sets.name , sets.isonlineonly , sets.code ( ICE ) , sets.id , sets.block , sets.* | set_translations : set_translations.language ( French ) , set_translations.id , set_translations.setcode ( ICE ) , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.uuid",
      "cards.originalreleasedate",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.name",
      "foreign_data.id",
      "foreign_data.text",
      "foreign_data.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.block",
      "sets.*",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? | patient : patient.sex , patient.diagnosis ( SLE ) , patient.id , patient.birthday , patient.admission , patient.* | laboratory : laboratory.alb , laboratory.pt , laboratory.hgb , laboratory.glu , laboratory.hct , laboratory.* | examination : examination.diagnosis ( SLE ) , examination.lac , examination.kct , examination.symptoms , examination.rvvt , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.*",
      "laboratory.alb",
      "laboratory.pt",
      "laboratory.hgb",
      "laboratory.glu",
      "laboratory.hct",
      "laboratory.*",
      "examination.diagnosis",
      "examination.lac",
      "examination.kct",
      "examination.symptoms",
      "examination.rvvt",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which molecules have triple bonds and list all the elements they contain. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? | laptimes : laptimes.milliseconds , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.* | races : races.year , races.raceid , races.name , races.round , races.time , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.fastestlaptime , results.constructorid , results.milliseconds , results.raceid , results.fastestlap , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.milliseconds",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.milliseconds",
      "results.raceid",
      "results.fastestlap",
      "results.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the highest eligible free rate for K-12 students in the schools in Alameda County? | frpm : frpm.county name ( Alameda ) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.free meal count (k-12) , frpm.school code , frpm.* | schools : schools.county ( Alameda ) , schools.gsoffered ( K-12 ) , schools.cdscode , schools.gsserved ( K-12 ) , schools.latitude , schools.* | satscores : satscores.numge1500 , satscores.enroll12 , satscores.cds , satscores.cname ( Alameda ) , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.*",
      "schools.county",
      "schools.gsoffered",
      "schools.cdscode",
      "schools.gsserved",
      "schools.latitude",
      "schools.*",
      "satscores.numge1500",
      "satscores.enroll12",
      "satscores.cds",
      "satscores.cname",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the atoms of TR144_8_19? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR144_8_19 ) , connected.atom_id , connected.atom_id2 , connected.* | bond : bond.bond_id ( TR144_8_19 ) , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all carcinogenic molecules and their elements. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the atoms of TR144_8_19? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR144_8_19 ) , connected.atom_id , connected.atom_id2 , connected.* | bond : bond.bond_id ( TR144_8_19 ) , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the unique id of the set that has the highest number of cards? | sets : sets.id , sets.basesetsize , sets.code , sets.totalsetsize , sets.isonlineonly , sets.* | cards : cards.id , cards.setcode , cards.uuid , cards.artist , cards.availability , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.basesetsize",
      "sets.code",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.*",
      "cards.id",
      "cards.setcode",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? | budget : budget.category ( Advertisement ) , budget.amount , budget.budget_id , budget.link_to_event , budget.spent , budget.* | event : event.event_name ( October Meeting , Yearly Kickoff ) , event.event_id , event.type ( Budget , Meeting ) , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "budget.category",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.spent",
      "budget.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which customers, paying in CZK, consumed the most gas in 2011? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | transactions_1k : transactions_1k.date , transactions_1k.time , transactions_1k.amount , transactions_1k.price , transactions_1k.customerid , transactions_1k.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "transactions_1k.date",
      "transactions_1k.time",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.customerid",
      "transactions_1k.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? | set_translations : set_translations.language ( Japanese ) , set_translations.translation , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.isnonfoilonly , sets.code , sets.id , sets.isfoilonly , sets.isonlineonly , sets.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.availability , cards.name , cards.artist , cards.uuid , cards.id , cards.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.isnonfoilonly",
      "sets.code",
      "sets.id",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.availability",
      "cards.name",
      "cards.artist",
      "cards.uuid",
      "cards.id",
      "cards.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the description about the ruling of card \"Condemn\"? | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | cards : cards.name ( Condemn ) , cards.uuid , cards.originaltext , cards.originalreleasedate , cards.artist , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "cards.name",
      "cards.uuid",
      "cards.originaltext",
      "cards.originalreleasedate",
      "cards.artist",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? | laboratory : laboratory.gpt , laboratory.date , laboratory.got , laboratory.id , laboratory.pic , laboratory.* | patient : patient.sex , patient.id , patient.birthday , patient.admission , patient.description , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.gpt",
      "laboratory.date",
      "laboratory.got",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.*",
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.description",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which user added a bounty amount of 50 to the post title mentioning variance? | posts : posts.title , posts.owneruserid , posts.id , posts.tags , posts.score , posts.* | votes : votes.bountyamount , votes.userid , votes.postid , votes.id , votes.creationdate , votes.* | posthistory : posthistory.comment ( Title , variance ) , posthistory.userid , posthistory.postid , posthistory.userdisplayname ( User ) , posthistory.id , posthistory.* | badges : badges.name ( variance ) , badges.userid , badges.id , badges.date , badges.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.owneruserid",
      "posts.id",
      "posts.tags",
      "posts.score",
      "posts.*",
      "votes.bountyamount",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.creationdate",
      "votes.*",
      "posthistory.comment",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.userdisplayname",
      "posthistory.id",
      "posthistory.*",
      "badges.name",
      "badges.userid",
      "badges.id",
      "badges.date",
      "badges.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the ratio of male to female patients among all those with abnormal uric acid counts? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.kct , examination.* | patient : patient.id , patient.sex , patient.admission , patient.diagnosis , patient.birthday , patient.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? | races : races.year , races.name , races.raceid , races.round , races.circuitid , races.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.position , laptimes.* | results : results.fastestlaptime , results.driverid , results.raceid , results.laps , results.rank , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.round",
      "races.circuitid",
      "races.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.position",
      "laptimes.*",
      "results.fastestlaptime",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.rank",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70? | player : player.height , player.weight , player.birthday , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.strength , player_attributes.overall_rating , player_attributes.potential , player_attributes.player_api_id , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.height",
      "player.weight",
      "player.birthday",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.strength",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What percentage of carcinogenic-type molecules does not contain fluorine? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? | cards : cards.manacost , cards.availability ( mtgo , paper ) , cards.bordercolor ( black ) , cards.frameversion , cards.layout ( normal ) , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.uuid , foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.manacost",
      "cards.availability",
      "cards.bordercolor",
      "cards.frameversion",
      "cards.layout",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. | schools : schools.gsoffered , schools.city , schools.magnet , schools.gsserved , schools.cdscode , schools.* | frpm : frpm.nslp provision status ( Multiple Provision Types , Provision 3 ) , frpm.cdscode , frpm.school type , frpm.school name , frpm.irc , frpm.* | satscores : satscores.cds , satscores.numge1500 , satscores.rtype , satscores.sname , satscores.dname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.gsoffered",
      "schools.city",
      "schools.magnet",
      "schools.gsserved",
      "schools.cdscode",
      "schools.*",
      "frpm.nslp provision status",
      "frpm.cdscode",
      "frpm.school type",
      "frpm.school name",
      "frpm.irc",
      "frpm.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? | races : races.year , races.name , races.raceid , races.round , races.circuitid , races.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.position , laptimes.* | results : results.fastestlaptime , results.driverid , results.raceid , results.laps , results.rank , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.round",
      "races.circuitid",
      "races.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.position",
      "laptimes.*",
      "results.fastestlaptime",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.rank",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? | patient : patient.sex , patient.diagnosis ( PSS ) , patient.id , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( PSS ) , examination.id , examination.symptoms , examination.ana pattern , examination.thrombosis , examination.* | laboratory : laboratory.crp ( 2+ ) , laboratory.cre , laboratory.ra ( 2+ ) , laboratory.cpk , laboratory.t-bil , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.thrombosis",
      "examination.*",
      "laboratory.crp",
      "laboratory.cre",
      "laboratory.ra",
      "laboratory.cpk",
      "laboratory.t-bil",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the skin colour of the superheroes with 100 attribute value. | hero_attribute : hero_attribute.attribute_value , hero_attribute.attribute_id , hero_attribute.hero_id , hero_attribute.* | colour : colour.colour , colour.id , colour.* | superhero : superhero.skin_colour_id , superhero.id , superhero.superhero_name , superhero.gender_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "hero_attribute.attribute_value",
      "hero_attribute.attribute_id",
      "hero_attribute.hero_id",
      "hero_attribute.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.skin_colour_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? | event : event.event_name , event.location ( 900 E. Washington St. ) , event.type ( Social ) , event.event_id , event.status , event.* | member : member.position ( President , Vice President ) , member.member_id , member.zip , member.first_name , member.email , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | zip_code : zip_code.zip_code , zip_code.city ( Washington ) , zip_code.state ( Washington ) , zip_code.type , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.location",
      "event.type",
      "event.event_id",
      "event.status",
      "event.*",
      "member.position",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down Ajax's superpowers. | superpower : superpower.power_name , superpower.id , superpower.* | superhero : superhero.superhero_name ( Ajax ) , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.power_id , hero_power.hero_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.power_id",
      "hero_power.hero_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. | laboratory : laboratory.date , laboratory.t-bil , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.id , patient.admission , patient.first date , patient.diagnosis , patient.sex , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.examination date , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.id",
      "patient.admission",
      "patient.first date",
      "patient.diagnosis",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.examination date",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many students of the Student_Club have attended the event \"Women's Soccer\"? | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | member : member.link_to_major , member.member_id , member.zip , member.position , member.first_name , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.position",
      "member.first_name",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many percent of female heroes were published by Marvel Comics? | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.publisher_id , superhero.id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? | cards : cards.name ( Tendo Ice Bridge ) , cards.isonlineonly , cards.facename ( Ice ) , cards.uuid , cards.originalreleasedate , cards.* | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.name , foreign_data.id , foreign_data.text , foreign_data.* | sets : sets.name , sets.isonlineonly , sets.code ( ICE ) , sets.id , sets.block , sets.* | set_translations : set_translations.language ( French ) , set_translations.id , set_translations.setcode ( ICE ) , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.uuid",
      "cards.originalreleasedate",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.name",
      "foreign_data.id",
      "foreign_data.text",
      "foreign_data.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.block",
      "sets.*",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the atoms' elements that form bond TR000_2_3. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR000_2_3 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR000_2_3 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down Ajax's superpowers. | superpower : superpower.power_name , superpower.id , superpower.* | superhero : superhero.superhero_name ( Ajax ) , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.power_id , hero_power.hero_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.power_id",
      "hero_power.hero_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Calculate the average home team goal in the 2010/2011 season in the country of Poland. | country : country.name ( Poland ) , country.id , country.* | match : match.season ( 2010/2011 ) , match.home_team_goal , match.home_team_api_id , match.away_team_api_id , match.country_id , match.* | league : league.id , league.country_id , league.name , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "match.season",
      "match.home_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.country_id",
      "match.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.c4 , laboratory.c3 , laboratory.pt , laboratory.id , laboratory.rbc , laboratory.* | examination : examination.thrombosis , examination.diagnosis ( Normal ) , examination.lac , examination.id , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.c4",
      "laboratory.c3",
      "laboratory.pt",
      "laboratory.id",
      "laboratory.rbc",
      "laboratory.*",
      "examination.thrombosis",
      "examination.diagnosis",
      "examination.lac",
      "examination.id",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? | player : player.player_name ( Jordan Bowery , Landon Donovan ) , player.player_api_id , player.id , player.player_fifa_api_id , player.height , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.height",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many gold-eyed superheroes did Marvel Comics publish? | superhero : superhero.eye_colour_id , superhero.hair_colour_id , superhero.publisher_id , superhero.id , superhero.skin_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.skin_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "How many users are awarded with more than 5 badges? | badges : badges.userid , badges.id , badges.name , badges.date , badges.* | votes : votes.userid , votes.id , votes.postid , votes.creationdate , votes.bountyamount , votes.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.userid",
      "badges.id",
      "badges.name",
      "badges.date",
      "badges.*",
      "votes.userid",
      "votes.id",
      "votes.postid",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. | patient : patient.sex , patient.id , patient.birthday , patient.description , patient.diagnosis , patient.* | laboratory : laboratory.glu , laboratory.t-cho , laboratory.tg , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.description",
      "patient.diagnosis",
      "patient.*",
      "laboratory.glu",
      "laboratory.t-cho",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of incredibly powerful cards in the set Coldsnap? | cards : cards.power , cards.name , cards.isonlineonly , cards.setcode , cards.uuid , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.uuid",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which country is the league Italy Serie A from? | country : country.name ( Italy ) , country.id , country.* | league : league.name ( Italy Serie A ) , league.country_id , league.id , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.* | player : player.id , player.birthday , player.height , player.weight , player.player_api_id , player.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*",
      "player.id",
      "player.birthday",
      "player.height",
      "player.weight",
      "player.player_api_id",
      "player.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Based on posts posted by Community, calculate the percentage of posts that use the R language. | posts : posts.owneruserid , posts.id , posts.posttypeid , posts.communityowneddate , posts.title , posts.* | users : users.displayname ( Community ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.postid , posthistory.userid , posthistory.comment , posthistory.id , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.communityowneddate",
      "posts.title",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.comment",
      "posthistory.id",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. | races : races.year , races.name ( Monaco Grand Prix ) , races.date , races.time , races.circuitid , races.* | constructorresults : constructorresults.points , constructorresults.constructorid , constructorresults.raceid , constructorresults.constructorresultsid , constructorresults.status , constructorresults.* | constructors : constructors.name , constructors.nationality , constructors.constructorref , constructors.constructorid , constructors.url , constructors.* | constructorstandings : constructorstandings.constructorid , constructorstandings.points , constructorstandings.wins , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.time",
      "races.circuitid",
      "races.*",
      "constructorresults.points",
      "constructorresults.constructorid",
      "constructorresults.raceid",
      "constructorresults.constructorresultsid",
      "constructorresults.status",
      "constructorresults.*",
      "constructors.name",
      "constructors.nationality",
      "constructors.constructorref",
      "constructors.constructorid",
      "constructors.url",
      "constructors.*",
      "constructorstandings.constructorid",
      "constructorstandings.points",
      "constructorstandings.wins",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? | budget : budget.category ( Advertisement ) , budget.amount , budget.budget_id , budget.link_to_event , budget.spent , budget.* | event : event.event_name ( October Meeting , Yearly Kickoff ) , event.event_id , event.type ( Budget , Meeting ) , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "budget.category",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.spent",
      "budget.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which home team had lost the fewest matches in the 2016 season? | match : match.season , match.home_team_api_id , match.away_team_api_id , match.id , match.stage , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.vision , player_attributes.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.season",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.vision",
      "player_attributes.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? | player_attributes : player_attributes.overall_rating , player_attributes.attacking_work_rate , player_attributes.defensive_work_rate , player_attributes.potential , player_attributes.player_api_id , player_attributes.* | match : match.id , match.season , match.stage , match.date , match.home_team_api_id , match.* | player : player.player_api_id , player.player_fifa_api_id , player.id , player.player_name , player.birthday , player.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.attacking_work_rate",
      "player_attributes.defensive_work_rate",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.player_name",
      "player.birthday",
      "player.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of cards whose language is French among the Story Spotlight cards? | foreign_data : foreign_data.language ( French ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.isstoryspotlight , cards.artist , cards.name , cards.uuid , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.isstoryspotlight",
      "cards.artist",
      "cards.name",
      "cards.uuid",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? | event : event.event_name , event.location ( 900 E. Washington St. ) , event.type ( Social ) , event.event_id , event.status , event.* | member : member.position ( President , Vice President ) , member.member_id , member.zip , member.first_name , member.email , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | zip_code : zip_code.zip_code , zip_code.city ( Washington ) , zip_code.state ( Washington ) , zip_code.type , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.location",
      "event.type",
      "event.event_id",
      "event.status",
      "event.*",
      "member.position",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender ( Female ) , gender.id , gender.* | superhero : superhero.skin_colour_id , superhero.eye_colour_id , superhero.hair_colour_id , superhero.gender_id , superhero.publisher_id , superhero.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of incredibly powerful cards in the set Coldsnap? | cards : cards.power , cards.name , cards.isonlineonly , cards.setcode , cards.uuid , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.uuid",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. | schools : schools.gsoffered , schools.city , schools.magnet , schools.gsserved , schools.cdscode , schools.* | frpm : frpm.nslp provision status ( Multiple Provision Types , Provision 3 ) , frpm.cdscode , frpm.school type , frpm.school name , frpm.irc , frpm.* | satscores : satscores.cds , satscores.numge1500 , satscores.rtype , satscores.sname , satscores.dname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.gsoffered",
      "schools.city",
      "schools.magnet",
      "schools.gsserved",
      "schools.cdscode",
      "schools.*",
      "frpm.nslp provision status",
      "frpm.cdscode",
      "frpm.school type",
      "frpm.school name",
      "frpm.irc",
      "frpm.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.description , patient.admission , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.t-cho , laboratory.id , laboratory.date , laboratory.pic , laboratory.sm ( negative ) , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.description",
      "patient.admission",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.t-cho",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.c4 , laboratory.c3 , laboratory.pt , laboratory.id , laboratory.rbc , laboratory.* | examination : examination.thrombosis , examination.diagnosis ( Normal ) , examination.lac , examination.id , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.c4",
      "laboratory.c3",
      "laboratory.pt",
      "laboratory.id",
      "laboratory.rbc",
      "laboratory.*",
      "examination.thrombosis",
      "examination.diagnosis",
      "examination.lac",
      "examination.id",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the difference in the number of crimes committed in East and North Bohemia in 1996? | district : district.a16 , district.a3 ( north Bohemia ) , district.a15 , district.district_id , district.a2 , district.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | client : client.gender , client.client_id , client.district_id , client.birth_date , client.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a16",
      "district.a3",
      "district.a15",
      "district.district_id",
      "district.a2",
      "district.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which post has the highest score? Please give its id and title's name. | posts : posts.title , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | comments : comments.postid , comments.score , comments.id , comments.text , comments.userid , comments.* | posthistory : posthistory.comment ( Title , title ) , posthistory.postid , posthistory.id , posthistory.userid , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "comments.postid",
      "comments.score",
      "comments.id",
      "comments.text",
      "comments.userid",
      "comments.*",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | expense : expense.approved , expense.link_to_member , expense.expense_id , expense.cost , expense.link_to_budget , expense.* | member : member.member_id , member.zip , member.first_name , member.last_name , member.link_to_major , member.* | event : event.event_date , event.event_id , event.status , event.type , event.notes , event.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.cost",
      "expense.link_to_budget",
      "expense.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.last_name",
      "member.link_to_major",
      "member.*",
      "event.event_date",
      "event.event_id",
      "event.status",
      "event.type",
      "event.notes",
      "event.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which customers, paying in CZK, consumed the most gas in 2011? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | transactions_1k : transactions_1k.date , transactions_1k.time , transactions_1k.amount , transactions_1k.price , transactions_1k.customerid , transactions_1k.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "transactions_1k.date",
      "transactions_1k.time",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.customerid",
      "transactions_1k.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements with double bond, consisted in molecule TR024. | bond : bond.molecule_id ( TR024 ) , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR024 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR024 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? | patient : patient.sex , patient.birthday , patient.id , patient.first date , patient.admission , patient.* | laboratory : laboratory.pt , laboratory.aptt , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.thrombosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.*",
      "laboratory.pt",
      "laboratory.aptt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? | patient : patient.sex , patient.id , patient.birthday , patient.diagnosis , patient.admission , patient.* | examination : examination.acl iga , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.diagnosis",
      "patient.admission",
      "patient.*",
      "examination.acl iga",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "On average how many carcinogenic molecules are single bonded? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the owner user id of the most valuable post? | posts : posts.owneruserid , posts.score , posts.id , posts.title , posts.posttypeid , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | votes : votes.postid , votes.userid , votes.id , votes.creationdate , votes.bountyamount , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.score",
      "posts.id",
      "posts.title",
      "posts.posttypeid",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "votes.postid",
      "votes.userid",
      "votes.id",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more male patients with creatinine not within the normal range than female? True or False? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.symptoms , examination.lac , examination.* | laboratory : laboratory.cre , laboratory.cpk , laboratory.id , laboratory.date , laboratory.pic , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.*",
      "laboratory.cre",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Mention the category of events which were held at MU 215. | event : event.location ( MU 215 ) , event.type , event.event_name , event.event_id , event.event_date , event.* | budget : budget.category , budget.budget_id , budget.spent , budget.remaining , budget.amount , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.location",
      "event.type",
      "event.event_name",
      "event.event_id",
      "event.event_date",
      "event.*",
      "budget.category",
      "budget.budget_id",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Which district has highest active loan? | district : district.a2 , district.a3 , district.district_id , district.a4 , district.a6 , district.* | loan : loan.status , loan.loan_id , loan.account_id , loan.amount , loan.date , loan.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.a4",
      "district.a6",
      "district.*",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. | races : races.year , races.circuitid , races.time , races.date , races.raceid , races.* | drivers : drivers.surname ( Hamilton ) , drivers.driverref ( hamilton ) , drivers.driverid , drivers.forename , drivers.code , drivers.* | circuits : circuits.name , circuits.circuitid , circuits.circuitref , circuits.alt , circuits.location , circuits.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.circuitid",
      "races.time",
      "races.date",
      "races.raceid",
      "races.*",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.forename",
      "drivers.code",
      "drivers.*",
      "circuits.name",
      "circuits.circuitid",
      "circuits.circuitref",
      "circuits.alt",
      "circuits.location",
      "circuits.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? | order : order.amount , order.account_id , order.account_to , order.order_id , order.k_symbol , order.* | account : account.account_id , account.frequency , account.date , account.district_id , account.* | trans : trans.amount , trans.account_id , trans.balance , trans.trans_id , trans.type , trans.* | loan : loan.account_id , loan.amount , loan.date , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "order.amount",
      "order.account_id",
      "order.account_to",
      "order.order_id",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "trans.amount",
      "trans.account_id",
      "trans.balance",
      "trans.trans_id",
      "trans.type",
      "trans.*",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. | district : district.a13 , district.a12 , district.a2 , district.a3 , district.district_id , district.* | loan : loan.duration , loan.status , loan.loan_id , loan.account_id , loan.date , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a13",
      "district.a12",
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.*",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | expense : expense.approved , expense.link_to_member , expense.expense_id , expense.cost , expense.link_to_budget , expense.* | member : member.member_id , member.zip , member.first_name , member.last_name , member.link_to_major , member.* | event : event.event_date , event.event_id , event.status , event.type , event.notes , event.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.cost",
      "expense.link_to_budget",
      "expense.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.last_name",
      "member.link_to_major",
      "member.*",
      "event.event_date",
      "event.event_id",
      "event.status",
      "event.type",
      "event.notes",
      "event.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the percentage of carbon in double-bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the percentage of female patient were born after 1930? | patient : patient.sex , patient.birthday , patient.first date , patient.id , patient.description , patient.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.ana pattern , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.gpt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.description",
      "patient.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.gpt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Determine the bond type that is formed in the chemical compound containing element Carbon. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. | patient : patient.sex , patient.admission , patient.birthday , patient.id , patient.diagnosis , patient.* | laboratory : laboratory.rbc , laboratory.hgb , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis , examination.thrombosis , examination.symptoms , examination.id , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.id",
      "patient.diagnosis",
      "patient.*",
      "laboratory.rbc",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.id",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. | schools : schools.gsoffered , schools.city , schools.magnet , schools.gsserved , schools.cdscode , schools.* | frpm : frpm.nslp provision status ( Multiple Provision Types , Provision 3 ) , frpm.cdscode , frpm.school type , frpm.school name , frpm.irc , frpm.* | satscores : satscores.cds , satscores.numge1500 , satscores.rtype , satscores.sname , satscores.dname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.gsoffered",
      "schools.city",
      "schools.magnet",
      "schools.gsserved",
      "schools.cdscode",
      "schools.*",
      "frpm.nslp provision status",
      "frpm.cdscode",
      "frpm.school type",
      "frpm.school name",
      "frpm.irc",
      "frpm.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the ratio of male to female patients among all those with abnormal uric acid counts? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? | schools : schools.soctype ( Youth Authority Facilities ) , schools.closeddate , schools.county , schools.soc , schools.cdscode , schools.* | frpm : frpm.county name , frpm.school type ( Youth Authority Facilities ) , frpm.county code , frpm.school code , frpm.cdscode , frpm.* | satscores : satscores.numge1500 , satscores.cds , satscores.cname , satscores.rtype , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.soctype",
      "schools.closeddate",
      "schools.county",
      "schools.soc",
      "schools.cdscode",
      "schools.*",
      "frpm.county name",
      "frpm.school type",
      "frpm.county code",
      "frpm.school code",
      "frpm.cdscode",
      "frpm.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.cname",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70? | player : player.height , player.weight , player.birthday , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.strength , player_attributes.overall_rating , player_attributes.potential , player_attributes.player_api_id , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.height",
      "player.weight",
      "player.birthday",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.strength",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Identify the gender of the superhero who has the ability of Phoenix Force. | gender : gender.gender , gender.id , gender.* | superpower : superpower.power_name ( Phoenix Force ) , superpower.id , superpower.* | superhero : superhero.gender_id , superhero.superhero_name ( Phoenix ) , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | patient : patient.diagnosis , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.diagnosis , examination.examination date , examination.id , examination.thrombosis , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? | examination : examination.diagnosis ( thrombosis ) , examination.ana pattern , examination.acl igg , examination.thrombosis , examination.acl iga , examination.* | patient : patient.diagnosis ( ANA ) , patient.id , patient.sex , patient.admission , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.sm , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.acl igg",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*",
      "patient.diagnosis",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. | league : league.name , league.id , league.country_id , league.* | match : match.season ( 2009/2010 ) , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many students of the Student_Club have attended the event \"Women's Soccer\"? | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | member : member.link_to_major , member.member_id , member.zip , member.position , member.first_name , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.position",
      "member.first_name",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of patients who were born in 1980 and were diagnosed with RA are women? | patient : patient.sex , patient.birthday , patient.diagnosis ( RA ) , patient.first date , patient.id , patient.* | examination : examination.diagnosis ( RA ) , examination.id , examination.symptoms , examination.acl iga , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.acl iga",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR004_8_9 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the lap record set by Lewis Hamilton in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.date , races.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.driverid , laptimes.time , laptimes.milliseconds , laptimes.* | drivers : drivers.forename ( Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.laps , results.constructorid , results.fastestlap , results.raceid , results.driverid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.date",
      "races.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "drivers.forename",
      "drivers.driverref",
      "drivers.surname",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.laps",
      "results.constructorid",
      "results.fastestlap",
      "results.raceid",
      "results.driverid",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many members did attend the event 'Community Theater' in 2019? | event : event.event_name ( Community Theater ) , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.email , member.phone , member.link_to_major , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.phone",
      "member.link_to_major",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. | patient : patient.sex , patient.admission , patient.birthday , patient.id , patient.diagnosis , patient.* | laboratory : laboratory.rbc , laboratory.hgb , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis , examination.thrombosis , examination.symptoms , examination.id , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.id",
      "patient.diagnosis",
      "patient.*",
      "laboratory.rbc",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.id",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many members did attend the event 'Community Theater' in 2019? | event : event.event_name ( Community Theater ) , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.email , member.phone , member.link_to_major , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.phone",
      "member.link_to_major",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. | races : races.year , races.name ( Monaco Grand Prix ) , races.date , races.time , races.circuitid , races.* | constructorresults : constructorresults.points , constructorresults.constructorid , constructorresults.raceid , constructorresults.constructorresultsid , constructorresults.status , constructorresults.* | constructors : constructors.name , constructors.nationality , constructors.constructorref , constructors.constructorid , constructors.url , constructors.* | constructorstandings : constructorstandings.constructorid , constructorstandings.points , constructorstandings.wins , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.time",
      "races.circuitid",
      "races.*",
      "constructorresults.points",
      "constructorresults.constructorid",
      "constructorresults.raceid",
      "constructorresults.constructorresultsid",
      "constructorresults.status",
      "constructorresults.*",
      "constructors.name",
      "constructors.nationality",
      "constructors.constructorref",
      "constructors.constructorid",
      "constructors.url",
      "constructors.*",
      "constructorstandings.constructorid",
      "constructorstandings.points",
      "constructorstandings.wins",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the atoms' elements that form bond TR000_2_3. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR000_2_3 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR000_2_3 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? | loan : loan.amount , loan.account_id , loan.date , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.amount , trans.date , trans.account_id , trans.trans_id , trans.balance , trans.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.account_id",
      "loan.date",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.amount",
      "trans.date",
      "trans.account_id",
      "trans.trans_id",
      "trans.balance",
      "trans.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many members did attend the event 'Community Theater' in 2019? | event : event.event_name ( Community Theater ) , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.email , member.phone , member.link_to_major , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.phone",
      "member.link_to_major",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.publisher_id , superhero.id , superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.numtsttakr , satscores.rtype , satscores.* | schools : schools.admlname3 , schools.admfname3 , schools.admlname1 ( Administration ) , schools.admlname2 , schools.admfname2 , schools.* | frpm : frpm.cdscode , frpm.school name , frpm.school code , frpm.school type , frpm.academic year , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.rtype",
      "satscores.*",
      "schools.admlname3",
      "schools.admfname3",
      "schools.admlname1",
      "schools.admlname2",
      "schools.admfname2",
      "schools.*",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.school code",
      "frpm.school type",
      "frpm.academic year",
      "frpm.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards with format commander and legal status do not have a content warning? | legalities : legalities.status ( Legal ) , legalities.format ( commander ) , legalities.id , legalities.uuid , legalities.* | cards : cards.hascontentwarning , cards.uuid , cards.name ( Warning ) , cards.isonlineonly , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.status",
      "legalities.format",
      "legalities.id",
      "legalities.uuid",
      "legalities.*",
      "cards.hascontentwarning",
      "cards.uuid",
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Identify the gender of the superhero who has the ability of Phoenix Force. | gender : gender.gender , gender.id , gender.* | superpower : superpower.power_name ( Phoenix Force ) , superpower.id , superpower.* | superhero : superhero.gender_id , superhero.superhero_name ( Phoenix ) , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? | cards : cards.name ( Tendo Ice Bridge ) , cards.isonlineonly , cards.facename ( Ice ) , cards.uuid , cards.originalreleasedate , cards.* | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.name , foreign_data.id , foreign_data.text , foreign_data.* | sets : sets.name , sets.isonlineonly , sets.code ( ICE ) , sets.id , sets.block , sets.* | set_translations : set_translations.language ( French ) , set_translations.id , set_translations.setcode ( ICE ) , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.uuid",
      "cards.originalreleasedate",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.name",
      "foreign_data.id",
      "foreign_data.text",
      "foreign_data.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.block",
      "sets.*",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Determine the bond type that is formed in the chemical compound containing element Carbon. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the percentage of female patient were born after 1930? | patient : patient.sex , patient.birthday , patient.first date , patient.id , patient.description , patient.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.ana pattern , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.gpt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.description",
      "patient.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.gpt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. | races : races.year , races.circuitid , races.time , races.date , races.raceid , races.* | drivers : drivers.surname ( Hamilton ) , drivers.driverref ( hamilton ) , drivers.driverid , drivers.forename , drivers.code , drivers.* | circuits : circuits.name , circuits.circuitid , circuits.circuitref , circuits.alt , circuits.location , circuits.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.circuitid",
      "races.time",
      "races.date",
      "races.raceid",
      "races.*",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.forename",
      "drivers.code",
      "drivers.*",
      "circuits.name",
      "circuits.circuitid",
      "circuits.circuitref",
      "circuits.alt",
      "circuits.location",
      "circuits.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which toxic element can be found in the molecule TR151? | atom : atom.element , atom.molecule_id ( TR151 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR151 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR151 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\". | member : member.phone , member.member_id , member.zip , member.link_to_major , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.phone",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who have a normal platelet level, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How was the build up play dribbling class for \"LEI\" on 2015/9/10? | team : team.team_short_name ( LEI ) , team.team_api_id , team.team_fifa_api_id , team.team_long_name , team.id , team.* | team_attributes : team_attributes.buildupplaydribblingclass , team_attributes.date , team_attributes.team_api_id , team_attributes.buildupplaydribbling , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_long_name",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplaydribbling",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? | team : team.team_long_name ( Hannover 96 ) , team.team_short_name , team.team_api_id , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.defenceaggressionclass , team_attributes.defenceaggression , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.defenceaggressionclass",
      "team_attributes.defenceaggression",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? | loan : loan.amount , loan.account_id , loan.date , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.amount , trans.date , trans.account_id , trans.trans_id , trans.balance , trans.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.account_id",
      "loan.date",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.amount",
      "trans.date",
      "trans.account_id",
      "trans.trans_id",
      "trans.balance",
      "trans.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? | users : users.displayname ( Harvey Motulsky , Noah Snyder ) , users.views , users.upvotes , users.id , users.reputation , users.* | posts : posts.owneruserid , posts.title , posts.id , posts.score , posts.favoritecount , posts.* | posthistory : posthistory.userid , posthistory.postid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.displayname",
      "users.views",
      "users.upvotes",
      "users.id",
      "users.reputation",
      "users.*",
      "posts.owneruserid",
      "posts.title",
      "posts.id",
      "posts.score",
      "posts.favoritecount",
      "posts.*",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? | patient : patient.admission , patient.id , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.rnp , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.rnp",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n? | player : player.player_name ( Aaron Appindangoye , Abdou Diallo ) , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.ball_control , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.ball_control",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | patient : patient.diagnosis , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.diagnosis , examination.examination date , examination.id , examination.thrombosis , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. | expense : expense.cost , expense.expense_date , expense.expense_description ( Pizza ) , expense.expense_id , expense.approved , expense.* | event : event.event_name , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city ( Hundred ) , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_date",
      "expense.expense_description",
      "expense.expense_id",
      "expense.approved",
      "expense.*",
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? | cards : cards.artist ( Aaron Miller , Jeremy Jarvis ) , cards.asciiname , cards.name , cards.uuid , cards.id , cards.* | sets : sets.name ( Coldsnap ) , sets.code , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.asciiname",
      "cards.name",
      "cards.uuid",
      "cards.id",
      "cards.*",
      "sets.name",
      "sets.code",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. | player : player.player_name , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.attacking_work_rate , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.potential , player_attributes.overall_rating , player_attributes.* | match : match.id , match.season , match.home_team_api_id , match.stage , match.date , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.attacking_work_rate",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.home_team_api_id",
      "match.stage",
      "match.date",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What are the player api id of 10 heaviest players? | player : player.weight , player.player_api_id , player.player_fifa_api_id , player.height , player.id , player.* | player_attributes : player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.weight",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.height",
      "player.id",
      "player.*",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. | member : member.first_name , member.last_name , member.member_id , member.zip , member.email , member.* | income : income.date_received , income.amount , income.income_id , income.source , income.notes , income.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "income.date_received",
      "income.amount",
      "income.income_id",
      "income.source",
      "income.notes",
      "income.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal RF don't have thrombosis? | examination : examination.diagnosis ( Normal , thrombosis ) , examination.thrombosis , examination.id , examination.symptoms , examination.kct , examination.* | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.glu , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.numtsttakr , satscores.rtype , satscores.* | schools : schools.admlname3 , schools.admfname3 , schools.admlname1 ( Administration ) , schools.admlname2 , schools.admfname2 , schools.* | frpm : frpm.cdscode , frpm.school name , frpm.school code , frpm.school type , frpm.academic year , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.rtype",
      "satscores.*",
      "schools.admlname3",
      "schools.admfname3",
      "schools.admlname1",
      "schools.admlname2",
      "schools.admfname2",
      "schools.*",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.school code",
      "frpm.school type",
      "frpm.academic year",
      "frpm.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the difference in the percentage of members in New Jersey and Vermont. | zip_code : zip_code.state ( New Jersey , Vermont ) , zip_code.city ( Jersey , Vermont ) , zip_code.zip_code , zip_code.short_state , zip_code.county , zip_code.* | member : member.member_id , member.zip , member.link_to_major , member.email , member.phone , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.state",
      "zip_code.city",
      "zip_code.zip_code",
      "zip_code.short_state",
      "zip_code.county",
      "zip_code.*",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.email",
      "member.phone",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n? | player : player.player_name ( Aaron Appindangoye , Abdou Diallo ) , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.ball_control , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.ball_control",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Is the set of cards with Adarkar Valkyrie only available outside the United States? | cards : cards.name ( Adarkar Valkyrie ) , cards.availability , cards.isonlineonly , cards.facename , cards.id , cards.* | sets : sets.isforeignonly , sets.isonlineonly , sets.code , sets.name , sets.id , sets.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.availability",
      "cards.isonlineonly",
      "cards.facename",
      "cards.id",
      "cards.*",
      "sets.isforeignonly",
      "sets.isonlineonly",
      "sets.code",
      "sets.name",
      "sets.id",
      "sets.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the lap record set by Lewis Hamilton in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.date , races.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.driverid , laptimes.time , laptimes.milliseconds , laptimes.* | drivers : drivers.forename ( Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.laps , results.constructorid , results.fastestlap , results.raceid , results.driverid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.date",
      "races.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "drivers.forename",
      "drivers.driverref",
      "drivers.surname",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.laps",
      "results.constructorid",
      "results.fastestlap",
      "results.raceid",
      "results.driverid",
      "results.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? | frpm : frpm.school type ( Intermediate/Middle Schools (Public) ) , frpm.district name ( San Bernardino City Unified ) , frpm.district type , frpm.cdscode , frpm.school name , frpm.* | schools : schools.county ( San Bernardino ) , schools.soctype ( Intermediate/Middle Schools (Public) ) , schools.phone , schools.district ( San Bernardino City Unified , San Bernardino County ROP ) , schools.closeddate , schools.* | satscores : satscores.cds , satscores.numge1500 , satscores.dname ( San Bernardino City Unified ) , satscores.cname ( San Bernardino ) , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.school type",
      "frpm.district name",
      "frpm.district type",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.*",
      "schools.county",
      "schools.soctype",
      "schools.phone",
      "schools.district",
      "schools.closeddate",
      "schools.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.cname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? | player_attributes : player_attributes.overall_rating , player_attributes.attacking_work_rate , player_attributes.defensive_work_rate , player_attributes.potential , player_attributes.player_api_id , player_attributes.* | match : match.id , match.season , match.stage , match.date , match.home_team_api_id , match.* | player : player.player_api_id , player.player_fifa_api_id , player.id , player.player_name , player.birthday , player.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.attacking_work_rate",
      "player_attributes.defensive_work_rate",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.player_name",
      "player.birthday",
      "player.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. | superhero : superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.alignment_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | alignment : alignment.alignment ( Good ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.alignment_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards without power are in French? | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | cards : cards.power , cards.name , cards.uuid , cards.artist , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "cards.power",
      "cards.name",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Identify the gender of the superhero who has the ability of Phoenix Force. | gender : gender.gender , gender.id , gender.* | superpower : superpower.power_name ( Phoenix Force ) , superpower.id , superpower.* | superhero : superhero.gender_id , superhero.superhero_name ( Phoenix ) , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the unique id of the set that has the highest number of cards? | sets : sets.id , sets.basesetsize , sets.code , sets.totalsetsize , sets.isonlineonly , sets.* | cards : cards.id , cards.setcode , cards.uuid , cards.artist , cards.availability , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.basesetsize",
      "sets.code",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.*",
      "cards.id",
      "cards.setcode",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.time , races.circuitid , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.position , results.points , results.* | driverstandings : driverstandings.wins , driverstandings.driverid , driverstandings.position , driverstandings.points , driverstandings.raceid , driverstandings.* | laptimes : laptimes.position , laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.position",
      "results.points",
      "results.*",
      "driverstandings.wins",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.points",
      "driverstandings.raceid",
      "driverstandings.*",
      "laptimes.position",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height for each superhero. | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | hero_attribute : hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.attribute_value , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.attribute_value",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the average height of a non-human superhero in Dark Horse Comics? | superhero : superhero.height_cm , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.* | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many gold-eyed superheroes did Marvel Comics publish? | superhero : superhero.eye_colour_id , superhero.hair_colour_id , superhero.publisher_id , superhero.id , superhero.skin_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.skin_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the most durability published by Dark Horse Comics? | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | superpower : superpower.power_name ( Durability ) , superpower.id , superpower.* | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.publisher_id , superhero.id , superhero.* | attribute : attribute.attribute_name ( Durability ) , attribute.id , attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.*",
      "attribute.attribute_name",
      "attribute.id",
      "attribute.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers. | users : users.age , users.id , users.reputation , users.location , users.views , users.* | badges : badges.name ( Organizer ) , badges.userid , badges.date , badges.id , badges.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.id , posthistory.userid , posthistory.text , posthistory.comment , posthistory.postid , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.age",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the badge name that user 'SilentGhost' obtained? | badges : badges.name , badges.userid , badges.date , badges.id , badges.* | users : users.displayname ( SilentGhost , name ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. | sets : sets.releasedate , sets.code , sets.id , sets.name , sets.block , sets.* | cards : cards.name , cards.uuid , cards.rarity ( common ) , cards.artist , cards.availability , cards.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.releasedate",
      "sets.code",
      "sets.id",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.uuid",
      "cards.rarity",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "How many users are awarded with more than 5 badges? | badges : badges.userid , badges.id , badges.name , badges.date , badges.* | votes : votes.userid , votes.id , votes.postid , votes.creationdate , votes.bountyamount , votes.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.userid",
      "badges.id",
      "badges.name",
      "badges.date",
      "badges.*",
      "votes.userid",
      "votes.id",
      "votes.postid",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? | player : player.player_name ( Ariel Borysiuk , Paulin Puel ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.crossing , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.crossing",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which element is the least numerous in non-carcinogenic molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. | expense : expense.cost , expense.expense_date , expense.expense_description ( Pizza ) , expense.expense_id , expense.approved , expense.* | event : event.event_name , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city ( Hundred ) , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_date",
      "expense.expense_description",
      "expense.expense_id",
      "expense.approved",
      "expense.*",
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? | loan : loan.amount , loan.account_id , loan.date , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.amount , trans.date , trans.account_id , trans.trans_id , trans.balance , trans.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.account_id",
      "loan.date",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.amount",
      "trans.date",
      "trans.account_id",
      "trans.trans_id",
      "trans.balance",
      "trans.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. | sets : sets.type ( commander , expansion ) , sets.id , sets.totalsetsize , sets.isonlineonly , sets.isnonfoilonly , sets.* | cards : cards.promotypes , cards.types , cards.subtypes , cards.ispromo , cards.name , cards.* | legalities : legalities.uuid , legalities.id , legalities.status , legalities.format ( commander ) , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.type",
      "sets.id",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.isnonfoilonly",
      "sets.*",
      "cards.promotypes",
      "cards.types",
      "cards.subtypes",
      "cards.ispromo",
      "cards.name",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.status",
      "legalities.format",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the percentage difference of student badges given during 2010 and 2011? | badges : badges.date , badges.userid , badges.name ( Student ) , badges.id , badges.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posts : posts.id , posts.score , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.date",
      "badges.userid",
      "badges.name",
      "badges.id",
      "badges.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posts.id",
      "posts.score",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender ( Female ) , gender.id , gender.* | superhero : superhero.skin_colour_id , superhero.eye_colour_id , superhero.hair_colour_id , superhero.gender_id , superhero.publisher_id , superhero.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? | comments : comments.score , comments.userid , comments.postid , comments.id , comments.text , comments.* | users : users.upvotes , users.downvotes , users.id , users.views , users.reputation , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userid",
      "comments.postid",
      "comments.id",
      "comments.text",
      "comments.*",
      "users.upvotes",
      "users.downvotes",
      "users.id",
      "users.views",
      "users.reputation",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | expense : expense.approved , expense.link_to_member , expense.expense_id , expense.cost , expense.link_to_budget , expense.* | member : member.member_id , member.zip , member.first_name , member.last_name , member.link_to_major , member.* | event : event.event_date , event.event_id , event.status , event.type , event.notes , event.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.cost",
      "expense.link_to_budget",
      "expense.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.last_name",
      "member.link_to_major",
      "member.*",
      "event.event_date",
      "event.event_id",
      "event.status",
      "event.type",
      "event.notes",
      "event.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more in-patient or outpatient who were male? What is the deviation in percentage? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.examination date , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.ra , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.ra",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? | patient : patient.sex , patient.birthday , patient.id , patient.first date , patient.admission , patient.* | laboratory : laboratory.pt , laboratory.aptt , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.thrombosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.*",
      "laboratory.pt",
      "laboratory.aptt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of atoms that can not bond with any other atoms. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? | loan : loan.date , loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.balance , trans.account_id , trans.trans_id , trans.type , trans.amount , trans.* | account : account.account_id , account.date , account.frequency , account.district_id , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.balance",
      "trans.account_id",
      "trans.trans_id",
      "trans.type",
      "trans.amount",
      "trans.*",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the elements of all the triple bonds. | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. | sets : sets.releasedate , sets.code , sets.id , sets.name , sets.block , sets.* | cards : cards.name , cards.uuid , cards.rarity ( common ) , cards.artist , cards.availability , cards.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.releasedate",
      "sets.code",
      "sets.id",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.uuid",
      "cards.rarity",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List all the football player with the highest potential score. | player : player.player_name , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.potential , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.player_fifa_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.player_fifa_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.ana pattern , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the total atoms consisting of the element carbon and hydrogen. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height for each superhero. | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | hero_attribute : hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.attribute_value , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.attribute_value",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of blue female superheroes among all female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | colour : colour.colour ( Blue ) , colour.id , colour.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.skin_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.skin_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Find the triple-bonded molecules which are carcinogenic. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | laboratory : laboratory.ssb , laboratory.centromea , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "laboratory.ssb",
      "laboratory.centromea",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.currency ( EUR ) , customers.segment ( LAM ) , customers.customerid , customers.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.currency",
      "customers.segment",
      "customers.customerid",
      "customers.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements with double bond, consisted in molecule TR024. | bond : bond.molecule_id ( TR024 ) , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR024 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR024 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules without sulphur element is not having double bond? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. | schools : schools.streetabr , schools.street , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( 5-7 , K-12 ) , schools.* | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.enrollment (ages 5-17) , frpm.free meal count (ages 5-17) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.sname , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.streetabr",
      "schools.street",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.enrollment (ages 5-17)",
      "frpm.free meal count (ages 5-17)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. | league : league.name , league.id , league.country_id , league.* | match : match.season ( 2009/2010 ) , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Based on posts posted by Community, calculate the percentage of posts that use the R language. | posts : posts.owneruserid , posts.id , posts.posttypeid , posts.communityowneddate , posts.title , posts.* | users : users.displayname ( Community ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.postid , posthistory.userid , posthistory.comment , posthistory.id , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.communityowneddate",
      "posts.title",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.comment",
      "posthistory.id",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. | races : races.time , races.name , races.date , races.year , races.raceid , races.* | drivers : drivers.dob , drivers.driverid , drivers.surname ( Driver ) , drivers.number , drivers.code , drivers.* | qualifying : qualifying.raceid , qualifying.driverid , qualifying.q1 , qualifying.qualifyid , qualifying.q3 , qualifying.* | results : results.driverid , results.raceid , results.number , results.grid , results.position , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.time",
      "races.name",
      "races.date",
      "races.year",
      "races.raceid",
      "races.*",
      "drivers.dob",
      "drivers.driverid",
      "drivers.surname",
      "drivers.number",
      "drivers.code",
      "drivers.*",
      "qualifying.raceid",
      "qualifying.driverid",
      "qualifying.q1",
      "qualifying.qualifyid",
      "qualifying.q3",
      "qualifying.*",
      "results.driverid",
      "results.raceid",
      "results.number",
      "results.grid",
      "results.position",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal RF don't have thrombosis? | examination : examination.diagnosis ( Normal , thrombosis ) , examination.thrombosis , examination.id , examination.symptoms , examination.kct , examination.* | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.glu , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which molecules have triple bonds and list all the elements they contain. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. | races : races.time , races.name , races.date , races.year , races.raceid , races.* | drivers : drivers.dob , drivers.driverid , drivers.surname ( Driver ) , drivers.number , drivers.code , drivers.* | qualifying : qualifying.raceid , qualifying.driverid , qualifying.q1 , qualifying.qualifyid , qualifying.q3 , qualifying.* | results : results.driverid , results.raceid , results.number , results.grid , results.position , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.time",
      "races.name",
      "races.date",
      "races.year",
      "races.raceid",
      "races.*",
      "drivers.dob",
      "drivers.driverid",
      "drivers.surname",
      "drivers.number",
      "drivers.code",
      "drivers.*",
      "qualifying.raceid",
      "qualifying.driverid",
      "qualifying.q1",
      "qualifying.qualifyid",
      "qualifying.q3",
      "qualifying.*",
      "results.driverid",
      "results.raceid",
      "results.number",
      "results.grid",
      "results.position",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the total average cost that Elijah Allen spent in the events on September and October. | member : member.last_name ( Allen ) , member.first_name ( Elijah ) , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_date , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_date , event.event_id , event.event_name , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_date",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_date",
      "event.event_id",
      "event.event_name",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. | drivers : drivers.dob , drivers.nationality ( German ) , drivers.driverid , drivers.surname , drivers.forename , drivers.* | pitstops : pitstops.duration , pitstops.stop , pitstops.driverid , pitstops.milliseconds , pitstops.raceid , pitstops.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.position , laptimes.* | driverstandings : driverstandings.driverid , driverstandings.raceid , driverstandings.points , driverstandings.position , driverstandings.wins , driverstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.surname",
      "drivers.forename",
      "drivers.*",
      "pitstops.duration",
      "pitstops.stop",
      "pitstops.driverid",
      "pitstops.milliseconds",
      "pitstops.raceid",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.position",
      "laptimes.*",
      "driverstandings.driverid",
      "driverstandings.raceid",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.wins",
      "driverstandings.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. | league : league.name , league.id , league.country_id , league.* | match : match.season ( 2009/2010 ) , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. | frpm : frpm.charter funding type ( Locally funded ) , frpm.school name , frpm.enrollment (k-12) , frpm.school type , frpm.free meal count (ages 5-17) , frpm.* | schools : schools.fundingtype ( Locally funded ) , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( K-12 ) , schools.soctype , schools.* | satscores : satscores.sname , satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.charter funding type",
      "frpm.school name",
      "frpm.enrollment (k-12)",
      "frpm.school type",
      "frpm.free meal count (ages 5-17)",
      "frpm.*",
      "schools.fundingtype",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.soctype",
      "schools.*",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? | client : client.gender , client.birth_date , client.client_id , client.district_id , client.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.client_id , disp.type , disp.disp_id , disp.* | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.birth_date",
      "client.client_id",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more in-patient or outpatient who were male? What is the deviation in percentage? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.examination date , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.ra , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.ra",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more male patients with creatinine not within the normal range than female? True or False? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.symptoms , examination.lac , examination.* | laboratory : laboratory.cre , laboratory.cpk , laboratory.id , laboratory.date , laboratory.pic , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.*",
      "laboratory.cre",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'. | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.description , patient.admission , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.t-cho , laboratory.id , laboratory.date , laboratory.pic , laboratory.sm ( negative ) , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.description",
      "patient.admission",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.t-cho",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. | team : team.team_long_name , team.team_short_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.chancecreationpassingclass ( Normal ) , team_attributes.buildupplaydribblingclass ( Normal ) , team_attributes.chancecreationpassing , team_attributes.date , team_attributes.team_api_id , team_attributes.* | match : match.season , match.id , match.stage , match.date , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.season",
      "match.id",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of incredibly powerful cards in the set Coldsnap? | cards : cards.power , cards.name , cards.isonlineonly , cards.setcode , cards.uuid , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.uuid",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? | races : races.name ( Austrian Grand Prix ) , races.date , races.raceid , races.time , races.circuitid , races.* | pitstops : pitstops.duration , pitstops.raceid , pitstops.stop , pitstops.lap , pitstops.time , pitstops.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.laps , results.raceid , results.time , results.driverid , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.date",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "pitstops.duration",
      "pitstops.raceid",
      "pitstops.stop",
      "pitstops.lap",
      "pitstops.time",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.laps",
      "results.raceid",
      "results.time",
      "results.driverid",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the lap record set by Lewis Hamilton in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.date , races.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.driverid , laptimes.time , laptimes.milliseconds , laptimes.* | drivers : drivers.forename ( Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.laps , results.constructorid , results.fastestlap , results.raceid , results.driverid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.date",
      "races.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "drivers.forename",
      "drivers.driverref",
      "drivers.surname",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.laps",
      "results.constructorid",
      "results.fastestlap",
      "results.raceid",
      "results.driverid",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. | laboratory : laboratory.date , laboratory.plt , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.birthday , patient.id , patient.sex , patient.admission , patient.diagnosis , patient.* | examination : examination.examination date , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.birthday",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.*",
      "examination.examination date",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.c4 , laboratory.c3 , laboratory.pt , laboratory.id , laboratory.rbc , laboratory.* | examination : examination.thrombosis , examination.diagnosis ( Normal ) , examination.lac , examination.id , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.c4",
      "laboratory.c3",
      "laboratory.pt",
      "laboratory.id",
      "laboratory.rbc",
      "laboratory.*",
      "examination.thrombosis",
      "examination.diagnosis",
      "examination.lac",
      "examination.id",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.publisher_id , superhero.id , superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among all the posts posted by the most influential user, identify the percentage with a score above 50. | posts : posts.score , posts.owneruserid , posts.id , posts.posttypeid , posts.body , posts.* | users : users.reputation , users.id , users.location , users.views , users.age , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "users.reputation",
      "users.id",
      "users.location",
      "users.views",
      "users.age",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which foot is preferred by Abdou Diallo? | player : player.player_name ( Abdou Diallo ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.preferred_foot , player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.preferred_foot",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In which years did Lewis Hamilton participate in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.circuitid , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.constructorid , results.raceid , results.driverid , results.number , results.grid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.circuitid",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.constructorid",
      "results.raceid",
      "results.driverid",
      "results.number",
      "results.grid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? | bond : bond.bond_type , bond.molecule_id ( TR010 ) , bond.bond_id , bond.* | molecule : molecule.molecule_id ( TR010 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.element , atom.atom_id , atom.molecule_id ( TR010 ) , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. | superhero : superhero.weight_kg , superhero.eye_colour_id , superhero.superhero_name ( Data ) , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.weight_kg",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules without sulphur element is not having double bond? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? | frpm : frpm.school type ( Intermediate/Middle Schools (Public) ) , frpm.district name ( San Bernardino City Unified ) , frpm.district type , frpm.cdscode , frpm.school name , frpm.* | schools : schools.county ( San Bernardino ) , schools.soctype ( Intermediate/Middle Schools (Public) ) , schools.phone , schools.district ( San Bernardino City Unified , San Bernardino County ROP ) , schools.closeddate , schools.* | satscores : satscores.cds , satscores.numge1500 , satscores.dname ( San Bernardino City Unified ) , satscores.cname ( San Bernardino ) , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.school type",
      "frpm.district name",
      "frpm.district type",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.*",
      "schools.county",
      "schools.soctype",
      "schools.phone",
      "schools.district",
      "schools.closeddate",
      "schools.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.cname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? | patient : patient.birthday , patient.diagnosis ( SJS ) , patient.first date , patient.admission , patient.id , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.hct , laboratory.got , laboratory.* | examination : examination.id , examination.diagnosis ( SjS ) , examination.symptoms , examination.examination date , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Among the members who incurred expenses in more than one event, who paid the most amount? | expense : expense.link_to_member , expense.cost , expense.expense_id , expense.approved , expense.expense_date , expense.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.first_name , member.email , member.link_to_major , member.* | budget : budget.link_to_event , budget.amount , budget.budget_id , budget.category , budget.spent , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.link_to_member",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.expense_date",
      "expense.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.link_to_major",
      "member.*",
      "budget.link_to_event",
      "budget.amount",
      "budget.budget_id",
      "budget.category",
      "budget.spent",
      "budget.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.kct , examination.acl igg , examination.rvvt , examination.* | laboratory : laboratory.hgb , laboratory.id , laboratory.t-bil , laboratory.hct , laboratory.tp , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.kct",
      "examination.acl igg",
      "examination.rvvt",
      "examination.*",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.t-bil",
      "laboratory.hct",
      "laboratory.tp",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements for bond id TR001_10_11? | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? | legalities : legalities.format ( legacy ) , legalities.status , legalities.uuid , legalities.id , legalities.* | cards : cards.frameversion , cards.artist ( D. Alexander Gregory ) , cards.name , cards.hascontentwarning , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.id",
      "legalities.*",
      "cards.frameversion",
      "cards.artist",
      "cards.name",
      "cards.hascontentwarning",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards without power are in French? | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | cards : cards.power , cards.name , cards.uuid , cards.artist , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "cards.power",
      "cards.name",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? | client : client.gender , client.birth_date , client.client_id , client.district_id , client.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.client_id , disp.type , disp.disp_id , disp.* | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.birth_date",
      "client.client_id",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Describe the display name of the parent ID for child post with the highest score. | posts : posts.score , posts.ownerdisplayname , posts.parentid , posts.id , posts.posttypeid , posts.* | users : users.displayname ( name ) , users.id , users.reputation , users.location , users.views , users.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.ownerdisplayname",
      "posts.parentid",
      "posts.id",
      "posts.posttypeid",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Is the set of cards with Adarkar Valkyrie only available outside the United States? | cards : cards.name ( Adarkar Valkyrie ) , cards.availability , cards.isonlineonly , cards.facename , cards.id , cards.* | sets : sets.isforeignonly , sets.isonlineonly , sets.code , sets.name , sets.id , sets.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.availability",
      "cards.isonlineonly",
      "cards.facename",
      "cards.id",
      "cards.*",
      "sets.isforeignonly",
      "sets.isonlineonly",
      "sets.code",
      "sets.name",
      "sets.id",
      "sets.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the percentage of carbon in double-bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. | player : player.birthday , player.player_name , player.player_fifa_api_id , player.player_api_id , player.height , player.* | player_attributes : player_attributes.sprint_speed , player_attributes.date , player_attributes.acceleration , player_attributes.player_api_id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.birthday",
      "player.player_name",
      "player.player_fifa_api_id",
      "player.player_api_id",
      "player.height",
      "player.*",
      "player_attributes.sprint_speed",
      "player_attributes.date",
      "player_attributes.acceleration",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? | set_translations : set_translations.language , set_translations.translation ( Mirrodin ) , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.name ( Mirrodin ) , sets.isonlineonly , sets.code , sets.mcmname ( Mirrodin ) , sets.block ( Mirrodin ) , sets.* | cards : cards.name , cards.isonlineonly , cards.subtypes ( Mirrodin ) , cards.uuid , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.mcmname",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.isonlineonly",
      "cards.subtypes",
      "cards.uuid",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "When was the first time did Kevin Constant have his highest crossing score? Give the date. | player : player.player_name ( Kevin Constant ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.player_api_id , player_attributes.overall_rating , player_attributes.potential , player_attributes.* | team_attributes : team_attributes.chancecreationcrossingclass , team_attributes.date , team_attributes.id , team_attributes.chancecreationcrossing , team_attributes.team_fifa_api_id , team_attributes.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.*",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.date",
      "team_attributes.id",
      "team_attributes.chancecreationcrossing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What are the player api id of 10 heaviest players? | player : player.weight , player.player_api_id , player.player_fifa_api_id , player.height , player.id , player.* | player_attributes : player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.weight",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.height",
      "player.id",
      "player.*",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.cdscode , frpm.school code , frpm.free meal count (k-12) , frpm.* | satscores : satscores.enroll12 , satscores.sname , satscores.cds , satscores.numge1500 , satscores.dname , satscores.* | schools : schools.school , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.enroll12",
      "satscores.sname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.*",
      "schools.school",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many white bordered cards are powerful? | cards : cards.power , cards.bordercolor ( white ) , cards.uuid , cards.id , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.bordercolor",
      "cards.uuid",
      "cards.id",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the toxicology and label of molecule TR060? | molecule : molecule.label , molecule.molecule_id ( TR060 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR060 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR060 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? | patient : patient.sex , patient.birthday , patient.id , patient.first date , patient.admission , patient.* | laboratory : laboratory.pt , laboratory.aptt , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.thrombosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.*",
      "laboratory.pt",
      "laboratory.aptt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many gold-eyed superheroes did Marvel Comics publish? | superhero : superhero.eye_colour_id , superhero.hair_colour_id , superhero.publisher_id , superhero.id , superhero.skin_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.skin_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? | player : player.player_name ( Jordan Bowery , Landon Donovan ) , player.player_api_id , player.id , player.player_fifa_api_id , player.height , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.height",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the total average cost that Elijah Allen spent in the events on September and October. | member : member.last_name ( Allen ) , member.first_name ( Elijah ) , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_date , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_date , event.event_id , event.event_name , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_date",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_date",
      "event.event_id",
      "event.event_name",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes. | comments : comments.score , comments.userdisplayname , comments.userid , comments.id , comments.postid , comments.* | users : users.downvotes , users.upvotes , users.displayname , users.id , users.views , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userdisplayname",
      "comments.userid",
      "comments.id",
      "comments.postid",
      "comments.*",
      "users.downvotes",
      "users.upvotes",
      "users.displayname",
      "users.id",
      "users.views",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of cards whose language is French among the Story Spotlight cards? | foreign_data : foreign_data.language ( French ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.isstoryspotlight , cards.artist , cards.name , cards.uuid , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.isstoryspotlight",
      "cards.artist",
      "cards.name",
      "cards.uuid",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List all the football player with the highest potential score. | player : player.player_name , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.potential , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.player_fifa_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.player_fifa_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in a double type bond? | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. | frpm : frpm.charter funding type ( Locally funded ) , frpm.school name , frpm.enrollment (k-12) , frpm.school type , frpm.free meal count (ages 5-17) , frpm.* | schools : schools.fundingtype ( Locally funded ) , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( K-12 ) , schools.soctype , schools.* | satscores : satscores.sname , satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.charter funding type",
      "frpm.school name",
      "frpm.enrollment (k-12)",
      "frpm.school type",
      "frpm.free meal count (ages 5-17)",
      "frpm.*",
      "schools.fundingtype",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.soctype",
      "schools.*",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. | cards : cards.artist ( Jim Pavelec ) , cards.name , cards.id , cards.uuid , cards.asciiname , cards.* | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.name",
      "cards.id",
      "cards.uuid",
      "cards.asciiname",
      "cards.*",
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the percentage of carbon in double-bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. | expense : expense.cost , expense.expense_date , expense.expense_description ( Pizza ) , expense.expense_id , expense.approved , expense.* | event : event.event_name , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city ( Hundred ) , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_date",
      "expense.expense_description",
      "expense.expense_id",
      "expense.approved",
      "expense.*",
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of the toxicology of the molecule \"TR004\". | molecule : molecule.molecule_id ( TR004 ) , molecule.label , molecule.* | atom : atom.element , atom.molecule_id ( TR004 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR004 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the total average cost that Elijah Allen spent in the events on September and October. | member : member.last_name ( Allen ) , member.first_name ( Elijah ) , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_date , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_date , event.event_id , event.event_name , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_date",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_date",
      "event.event_id",
      "event.event_name",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the bad superheroes, what is the percentage of female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | alignment : alignment.alignment ( Bad ) , alignment.id , alignment.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. | races : races.year , races.name ( Monaco Grand Prix ) , races.date , races.time , races.circuitid , races.* | constructorresults : constructorresults.points , constructorresults.constructorid , constructorresults.raceid , constructorresults.constructorresultsid , constructorresults.status , constructorresults.* | constructors : constructors.name , constructors.nationality , constructors.constructorref , constructors.constructorid , constructors.url , constructors.* | constructorstandings : constructorstandings.constructorid , constructorstandings.points , constructorstandings.wins , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.time",
      "races.circuitid",
      "races.*",
      "constructorresults.points",
      "constructorresults.constructorid",
      "constructorresults.raceid",
      "constructorresults.constructorresultsid",
      "constructorresults.status",
      "constructorresults.*",
      "constructors.name",
      "constructors.nationality",
      "constructors.constructorref",
      "constructors.constructorid",
      "constructors.url",
      "constructors.*",
      "constructorstandings.constructorid",
      "constructorstandings.points",
      "constructorstandings.wins",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. | transactions_1k : transactions_1k.time , transactions_1k.date , transactions_1k.amount , transactions_1k.price , transactions_1k.transactionid , transactions_1k.* | gasstations : gasstations.chainid , gasstations.segment , gasstations.country , gasstations.gasstationid , gasstations.* | yearmonth : yearmonth.customerid , yearmonth.date , yearmonth.consumption , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.*",
    "output_sequence": " | ",
    "tc_original": [
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.transactionid",
      "transactions_1k.*",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.*",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How many drivers managed to finish the race in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.circuitid , races.time , races.* | results : results.driverid , results.raceid , results.laps , results.resultid , results.constructorid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | status : status.status ( Finished ) , status.statusid , status.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.circuitid",
      "races.time",
      "races.*",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.resultid",
      "results.constructorid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "status.status",
      "status.statusid",
      "status.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the bad superheroes, what is the percentage of female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | alignment : alignment.alignment ( Bad ) , alignment.id , alignment.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. | player : player.player_name , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.attacking_work_rate , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.potential , player_attributes.overall_rating , player_attributes.* | match : match.id , match.season , match.home_team_api_id , match.stage , match.date , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.attacking_work_rate",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.home_team_api_id",
      "match.stage",
      "match.date",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes created by George Lucas, identify the percentage of female superheroes. | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( George Lucas ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.superhero_name , superhero.full_name , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. | player : player.player_name , player.height , player.player_api_id , player.id , player.weight , player.* | player_attributes : player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.height",
      "player.player_api_id",
      "player.id",
      "player.weight",
      "player.*",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How was the build up play dribbling class for \"LEI\" on 2015/9/10? | team : team.team_short_name ( LEI ) , team.team_api_id , team.team_fifa_api_id , team.team_long_name , team.id , team.* | team_attributes : team_attributes.buildupplaydribblingclass , team_attributes.date , team_attributes.team_api_id , team_attributes.buildupplaydribbling , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_long_name",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplaydribbling",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.publisher_id , superhero.gender_id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the unique id of the set that has the highest number of cards? | sets : sets.id , sets.basesetsize , sets.code , sets.totalsetsize , sets.isonlineonly , sets.* | cards : cards.id , cards.setcode , cards.uuid , cards.artist , cards.availability , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.basesetsize",
      "sets.code",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.*",
      "cards.id",
      "cards.setcode",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? | legalities : legalities.format ( legacy ) , legalities.status , legalities.uuid , legalities.id , legalities.* | cards : cards.frameversion , cards.artist ( D. Alexander Gregory ) , cards.name , cards.hascontentwarning , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.id",
      "legalities.*",
      "cards.frameversion",
      "cards.artist",
      "cards.name",
      "cards.hascontentwarning",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which user added a bounty amount of 50 to the post title mentioning variance? | posts : posts.title , posts.owneruserid , posts.id , posts.tags , posts.score , posts.* | votes : votes.bountyamount , votes.userid , votes.postid , votes.id , votes.creationdate , votes.* | posthistory : posthistory.comment ( Title , variance ) , posthistory.userid , posthistory.postid , posthistory.userdisplayname ( User ) , posthistory.id , posthistory.* | badges : badges.name ( variance ) , badges.userid , badges.id , badges.date , badges.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.owneruserid",
      "posts.id",
      "posts.tags",
      "posts.score",
      "posts.*",
      "votes.bountyamount",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.creationdate",
      "votes.*",
      "posthistory.comment",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.userdisplayname",
      "posthistory.id",
      "posthistory.*",
      "badges.name",
      "badges.userid",
      "badges.id",
      "badges.date",
      "badges.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How was the build up play dribbling class for \"LEI\" on 2015/9/10? | team : team.team_short_name ( LEI ) , team.team_api_id , team.team_fifa_api_id , team.team_long_name , team.id , team.* | team_attributes : team_attributes.buildupplaydribblingclass , team_attributes.date , team_attributes.team_api_id , team_attributes.buildupplaydribbling , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_long_name",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplaydribbling",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. | races : races.year , races.circuitid , races.time , races.date , races.raceid , races.* | drivers : drivers.surname ( Hamilton ) , drivers.driverref ( hamilton ) , drivers.driverid , drivers.forename , drivers.code , drivers.* | circuits : circuits.name , circuits.circuitid , circuits.circuitref , circuits.alt , circuits.location , circuits.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.circuitid",
      "races.time",
      "races.date",
      "races.raceid",
      "races.*",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.forename",
      "drivers.code",
      "drivers.*",
      "circuits.name",
      "circuits.circuitid",
      "circuits.circuitref",
      "circuits.alt",
      "circuits.location",
      "circuits.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Give the full name and contact number of members who had to spend more than average on each expense. | member : member.first_name , member.last_name , member.phone , member.email , member.member_id , member.* | expense : expense.cost , expense.expense_id , expense.approved , expense.link_to_member , expense.expense_description , expense.* | zip_code : zip_code.zip_code , zip_code.city ( Given ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.phone",
      "member.email",
      "member.member_id",
      "member.*",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_description",
      "expense.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the long name of teams with above-average build-up play passing in 2012. | team : team.team_long_name , team.team_api_id , team.team_short_name , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.buildupplaypassing , team_attributes.buildupplaypassingclass ( Long ) , team_attributes.buildupplayspeed , team_attributes.team_api_id , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.buildupplayspeed",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the heights of the heroes whose eye colours are amber. | superhero : superhero.height_cm , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Amber ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes. | comments : comments.score , comments.userdisplayname , comments.userid , comments.id , comments.postid , comments.* | users : users.downvotes , users.upvotes , users.displayname , users.id , users.views , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userdisplayname",
      "comments.userid",
      "comments.id",
      "comments.postid",
      "comments.*",
      "users.downvotes",
      "users.upvotes",
      "users.displayname",
      "users.id",
      "users.views",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\". | member : member.phone , member.member_id , member.zip , member.link_to_major , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.phone",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among all the posts posted by the most influential user, identify the percentage with a score above 50. | posts : posts.score , posts.owneruserid , posts.id , posts.posttypeid , posts.body , posts.* | users : users.reputation , users.id , users.location , users.views , users.age , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "users.reputation",
      "users.id",
      "users.location",
      "users.views",
      "users.age",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | laboratory : laboratory.ssb , laboratory.centromea , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "laboratory.ssb",
      "laboratory.centromea",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? | cards : cards.convertedmanacost , cards.power , cards.name , cards.manacost , cards.isonlineonly , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.power",
      "cards.name",
      "cards.manacost",
      "cards.isonlineonly",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "When was the first time did Kevin Constant have his highest crossing score? Give the date. | player : player.player_name ( Kevin Constant ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.player_api_id , player_attributes.overall_rating , player_attributes.potential , player_attributes.* | team_attributes : team_attributes.chancecreationcrossingclass , team_attributes.date , team_attributes.id , team_attributes.chancecreationcrossing , team_attributes.team_fifa_api_id , team_attributes.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.*",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.date",
      "team_attributes.id",
      "team_attributes.chancecreationcrossing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? | cards : cards.convertedmanacost , cards.power , cards.name , cards.manacost , cards.isonlineonly , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.power",
      "cards.name",
      "cards.manacost",
      "cards.isonlineonly",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.kct , examination.* | patient : patient.id , patient.sex , patient.admission , patient.diagnosis , patient.birthday , patient.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? | client : client.gender , client.district_id , client.client_id , client.birth_date , client.* | district : district.a3 ( south Bohemia ) , district.a4 , district.district_id , district.a5 , district.a2 , district.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.client_id , disp.type , disp.disp_id , disp.account_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.district_id",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.a4",
      "district.district_id",
      "district.a5",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.account_id",
      "disp.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.cdscode , frpm.school code , frpm.free meal count (k-12) , frpm.* | satscores : satscores.enroll12 , satscores.sname , satscores.cds , satscores.numge1500 , satscores.dname , satscores.* | schools : schools.school , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.enroll12",
      "satscores.sname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.*",
      "schools.school",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the lap record set by Lewis Hamilton in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.date , races.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.driverid , laptimes.time , laptimes.milliseconds , laptimes.* | drivers : drivers.forename ( Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.laps , results.constructorid , results.fastestlap , results.raceid , results.driverid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.date",
      "races.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "drivers.forename",
      "drivers.driverref",
      "drivers.surname",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.laps",
      "results.constructorid",
      "results.fastestlap",
      "results.raceid",
      "results.driverid",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the percentage of female patient were born after 1930? | patient : patient.sex , patient.birthday , patient.first date , patient.id , patient.description , patient.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.ana pattern , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.gpt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.description",
      "patient.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.gpt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Among the members who incurred expenses in more than one event, who paid the most amount? | expense : expense.link_to_member , expense.cost , expense.expense_id , expense.approved , expense.expense_date , expense.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.first_name , member.email , member.link_to_major , member.* | budget : budget.link_to_event , budget.amount , budget.budget_id , budget.category , budget.spent , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.link_to_member",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.expense_date",
      "expense.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.link_to_major",
      "member.*",
      "budget.link_to_event",
      "budget.amount",
      "budget.budget_id",
      "budget.category",
      "budget.spent",
      "budget.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average time in seconds of champion for each year, before year 1975? | races : races.year , races.time , races.date , races.raceid , races.circuitid , races.* | laptimes : laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.* | results : results.time , results.milliseconds , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.time",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.*",
      "results.time",
      "results.milliseconds",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which toxic element can be found in the molecule TR151? | atom : atom.element , atom.molecule_id ( TR151 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR151 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR151 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of patients who were born in 1980 and were diagnosed with RA are women? | patient : patient.sex , patient.birthday , patient.diagnosis ( RA ) , patient.first date , patient.id , patient.* | examination : examination.diagnosis ( RA ) , examination.id , examination.symptoms , examination.acl iga , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.acl iga",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the football player Francois Affolter header's finishing rate on 18/09/2014? | player : player.player_name ( Francois Affolter ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.finishing , player_attributes.date , player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.finishing",
      "player_attributes.date",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? | patient : patient.sex , patient.id , patient.birthday , patient.diagnosis , patient.admission , patient.* | examination : examination.acl iga , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.diagnosis",
      "patient.admission",
      "patient.*",
      "examination.acl iga",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? | player : player.player_name ( Ariel Borysiuk , Paulin Puel ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.crossing , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.crossing",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the ratio of male to female patients among all those with abnormal uric acid counts? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? | driverstandings : driverstandings.wins , driverstandings.points , driverstandings.driverid , driverstandings.position , driverstandings.driverstandingsid , driverstandings.* | results : results.points , results.driverid , results.raceid , results.laps , results.constructorid , results.* | drivers : drivers.surname ( Driver ) , drivers.driverid , drivers.driverref ( driver ) , drivers.forename , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.driverstandingsid",
      "driverstandings.*",
      "results.points",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.constructorid",
      "results.*",
      "drivers.surname",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.forename",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? | laptimes : laptimes.milliseconds , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.* | races : races.year , races.raceid , races.name , races.round , races.time , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.fastestlaptime , results.constructorid , results.milliseconds , results.raceid , results.fastestlap , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.milliseconds",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.milliseconds",
      "results.raceid",
      "results.fastestlap",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. | event : event.event_name , event.status ( Closed ) , event.type ( Game ) , event.event_date , event.event_id , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.county , zip_code.type , zip_code.state , zip_code.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.status",
      "event.type",
      "event.event_date",
      "event.event_id",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.county",
      "zip_code.type",
      "zip_code.state",
      "zip_code.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. | sets : sets.type ( commander , expansion ) , sets.id , sets.totalsetsize , sets.isonlineonly , sets.isnonfoilonly , sets.* | cards : cards.promotypes , cards.types , cards.subtypes , cards.ispromo , cards.name , cards.* | legalities : legalities.uuid , legalities.id , legalities.status , legalities.format ( commander ) , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.type",
      "sets.id",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.isnonfoilonly",
      "sets.*",
      "cards.promotypes",
      "cards.types",
      "cards.subtypes",
      "cards.ispromo",
      "cards.name",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.status",
      "legalities.format",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the percentage of carbon in double-bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements for bond id TR001_10_11? | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height for each superhero. | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | hero_attribute : hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.attribute_value , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.attribute_value",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height of all neutral superheroes. | superhero : superhero.height_cm , superhero.alignment_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.* | alignment : alignment.alignment ( Neutral ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.alignment_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many unknown power cards contain info about the triggered ability | cards : cards.power , cards.name , cards.id , cards.life , cards.uuid , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.id",
      "cards.life",
      "cards.uuid",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How many matches in the 2015/2016 season were held in Scotland Premier League\n? | league : league.name ( Scotland Premier League ) , league.country_id , league.id , league.* | match : match.season ( 2015/2016 ) , match.league_id , match.id , match.stage , match.date , match.* | country : country.name ( Scotland ) , country.id , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.id",
      "match.stage",
      "match.date",
      "match.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards with format commander and legal status do not have a content warning? | legalities : legalities.status ( Legal ) , legalities.format ( commander ) , legalities.id , legalities.uuid , legalities.* | cards : cards.hascontentwarning , cards.uuid , cards.name ( Warning ) , cards.isonlineonly , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.status",
      "legalities.format",
      "legalities.id",
      "legalities.uuid",
      "legalities.*",
      "cards.hascontentwarning",
      "cards.uuid",
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How was the build up play dribbling class for \"LEI\" on 2015/9/10? | team : team.team_short_name ( LEI ) , team.team_api_id , team.team_fifa_api_id , team.team_long_name , team.id , team.* | team_attributes : team_attributes.buildupplaydribblingclass , team_attributes.date , team_attributes.team_api_id , team_attributes.buildupplaydribbling , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_long_name",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplaydribbling",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.time , races.circuitid , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.position , results.points , results.* | driverstandings : driverstandings.wins , driverstandings.driverid , driverstandings.position , driverstandings.points , driverstandings.raceid , driverstandings.* | laptimes : laptimes.position , laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.position",
      "results.points",
      "results.*",
      "driverstandings.wins",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.points",
      "driverstandings.raceid",
      "driverstandings.*",
      "laptimes.position",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. | team : team.team_short_name , team.team_long_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.buildupplaydribbling , team_attributes.buildupplayspeed , team_attributes.buildupplaypassing , team_attributes.buildupplaydribblingclass , team_attributes.buildupplayspeedclass , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.acceleration , player_attributes.agility , player_attributes.reactions , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_long_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribbling",
      "team_attributes.buildupplayspeed",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.acceleration",
      "player_attributes.agility",
      "player_attributes.reactions",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM | comments : comments.score , comments.creationdate , comments.postid , comments.userid , comments.id , comments.* | posts : posts.creaiondate , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.creationdate",
      "comments.postid",
      "comments.userid",
      "comments.id",
      "comments.*",
      "posts.creaiondate",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height of all neutral superheroes. | superhero : superhero.height_cm , superhero.alignment_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.* | alignment : alignment.alignment ( Neutral ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.alignment_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. | races : races.name ( Singapore Grand Prix ) , races.year , races.raceid , races.circuitid , races.date , races.* | constructors : constructors.constructorref , constructors.name , constructors.constructorid , constructors.url , constructors.nationality , constructors.* | driverstandings : driverstandings.raceid , driverstandings.driverid , driverstandings.wins , driverstandings.points , driverstandings.position , driverstandings.* | constructorstandings : constructorstandings.constructorid , constructorstandings.wins , constructorstandings.points , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.raceid",
      "races.circuitid",
      "races.date",
      "races.*",
      "constructors.constructorref",
      "constructors.name",
      "constructors.constructorid",
      "constructors.url",
      "constructors.nationality",
      "constructors.*",
      "driverstandings.raceid",
      "driverstandings.driverid",
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.*",
      "constructorstandings.constructorid",
      "constructorstandings.wins",
      "constructorstandings.points",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "In 2012, who had the least consumption in LAM? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.segment ( LAM ) , customers.customerid , customers.currency , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.segment",
      "customers.customerid",
      "customers.currency",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. | races : races.year , races.raceid , races.time , races.date , races.name , races.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.* | drivers : drivers.nationality ( Japanese ) , drivers.driverid , drivers.driverref ( driver ) , drivers.code , drivers.surname , drivers.* | results : results.driverid , results.laps , results.raceid , results.points , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.time",
      "races.date",
      "races.name",
      "races.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.*",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.code",
      "drivers.surname",
      "drivers.*",
      "results.driverid",
      "results.laps",
      "results.raceid",
      "results.points",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\". | member : member.phone , member.member_id , member.zip , member.link_to_major , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.phone",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the long name of teams with above-average build-up play passing in 2012. | team : team.team_long_name , team.team_api_id , team.team_short_name , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.buildupplaypassing , team_attributes.buildupplaypassingclass ( Long ) , team_attributes.buildupplayspeed , team_attributes.team_api_id , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.buildupplayspeed",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the bond type of TR007_4_19? | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id , bond.* | connected : connected.bond_id ( TR007_4_19 ) , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher for Hawkman, Karate Kid and Speedy? | superhero : superhero.superhero_name ( Hawkman , Karate Kid ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. | schools : schools.gsoffered , schools.city , schools.magnet , schools.gsserved , schools.cdscode , schools.* | frpm : frpm.nslp provision status ( Multiple Provision Types , Provision 3 ) , frpm.cdscode , frpm.school type , frpm.school name , frpm.irc , frpm.* | satscores : satscores.cds , satscores.numge1500 , satscores.rtype , satscores.sname , satscores.dname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.gsoffered",
      "schools.city",
      "schools.magnet",
      "schools.gsserved",
      "schools.cdscode",
      "schools.*",
      "frpm.nslp provision status",
      "frpm.cdscode",
      "frpm.school type",
      "frpm.school name",
      "frpm.irc",
      "frpm.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. | transactions_1k : transactions_1k.time , transactions_1k.date , transactions_1k.amount , transactions_1k.price , transactions_1k.transactionid , transactions_1k.* | gasstations : gasstations.chainid , gasstations.segment , gasstations.country , gasstations.gasstationid , gasstations.* | yearmonth : yearmonth.customerid , yearmonth.date , yearmonth.consumption , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.*",
    "output_sequence": " | ",
    "tc_original": [
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.transactionid",
      "transactions_1k.*",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.*",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment ( KAM , LAM ) , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the description about the ruling of card \"Condemn\"? | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | cards : cards.name ( Condemn ) , cards.uuid , cards.originaltext , cards.originalreleasedate , cards.artist , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "cards.name",
      "cards.uuid",
      "cards.originaltext",
      "cards.originalreleasedate",
      "cards.artist",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? | cards : cards.manacost , cards.availability ( mtgo , paper ) , cards.bordercolor ( black ) , cards.frameversion , cards.layout ( normal ) , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.uuid , foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.manacost",
      "cards.availability",
      "cards.bordercolor",
      "cards.frameversion",
      "cards.layout",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. | member : member.first_name , member.last_name , member.member_id , member.zip , member.email , member.* | income : income.date_received , income.amount , income.income_id , income.source , income.notes , income.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "income.date_received",
      "income.amount",
      "income.income_id",
      "income.source",
      "income.notes",
      "income.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.milliseconds , laptimes.* | races : races.raceid , races.year , races.name , races.round , races.time , races.* | results : results.fastestlaptime , results.constructorid , results.driverid , results.raceid , results.time , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.raceid",
      "races.year",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.driverid",
      "results.raceid",
      "results.time",
      "results.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? | player : player.player_name ( Ariel Borysiuk , Paulin Puel ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.crossing , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.crossing",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How was the build up play dribbling class for \"LEI\" on 2015/9/10? | team : team.team_short_name ( LEI ) , team.team_api_id , team.team_fifa_api_id , team.team_long_name , team.id , team.* | team_attributes : team_attributes.buildupplaydribblingclass , team_attributes.date , team_attributes.team_api_id , team_attributes.buildupplaydribbling , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_long_name",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplaydribbling",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? | set_translations : set_translations.translation , set_translations.language , set_translations.id , set_translations.setcode , set_translations.* | sets : sets.isonlineonly , sets.id , sets.code , sets.name , sets.block , sets.* | cards : cards.isonlineonly , cards.name , cards.artist , cards.availability , cards.uuid , cards.* | foreign_data : foreign_data.language , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.translation",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.*",
      "sets.isonlineonly",
      "sets.id",
      "sets.code",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.isonlineonly",
      "cards.name",
      "cards.artist",
      "cards.availability",
      "cards.uuid",
      "cards.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? | patient : patient.sex , patient.diagnosis ( SLE ) , patient.id , patient.birthday , patient.admission , patient.* | laboratory : laboratory.alb , laboratory.pt , laboratory.hgb , laboratory.glu , laboratory.hct , laboratory.* | examination : examination.diagnosis ( SLE ) , examination.lac , examination.kct , examination.symptoms , examination.rvvt , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.*",
      "laboratory.alb",
      "laboratory.pt",
      "laboratory.hgb",
      "laboratory.glu",
      "laboratory.hct",
      "laboratory.*",
      "examination.diagnosis",
      "examination.lac",
      "examination.kct",
      "examination.symptoms",
      "examination.rvvt",
      "examination.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? | loan : loan.amount , loan.account_id , loan.date , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.amount , trans.date , trans.account_id , trans.trans_id , trans.balance , trans.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.account_id",
      "loan.date",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.amount",
      "trans.date",
      "trans.account_id",
      "trans.trans_id",
      "trans.balance",
      "trans.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. | player : player.birthday , player.player_name , player.player_fifa_api_id , player.player_api_id , player.height , player.* | player_attributes : player_attributes.sprint_speed , player_attributes.date , player_attributes.acceleration , player_attributes.player_api_id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.birthday",
      "player.player_name",
      "player.player_fifa_api_id",
      "player.player_api_id",
      "player.height",
      "player.*",
      "player_attributes.sprint_speed",
      "player_attributes.date",
      "player_attributes.acceleration",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. | sets : sets.id , sets.isforeignonly , sets.code , sets.isfoilonly , sets.isonlineonly , sets.* | cards : cards.name ( Foil ) , cards.availability , cards.facename ( Response ) , cards.isonlineonly , cards.setcode , cards.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.isforeignonly",
      "sets.code",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "cards.name",
      "cards.availability",
      "cards.facename",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of blue female superheroes among all female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | colour : colour.colour ( Blue ) , colour.id , colour.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.skin_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.skin_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. | event : event.event_name , event.status ( Closed ) , event.type ( Game ) , event.event_date , event.event_id , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.county , zip_code.type , zip_code.state , zip_code.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.status",
      "event.type",
      "event.event_date",
      "event.event_id",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.county",
      "zip_code.type",
      "zip_code.state",
      "zip_code.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? | patient : patient.sex , patient.id , patient.first date , patient.admission , patient.birthday , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | examination : examination.id , examination.examination date , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.examination date",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.c4 , laboratory.c3 , laboratory.pt , laboratory.id , laboratory.rbc , laboratory.* | examination : examination.thrombosis , examination.diagnosis ( Normal ) , examination.lac , examination.id , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.c4",
      "laboratory.c3",
      "laboratory.pt",
      "laboratory.id",
      "laboratory.rbc",
      "laboratory.*",
      "examination.thrombosis",
      "examination.diagnosis",
      "examination.lac",
      "examination.id",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which post has the highest score? Please give its id and title's name. | posts : posts.title , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | comments : comments.postid , comments.score , comments.id , comments.text , comments.userid , comments.* | posthistory : posthistory.comment ( Title , title ) , posthistory.postid , posthistory.id , posthistory.userid , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "comments.postid",
      "comments.score",
      "comments.id",
      "comments.text",
      "comments.userid",
      "comments.*",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.time , races.circuitid , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.position , results.points , results.* | driverstandings : driverstandings.wins , driverstandings.driverid , driverstandings.position , driverstandings.points , driverstandings.raceid , driverstandings.* | laptimes : laptimes.position , laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.position",
      "results.points",
      "results.*",
      "driverstandings.wins",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.points",
      "driverstandings.raceid",
      "driverstandings.*",
      "laptimes.position",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | player : player.player_name ( Marko Arnautovic ) , player.player_api_id , player.player_fifa_api_id , player.birthday , player.id , player.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.id",
      "player.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the heights of the heroes whose eye colours are amber. | superhero : superhero.height_cm , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Amber ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? | patient : patient.sex , patient.id , patient.first date , patient.admission , patient.birthday , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | examination : examination.id , examination.examination date , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.examination date",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many cards available in paper have a positive starting maximum hand size? | cards : cards.availability ( paper ) , cards.hand , cards.uuid , cards.artist , cards.colors , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.availability",
      "cards.hand",
      "cards.uuid",
      "cards.artist",
      "cards.colors",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the most durability published by Dark Horse Comics? | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | superpower : superpower.power_name ( Durability ) , superpower.id , superpower.* | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.publisher_id , superhero.id , superhero.* | attribute : attribute.attribute_name ( Durability ) , attribute.id , attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.*",
      "attribute.attribute_name",
      "attribute.id",
      "attribute.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last name of the members of the club that attended the women's soccer event. | member : member.last_name , member.member_id , member.position ( Member ) , member.zip , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Clubb ) , zip_code.type , zip_code.state , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.member_id",
      "member.position",
      "member.zip",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.state",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? | patient : patient.first date , patient.sex , patient.diagnosis ( BEHCET ) , patient.admission , patient.id , patient.* | examination : examination.diagnosis ( Behcet ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.sex",
      "patient.diagnosis",
      "patient.admission",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. | sets : sets.releasedate , sets.code , sets.id , sets.name , sets.block , sets.* | cards : cards.name , cards.uuid , cards.rarity ( common ) , cards.artist , cards.availability , cards.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.releasedate",
      "sets.code",
      "sets.id",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.uuid",
      "cards.rarity",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements with double bond, consisted in molecule TR024. | bond : bond.molecule_id ( TR024 ) , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR024 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR024 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? | player_attributes : player_attributes.overall_rating , player_attributes.attacking_work_rate , player_attributes.defensive_work_rate , player_attributes.potential , player_attributes.player_api_id , player_attributes.* | match : match.id , match.season , match.stage , match.date , match.home_team_api_id , match.* | player : player.player_api_id , player.player_fifa_api_id , player.id , player.player_name , player.birthday , player.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.attacking_work_rate",
      "player_attributes.defensive_work_rate",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.player_name",
      "player.birthday",
      "player.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22? | team : team.team_long_name ( Hull City ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationcrossingclass , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.id , team_attributes.* | match : match.date , match.season , match.home_team_api_id , match.id , match.stage , match.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.id , player_attributes.potential , player_attributes.finishing , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.home_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the ratio of male to female patients among all those with abnormal uric acid counts? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the average height of a non-human superhero in Dark Horse Comics? | superhero : superhero.height_cm , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.* | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? | patient : patient.sex , patient.id , patient.birthday , patient.diagnosis , patient.admission , patient.* | examination : examination.acl iga , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.diagnosis",
      "patient.admission",
      "patient.*",
      "examination.acl iga",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How many matches in the 2015/2016 season were held in Scotland Premier League\n? | league : league.name ( Scotland Premier League ) , league.country_id , league.id , league.* | match : match.season ( 2015/2016 ) , match.league_id , match.id , match.stage , match.date , match.* | country : country.name ( Scotland ) , country.id , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.id",
      "match.stage",
      "match.date",
      "match.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down at least five full names of superheroes with blue eyes. | superhero : superhero.full_name , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.full_name",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "On average how many carcinogenic molecules are single bonded? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22? | team : team.team_long_name ( Hull City ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationcrossingclass , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.id , team_attributes.* | match : match.date , match.season , match.home_team_api_id , match.id , match.stage , match.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.id , player_attributes.potential , player_attributes.finishing , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.home_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Mention the category of events which were held at MU 215. | event : event.location ( MU 215 ) , event.type , event.event_name , event.event_id , event.event_date , event.* | budget : budget.category , budget.budget_id , budget.spent , budget.remaining , budget.amount , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.location",
      "event.type",
      "event.event_name",
      "event.event_id",
      "event.event_date",
      "event.*",
      "budget.category",
      "budget.budget_id",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? | patient : patient.sex , patient.id , patient.first date , patient.admission , patient.birthday , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | examination : examination.id , examination.examination date , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.examination date",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Among the members who incurred expenses in more than one event, who paid the most amount? | expense : expense.link_to_member , expense.cost , expense.expense_id , expense.approved , expense.expense_date , expense.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.first_name , member.email , member.link_to_major , member.* | budget : budget.link_to_event , budget.amount , budget.budget_id , budget.category , budget.spent , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.link_to_member",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.expense_date",
      "expense.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.link_to_major",
      "member.*",
      "budget.link_to_event",
      "budget.amount",
      "budget.budget_id",
      "budget.category",
      "budget.spent",
      "budget.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? | cards : cards.convertedmanacost , cards.power , cards.name , cards.manacost , cards.isonlineonly , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.power",
      "cards.name",
      "cards.manacost",
      "cards.isonlineonly",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? | laptimes : laptimes.milliseconds , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.* | races : races.year , races.raceid , races.name , races.round , races.time , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.fastestlaptime , results.constructorid , results.milliseconds , results.raceid , results.fastestlap , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.milliseconds",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.milliseconds",
      "results.raceid",
      "results.fastestlap",
      "results.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of patients who were born in 1980 and were diagnosed with RA are women? | patient : patient.sex , patient.birthday , patient.diagnosis ( RA ) , patient.first date , patient.id , patient.* | examination : examination.diagnosis ( RA ) , examination.id , examination.symptoms , examination.acl iga , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.acl iga",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the total average cost that Elijah Allen spent in the events on September and October. | member : member.last_name ( Allen ) , member.first_name ( Elijah ) , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_date , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_date , event.event_id , event.event_name , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_date",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_date",
      "event.event_id",
      "event.event_name",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? | budget : budget.category ( Advertisement ) , budget.amount , budget.budget_id , budget.link_to_event , budget.spent , budget.* | event : event.event_name ( October Meeting , Yearly Kickoff ) , event.event_id , event.type ( Budget , Meeting ) , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "budget.category",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.spent",
      "budget.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | player : player.player_name ( Marko Arnautovic ) , player.player_api_id , player.player_fifa_api_id , player.birthday , player.id , player.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.id",
      "player.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the percentage of female patient were born after 1930? | patient : patient.sex , patient.birthday , patient.first date , patient.id , patient.description , patient.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.ana pattern , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.gpt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.description",
      "patient.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.gpt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender ( Female ) , gender.id , gender.* | superhero : superhero.skin_colour_id , superhero.eye_colour_id , superhero.hair_colour_id , superhero.gender_id , superhero.publisher_id , superhero.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. | player : player.player_name , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.attacking_work_rate , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.potential , player_attributes.overall_rating , player_attributes.* | match : match.id , match.season , match.home_team_api_id , match.stage , match.date , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.attacking_work_rate",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.home_team_api_id",
      "match.stage",
      "match.date",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many unknown power cards contain info about the triggered ability | cards : cards.power , cards.name , cards.id , cards.life , cards.uuid , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.id",
      "cards.life",
      "cards.uuid",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.tg , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? | patient : patient.sex , patient.diagnosis ( PSS ) , patient.id , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( PSS ) , examination.id , examination.symptoms , examination.ana pattern , examination.thrombosis , examination.* | laboratory : laboratory.crp ( 2+ ) , laboratory.cre , laboratory.ra ( 2+ ) , laboratory.cpk , laboratory.t-bil , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.thrombosis",
      "examination.*",
      "laboratory.crp",
      "laboratory.cre",
      "laboratory.ra",
      "laboratory.cpk",
      "laboratory.t-bil",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? | patient : patient.diagnosis ( SLE ) , patient.first date , patient.admission , patient.id , patient.sex , patient.* | examination : examination.diagnosis ( SLE ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of the toxicology of the molecule \"TR004\". | molecule : molecule.molecule_id ( TR004 ) , molecule.label , molecule.* | atom : atom.element , atom.molecule_id ( TR004 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR004 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? | player : player.player_name ( Ariel Borysiuk , Paulin Puel ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.crossing , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.crossing",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. | races : races.year , races.circuitid , races.time , races.date , races.raceid , races.* | drivers : drivers.surname ( Hamilton ) , drivers.driverref ( hamilton ) , drivers.driverid , drivers.forename , drivers.code , drivers.* | circuits : circuits.name , circuits.circuitid , circuits.circuitref , circuits.alt , circuits.location , circuits.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.circuitid",
      "races.time",
      "races.date",
      "races.raceid",
      "races.*",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.forename",
      "drivers.code",
      "drivers.*",
      "circuits.name",
      "circuits.circuitid",
      "circuits.circuitref",
      "circuits.alt",
      "circuits.location",
      "circuits.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. | transactions_1k : transactions_1k.time , transactions_1k.date , transactions_1k.amount , transactions_1k.price , transactions_1k.transactionid , transactions_1k.* | gasstations : gasstations.chainid , gasstations.segment , gasstations.country , gasstations.gasstationid , gasstations.* | yearmonth : yearmonth.customerid , yearmonth.date , yearmonth.consumption , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.*",
    "output_sequence": " | ",
    "tc_original": [
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.transactionid",
      "transactions_1k.*",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.*",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'. | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many students of the Student_Club have attended the event \"Women's Soccer\"? | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | member : member.link_to_major , member.member_id , member.zip , member.position , member.first_name , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.position",
      "member.first_name",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? | player : player.player_name ( Ariel Borysiuk , Paulin Puel ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.crossing , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.crossing",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? | set_translations : set_translations.translation , set_translations.language , set_translations.id , set_translations.setcode , set_translations.* | sets : sets.isonlineonly , sets.id , sets.code , sets.name , sets.block , sets.* | cards : cards.isonlineonly , cards.name , cards.artist , cards.availability , cards.uuid , cards.* | foreign_data : foreign_data.language , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.translation",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.*",
      "sets.isonlineonly",
      "sets.id",
      "sets.code",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.isonlineonly",
      "cards.name",
      "cards.artist",
      "cards.availability",
      "cards.uuid",
      "cards.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many percent of female heroes were published by Marvel Comics? | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.publisher_id , superhero.id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many unknown power cards contain info about the triggered ability | cards : cards.power , cards.name , cards.id , cards.life , cards.uuid , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.id",
      "cards.life",
      "cards.uuid",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? | bond : bond.bond_type , bond.molecule_id ( TR010 ) , bond.bond_id , bond.* | molecule : molecule.molecule_id ( TR010 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.element , atom.atom_id , atom.molecule_id ( TR010 ) , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? | patient : patient.first date , patient.sex , patient.diagnosis ( BEHCET ) , patient.admission , patient.id , patient.* | examination : examination.diagnosis ( Behcet ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.sex",
      "patient.diagnosis",
      "patient.admission",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. | sets : sets.releasedate , sets.code , sets.id , sets.name , sets.block , sets.* | cards : cards.name , cards.uuid , cards.rarity ( common ) , cards.artist , cards.availability , cards.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.releasedate",
      "sets.code",
      "sets.id",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.uuid",
      "cards.rarity",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which home team had lost the fewest matches in the 2016 season? | match : match.season , match.home_team_api_id , match.away_team_api_id , match.id , match.stage , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.vision , player_attributes.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.season",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.vision",
      "player_attributes.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? | races : races.name ( Austrian Grand Prix ) , races.date , races.raceid , races.time , races.circuitid , races.* | pitstops : pitstops.duration , pitstops.raceid , pitstops.stop , pitstops.lap , pitstops.time , pitstops.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.laps , results.raceid , results.time , results.driverid , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.date",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "pitstops.duration",
      "pitstops.raceid",
      "pitstops.stop",
      "pitstops.lap",
      "pitstops.time",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.laps",
      "results.raceid",
      "results.time",
      "results.driverid",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. | member : member.first_name , member.last_name , member.member_id , member.zip , member.email , member.* | income : income.date_received , income.amount , income.income_id , income.source , income.notes , income.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "income.date_received",
      "income.amount",
      "income.income_id",
      "income.source",
      "income.notes",
      "income.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Find the triple-bonded molecules which are carcinogenic. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How many drivers managed to finish the race in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.circuitid , races.time , races.* | results : results.driverid , results.raceid , results.laps , results.resultid , results.constructorid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | status : status.status ( Finished ) , status.statusid , status.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.circuitid",
      "races.time",
      "races.*",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.resultid",
      "results.constructorid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "status.status",
      "status.statusid",
      "status.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please list the lap records for the circuits in Italy. | circuits : circuits.country ( Italy ) , circuits.circuitid , circuits.name , circuits.circuitref , circuits.location , circuits.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.laps , results.fastestlap , results.fastestlaptime , results.fastestlapspeed , results.time , results.* | races : races.circuitid , races.year , races.raceid , races.name , races.date , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "circuits.country",
      "circuits.circuitid",
      "circuits.name",
      "circuits.circuitref",
      "circuits.location",
      "circuits.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.laps",
      "results.fastestlap",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.time",
      "results.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.name",
      "races.date",
      "races.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. | superhero : superhero.eye_colour_id , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.hair_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.hair_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender ( Female ) , gender.id , gender.* | superhero : superhero.skin_colour_id , superhero.eye_colour_id , superhero.hair_colour_id , superhero.gender_id , superhero.publisher_id , superhero.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.price , transactions_1k.amount , transactions_1k.customerid , transactions_1k.productid , transactions_1k.date , transactions_1k.* | yearmonth : yearmonth.customerid , yearmonth.consumption , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.price",
      "transactions_1k.amount",
      "transactions_1k.customerid",
      "transactions_1k.productid",
      "transactions_1k.date",
      "transactions_1k.*",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Is the set of cards with Adarkar Valkyrie only available outside the United States? | cards : cards.name ( Adarkar Valkyrie ) , cards.availability , cards.isonlineonly , cards.facename , cards.id , cards.* | sets : sets.isforeignonly , sets.isonlineonly , sets.code , sets.name , sets.id , sets.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.availability",
      "cards.isonlineonly",
      "cards.facename",
      "cards.id",
      "cards.*",
      "sets.isforeignonly",
      "sets.isonlineonly",
      "sets.code",
      "sets.name",
      "sets.id",
      "sets.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? | order : order.amount , order.account_id , order.account_to , order.order_id , order.k_symbol , order.* | account : account.account_id , account.frequency , account.date , account.district_id , account.* | trans : trans.amount , trans.account_id , trans.balance , trans.trans_id , trans.type , trans.* | loan : loan.account_id , loan.amount , loan.date , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "order.amount",
      "order.account_id",
      "order.account_to",
      "order.order_id",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "trans.amount",
      "trans.account_id",
      "trans.balance",
      "trans.trans_id",
      "trans.type",
      "trans.*",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down Ajax's superpowers. | superpower : superpower.power_name , superpower.id , superpower.* | superhero : superhero.superhero_name ( Ajax ) , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.power_id , hero_power.hero_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.power_id",
      "hero_power.hero_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Ig A level came to the hospital after 1990/1/1? | patient : patient.first date , patient.admission , patient.id , patient.diagnosis , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.examination date , examination.id , examination.lac , examination.thrombosis , examination.* | laboratory : laboratory.date , laboratory.iga , laboratory.igg , laboratory.igm , laboratory.id , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.lac",
      "examination.thrombosis",
      "examination.*",
      "laboratory.date",
      "laboratory.iga",
      "laboratory.igg",
      "laboratory.igm",
      "laboratory.id",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the skin colour of the superheroes with 100 attribute value. | hero_attribute : hero_attribute.attribute_value , hero_attribute.attribute_id , hero_attribute.hero_id , hero_attribute.* | colour : colour.colour , colour.id , colour.* | superhero : superhero.skin_colour_id , superhero.id , superhero.superhero_name , superhero.gender_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "hero_attribute.attribute_value",
      "hero_attribute.attribute_id",
      "hero_attribute.hero_id",
      "hero_attribute.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.skin_colour_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? | patient : patient.first date , patient.sex , patient.diagnosis ( BEHCET ) , patient.admission , patient.id , patient.* | examination : examination.diagnosis ( Behcet ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.sex",
      "patient.diagnosis",
      "patient.admission",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? | races : races.name ( Austrian Grand Prix ) , races.date , races.raceid , races.time , races.circuitid , races.* | pitstops : pitstops.duration , pitstops.raceid , pitstops.stop , pitstops.lap , pitstops.time , pitstops.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.laps , results.raceid , results.time , results.driverid , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.date",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "pitstops.duration",
      "pitstops.raceid",
      "pitstops.stop",
      "pitstops.lap",
      "pitstops.time",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.laps",
      "results.raceid",
      "results.time",
      "results.driverid",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | player : player.player_name ( Marko Arnautovic ) , player.player_api_id , player.player_fifa_api_id , player.birthday , player.id , player.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.id",
      "player.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "On average how many carcinogenic molecules are single bonded? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.price , transactions_1k.amount , transactions_1k.customerid , transactions_1k.productid , transactions_1k.date , transactions_1k.* | yearmonth : yearmonth.customerid , yearmonth.consumption , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.price",
      "transactions_1k.amount",
      "transactions_1k.customerid",
      "transactions_1k.productid",
      "transactions_1k.date",
      "transactions_1k.*",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the skin colour of the superheroes with 100 attribute value. | hero_attribute : hero_attribute.attribute_value , hero_attribute.attribute_id , hero_attribute.hero_id , hero_attribute.* | colour : colour.colour , colour.id , colour.* | superhero : superhero.skin_colour_id , superhero.id , superhero.superhero_name , superhero.gender_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "hero_attribute.attribute_value",
      "hero_attribute.attribute_id",
      "hero_attribute.hero_id",
      "hero_attribute.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.skin_colour_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? | comments : comments.score , comments.userid , comments.postid , comments.id , comments.text , comments.* | users : users.upvotes , users.downvotes , users.id , users.views , users.reputation , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userid",
      "comments.postid",
      "comments.id",
      "comments.text",
      "comments.*",
      "users.upvotes",
      "users.downvotes",
      "users.id",
      "users.views",
      "users.reputation",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? | client : client.gender , client.birth_date , client.client_id , client.district_id , client.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.client_id , disp.type , disp.disp_id , disp.* | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.birth_date",
      "client.client_id",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the atoms of TR144_8_19? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR144_8_19 ) , connected.atom_id , connected.atom_id2 , connected.* | bond : bond.bond_id ( TR144_8_19 ) , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher for Hawkman, Karate Kid and Speedy? | superhero : superhero.superhero_name ( Hawkman , Karate Kid ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? | races : races.raceid , races.name , races.year , races.round , races.date , races.* | results : results.fastestlapspeed , results.raceid , results.driverid , results.fastestlap , results.statusid , results.* | drivers : drivers.surname ( Speed , di Resta ) , drivers.forename ( Paul ) , drivers.driverref ( resta , speed ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.raceid",
      "races.name",
      "races.year",
      "races.round",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.raceid",
      "results.driverid",
      "results.fastestlap",
      "results.statusid",
      "results.*",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? | budget : budget.category ( Advertisement ) , budget.amount , budget.budget_id , budget.link_to_event , budget.spent , budget.* | event : event.event_name ( October Meeting , Yearly Kickoff ) , event.event_id , event.type ( Budget , Meeting ) , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "budget.category",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.spent",
      "budget.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. | player : player.player_name , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.attacking_work_rate , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.potential , player_attributes.overall_rating , player_attributes.* | match : match.id , match.season , match.home_team_api_id , match.stage , match.date , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.attacking_work_rate",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.home_team_api_id",
      "match.stage",
      "match.date",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the badge name that user 'SilentGhost' obtained? | badges : badges.name , badges.userid , badges.date , badges.id , badges.* | users : users.displayname ( SilentGhost , name ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. | races : races.name ( Singapore Grand Prix ) , races.year , races.raceid , races.circuitid , races.date , races.* | constructors : constructors.constructorref , constructors.name , constructors.constructorid , constructors.url , constructors.nationality , constructors.* | driverstandings : driverstandings.raceid , driverstandings.driverid , driverstandings.wins , driverstandings.points , driverstandings.position , driverstandings.* | constructorstandings : constructorstandings.constructorid , constructorstandings.wins , constructorstandings.points , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.raceid",
      "races.circuitid",
      "races.date",
      "races.*",
      "constructors.constructorref",
      "constructors.name",
      "constructors.constructorid",
      "constructors.url",
      "constructors.nationality",
      "constructors.*",
      "driverstandings.raceid",
      "driverstandings.driverid",
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.*",
      "constructorstandings.constructorid",
      "constructorstandings.wins",
      "constructorstandings.points",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? | schools : schools.soctype ( Youth Authority Facilities ) , schools.closeddate , schools.county , schools.soc , schools.cdscode , schools.* | frpm : frpm.county name , frpm.school type ( Youth Authority Facilities ) , frpm.county code , frpm.school code , frpm.cdscode , frpm.* | satscores : satscores.numge1500 , satscores.cds , satscores.cname , satscores.rtype , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.soctype",
      "schools.closeddate",
      "schools.county",
      "schools.soc",
      "schools.cdscode",
      "schools.*",
      "frpm.county name",
      "frpm.school type",
      "frpm.county code",
      "frpm.school code",
      "frpm.cdscode",
      "frpm.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.cname",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? | races : races.name ( Spanish Grand Prix ) , races.year , races.circuitid , races.raceid , races.date , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.constructorid , results.statusid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.* | drivers : drivers.driverid , drivers.surname ( Speed ) , drivers.driverref ( driver , speed ) , drivers.number , drivers.code , drivers.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.circuitid",
      "races.raceid",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.constructorid",
      "results.statusid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*",
      "drivers.driverid",
      "drivers.surname",
      "drivers.driverref",
      "drivers.number",
      "drivers.code",
      "drivers.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? | patient : patient.first date , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.u-pro , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.u-pro",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? | schools : schools.soctype ( Youth Authority Facilities ) , schools.closeddate , schools.county , schools.soc , schools.cdscode , schools.* | frpm : frpm.county name , frpm.school type ( Youth Authority Facilities ) , frpm.county code , frpm.school code , frpm.cdscode , frpm.* | satscores : satscores.numge1500 , satscores.cds , satscores.cname , satscores.rtype , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.soctype",
      "schools.closeddate",
      "schools.county",
      "schools.soc",
      "schools.cdscode",
      "schools.*",
      "frpm.county name",
      "frpm.school type",
      "frpm.county code",
      "frpm.school code",
      "frpm.cdscode",
      "frpm.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.cname",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher for Hawkman, Karate Kid and Speedy? | superhero : superhero.superhero_name ( Hawkman , Karate Kid ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? | bond : bond.bond_type , bond.molecule_id ( TR010 ) , bond.bond_id , bond.* | molecule : molecule.molecule_id ( TR010 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.element , atom.atom_id , atom.molecule_id ( TR010 ) , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Please list the superhero names of all the superheroes that have blue eyes and blond hair. | superhero : superhero.superhero_name , superhero.eye_colour_id , superhero.full_name , superhero.hair_colour_id , superhero.gender_id , superhero.* | colour : colour.colour ( Blond , Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List all the football player with the highest potential score. | player : player.player_name , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.potential , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.player_fifa_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.player_fifa_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many atoms with iodine and with sulfur type elements are there in single bond molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last names of students under the Elementary Education major and include their phone numbers. | member : member.last_name , member.phone , member.link_to_major , member.member_id , member.zip , member.* | major : major.major_name ( Elementary Education ) , major.major_id , major.department , major.college , major.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.phone",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.*",
      "major.major_name",
      "major.major_id",
      "major.department",
      "major.college",
      "major.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How was the build up play dribbling class for \"LEI\" on 2015/9/10? | team : team.team_short_name ( LEI ) , team.team_api_id , team.team_fifa_api_id , team.team_long_name , team.id , team.* | team_attributes : team_attributes.buildupplaydribblingclass , team_attributes.date , team_attributes.team_api_id , team_attributes.buildupplaydribbling , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_long_name",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplaydribbling",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. | races : races.year , races.raceid , races.time , races.date , races.name , races.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.* | drivers : drivers.nationality ( Japanese ) , drivers.driverid , drivers.driverref ( driver ) , drivers.code , drivers.surname , drivers.* | results : results.driverid , results.laps , results.raceid , results.points , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.time",
      "races.date",
      "races.name",
      "races.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.*",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.code",
      "drivers.surname",
      "drivers.*",
      "results.driverid",
      "results.laps",
      "results.raceid",
      "results.points",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. | transactions_1k : transactions_1k.time , transactions_1k.date , transactions_1k.amount , transactions_1k.price , transactions_1k.transactionid , transactions_1k.* | gasstations : gasstations.chainid , gasstations.segment , gasstations.country , gasstations.gasstationid , gasstations.* | yearmonth : yearmonth.customerid , yearmonth.date , yearmonth.consumption , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.*",
    "output_sequence": " | ",
    "tc_original": [
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.transactionid",
      "transactions_1k.*",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.*",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? | player : player.player_name ( Ariel Borysiuk , Paulin Puel ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.crossing , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.crossing",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? | order : order.amount , order.account_id , order.account_to , order.order_id , order.k_symbol , order.* | account : account.account_id , account.frequency , account.date , account.district_id , account.* | trans : trans.amount , trans.account_id , trans.balance , trans.trans_id , trans.type , trans.* | loan : loan.account_id , loan.amount , loan.date , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "order.amount",
      "order.account_id",
      "order.account_to",
      "order.order_id",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "trans.amount",
      "trans.account_id",
      "trans.balance",
      "trans.trans_id",
      "trans.type",
      "trans.*",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | expense : expense.approved , expense.link_to_member , expense.expense_id , expense.cost , expense.link_to_budget , expense.* | member : member.member_id , member.zip , member.first_name , member.last_name , member.link_to_major , member.* | event : event.event_date , event.event_id , event.status , event.type , event.notes , event.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.cost",
      "expense.link_to_budget",
      "expense.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.last_name",
      "member.link_to_major",
      "member.*",
      "event.event_date",
      "event.event_id",
      "event.status",
      "event.type",
      "event.notes",
      "event.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? | laboratory : laboratory.gpt , laboratory.date , laboratory.got , laboratory.id , laboratory.pic , laboratory.* | patient : patient.sex , patient.id , patient.birthday , patient.admission , patient.description , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.gpt",
      "laboratory.date",
      "laboratory.got",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.*",
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.description",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the bond type of TR007_4_19? | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id , bond.* | connected : connected.bond_id ( TR007_4_19 ) , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. | patient : patient.sex , patient.admission , patient.birthday , patient.id , patient.diagnosis , patient.* | laboratory : laboratory.rbc , laboratory.hgb , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis , examination.thrombosis , examination.symptoms , examination.id , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.id",
      "patient.diagnosis",
      "patient.*",
      "laboratory.rbc",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.id",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? | patient : patient.sex , patient.diagnosis ( SLE ) , patient.id , patient.birthday , patient.admission , patient.* | laboratory : laboratory.alb , laboratory.pt , laboratory.hgb , laboratory.glu , laboratory.hct , laboratory.* | examination : examination.diagnosis ( SLE ) , examination.lac , examination.kct , examination.symptoms , examination.rvvt , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.*",
      "laboratory.alb",
      "laboratory.pt",
      "laboratory.hgb",
      "laboratory.glu",
      "laboratory.hct",
      "laboratory.*",
      "examination.diagnosis",
      "examination.lac",
      "examination.kct",
      "examination.symptoms",
      "examination.rvvt",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? | patient : patient.admission , patient.id , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.rnp , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.rnp",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the name of the closed event whose cost has exceeded the budget the most. | expense : expense.cost , expense.approved , expense.link_to_budget , expense.link_to_member , expense.expense_id , expense.* | event : event.event_name , event.status ( Closed ) , event.event_id , event.notes , event.location , event.* | budget : budget.event_status ( Closed ) , budget.amount , budget.budget_id , budget.link_to_event , budget.category , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.approved",
      "expense.link_to_budget",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.*",
      "event.event_name",
      "event.status",
      "event.event_id",
      "event.notes",
      "event.location",
      "event.*",
      "budget.event_status",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.category",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many cards available in paper have a positive starting maximum hand size? | cards : cards.availability ( paper ) , cards.hand , cards.uuid , cards.artist , cards.colors , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.availability",
      "cards.hand",
      "cards.uuid",
      "cards.artist",
      "cards.colors",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel? | player : player.player_name ( Ariel Borysiuk , Paulin Puel ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.crossing , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.crossing",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? | match : match.date , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | league : league.name , league.country_id , league.id , league.* | country : country.name , country.id , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.agility , player_attributes.balance , player_attributes.jumping , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.date",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.jumping",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down at least five full names of superheroes with blue eyes. | superhero : superhero.full_name , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.full_name",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the average height of a non-human superhero in Dark Horse Comics? | superhero : superhero.height_cm , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.* | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. | races : races.time , races.name , races.date , races.year , races.raceid , races.* | drivers : drivers.dob , drivers.driverid , drivers.surname ( Driver ) , drivers.number , drivers.code , drivers.* | qualifying : qualifying.raceid , qualifying.driverid , qualifying.q1 , qualifying.qualifyid , qualifying.q3 , qualifying.* | results : results.driverid , results.raceid , results.number , results.grid , results.position , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.time",
      "races.name",
      "races.date",
      "races.year",
      "races.raceid",
      "races.*",
      "drivers.dob",
      "drivers.driverid",
      "drivers.surname",
      "drivers.number",
      "drivers.code",
      "drivers.*",
      "qualifying.raceid",
      "qualifying.driverid",
      "qualifying.q1",
      "qualifying.qualifyid",
      "qualifying.q3",
      "qualifying.*",
      "results.driverid",
      "results.raceid",
      "results.number",
      "results.grid",
      "results.position",
      "results.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Please list the superhero names of all the superheroes that have blue eyes and blond hair. | superhero : superhero.superhero_name , superhero.eye_colour_id , superhero.full_name , superhero.hair_colour_id , superhero.gender_id , superhero.* | colour : colour.colour ( Blond , Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is reference name of Robert Kubica? | drivers : drivers.surname ( Kubica ) , drivers.driverref ( kubica ) , drivers.forename , drivers.driverid , drivers.dob , drivers.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.milliseconds , laptimes.* | races : races.year , races.raceid , races.name , races.time , races.round , races.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.driverref",
      "drivers.forename",
      "drivers.driverid",
      "drivers.dob",
      "drivers.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.time",
      "races.round",
      "races.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? | cards : cards.artist ( Aaron Miller , Jeremy Jarvis ) , cards.asciiname , cards.name , cards.uuid , cards.id , cards.* | sets : sets.name ( Coldsnap ) , sets.code , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.asciiname",
      "cards.name",
      "cards.uuid",
      "cards.id",
      "cards.*",
      "sets.name",
      "sets.code",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? | drivers : drivers.dob , drivers.number , drivers.driverid , drivers.surname , drivers.code , drivers.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | races : races.year , races.date , races.raceid , races.time , races.round , races.* | results : results.laps , results.fastestlap , results.time , results.driverid , results.points , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.number",
      "drivers.driverid",
      "drivers.surname",
      "drivers.code",
      "drivers.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.date",
      "races.raceid",
      "races.time",
      "races.round",
      "races.*",
      "results.laps",
      "results.fastestlap",
      "results.time",
      "results.driverid",
      "results.points",
      "results.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.currency ( EUR ) , customers.segment ( LAM ) , customers.customerid , customers.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.currency",
      "customers.segment",
      "customers.customerid",
      "customers.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | expense : expense.approved , expense.link_to_member , expense.expense_id , expense.cost , expense.link_to_budget , expense.* | member : member.member_id , member.zip , member.first_name , member.last_name , member.link_to_major , member.* | event : event.event_date , event.event_id , event.status , event.type , event.notes , event.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.cost",
      "expense.link_to_budget",
      "expense.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.last_name",
      "member.link_to_major",
      "member.*",
      "event.event_date",
      "event.event_id",
      "event.status",
      "event.type",
      "event.notes",
      "event.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? | patient : patient.sex , patient.id , patient.first date , patient.admission , patient.birthday , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | examination : examination.id , examination.examination date , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.examination date",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among all the posts posted by the most influential user, identify the percentage with a score above 50. | posts : posts.score , posts.owneruserid , posts.id , posts.posttypeid , posts.body , posts.* | users : users.reputation , users.id , users.location , users.views , users.age , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "users.reputation",
      "users.id",
      "users.location",
      "users.views",
      "users.age",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. | event : event.event_name , event.status ( Closed ) , event.type ( Game ) , event.event_date , event.event_id , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.county , zip_code.type , zip_code.state , zip_code.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.status",
      "event.type",
      "event.event_date",
      "event.event_id",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.county",
      "zip_code.type",
      "zip_code.state",
      "zip_code.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the highest eligible free rate for K-12 students in the schools in Alameda County? | frpm : frpm.county name ( Alameda ) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.free meal count (k-12) , frpm.school code , frpm.* | schools : schools.county ( Alameda ) , schools.gsoffered ( K-12 ) , schools.cdscode , schools.gsserved ( K-12 ) , schools.latitude , schools.* | satscores : satscores.numge1500 , satscores.enroll12 , satscores.cds , satscores.cname ( Alameda ) , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.*",
      "schools.county",
      "schools.gsoffered",
      "schools.cdscode",
      "schools.gsserved",
      "schools.latitude",
      "schools.*",
      "satscores.numge1500",
      "satscores.enroll12",
      "satscores.cds",
      "satscores.cname",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. | team : team.team_short_name , team.team_long_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.buildupplaydribbling , team_attributes.buildupplayspeed , team_attributes.buildupplaypassing , team_attributes.buildupplaydribblingclass , team_attributes.buildupplayspeedclass , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.acceleration , player_attributes.agility , player_attributes.reactions , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_long_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribbling",
      "team_attributes.buildupplayspeed",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.acceleration",
      "player_attributes.agility",
      "player_attributes.reactions",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.publisher_id , superhero.id , superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? | loan : loan.amount , loan.account_id , loan.date , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.amount , trans.date , trans.account_id , trans.trans_id , trans.balance , trans.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.account_id",
      "loan.date",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.amount",
      "trans.date",
      "trans.account_id",
      "trans.trans_id",
      "trans.balance",
      "trans.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the heights of the heroes whose eye colours are amber. | superhero : superhero.height_cm , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Amber ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards without power are in French? | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | cards : cards.power , cards.name , cards.uuid , cards.artist , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "cards.power",
      "cards.name",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. | event : event.event_name , event.status ( Closed ) , event.type ( Game ) , event.event_date , event.event_id , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.county , zip_code.type , zip_code.state , zip_code.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.status",
      "event.type",
      "event.event_date",
      "event.event_id",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.county",
      "zip_code.type",
      "zip_code.state",
      "zip_code.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the total atoms consisting of the element carbon and hydrogen. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? | patient : patient.birthday , patient.diagnosis ( SJS ) , patient.first date , patient.admission , patient.id , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.hct , laboratory.got , laboratory.* | examination : examination.id , examination.diagnosis ( SjS ) , examination.symptoms , examination.examination date , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. | district : district.a13 , district.a12 , district.a2 , district.a3 , district.district_id , district.* | loan : loan.duration , loan.status , loan.loan_id , loan.account_id , loan.date , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a13",
      "district.a12",
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.*",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many cards available in paper have a positive starting maximum hand size? | cards : cards.availability ( paper ) , cards.hand , cards.uuid , cards.artist , cards.colors , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.availability",
      "cards.hand",
      "cards.uuid",
      "cards.artist",
      "cards.colors",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? | drivers : drivers.dob , drivers.number , drivers.driverid , drivers.surname , drivers.code , drivers.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | races : races.year , races.date , races.raceid , races.time , races.round , races.* | results : results.laps , results.fastestlap , results.time , results.driverid , results.points , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.number",
      "drivers.driverid",
      "drivers.surname",
      "drivers.code",
      "drivers.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.date",
      "races.raceid",
      "races.time",
      "races.round",
      "races.*",
      "results.laps",
      "results.fastestlap",
      "results.time",
      "results.driverid",
      "results.points",
      "results.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? | cards : cards.convertedmanacost , cards.power , cards.name , cards.manacost , cards.isonlineonly , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.power",
      "cards.name",
      "cards.manacost",
      "cards.isonlineonly",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the average height of a non-human superhero in Dark Horse Comics? | superhero : superhero.height_cm , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.* | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? | loan : loan.amount , loan.account_id , loan.date , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.amount , trans.date , trans.account_id , trans.trans_id , trans.balance , trans.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.account_id",
      "loan.date",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.amount",
      "trans.date",
      "trans.account_id",
      "trans.trans_id",
      "trans.balance",
      "trans.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. | schools : schools.streetabr , schools.street , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( 5-7 , K-12 ) , schools.* | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.enrollment (ages 5-17) , frpm.free meal count (ages 5-17) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.sname , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.streetabr",
      "schools.street",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.enrollment (ages 5-17)",
      "frpm.free meal count (ages 5-17)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment ( KAM , LAM ) , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the unique id of the set that has the highest number of cards? | sets : sets.id , sets.basesetsize , sets.code , sets.totalsetsize , sets.isonlineonly , sets.* | cards : cards.id , cards.setcode , cards.uuid , cards.artist , cards.availability , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.basesetsize",
      "sets.code",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.*",
      "cards.id",
      "cards.setcode",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. | player : player.player_name , player.birthday , player.id , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.birthday",
      "player.id",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the bond type of TR007_4_19? | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id , bond.* | connected : connected.bond_id ( TR007_4_19 ) , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many atoms with iodine and with sulfur type elements are there in single bond molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? | set_translations : set_translations.language , set_translations.translation ( Mirrodin ) , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.name ( Mirrodin ) , sets.isonlineonly , sets.code , sets.mcmname ( Mirrodin ) , sets.block ( Mirrodin ) , sets.* | cards : cards.name , cards.isonlineonly , cards.subtypes ( Mirrodin ) , cards.uuid , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.mcmname",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.isonlineonly",
      "cards.subtypes",
      "cards.uuid",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who have a normal platelet level, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers. | users : users.age , users.id , users.reputation , users.location , users.views , users.* | badges : badges.name ( Organizer ) , badges.userid , badges.date , badges.id , badges.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.id , posthistory.userid , posthistory.text , posthistory.comment , posthistory.postid , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.age",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more male patients with creatinine not within the normal range than female? True or False? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.symptoms , examination.lac , examination.* | laboratory : laboratory.cre , laboratory.cpk , laboratory.id , laboratory.date , laboratory.pic , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.*",
      "laboratory.cre",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last names of students under the Elementary Education major and include their phone numbers. | member : member.last_name , member.phone , member.link_to_major , member.member_id , member.zip , member.* | major : major.major_name ( Elementary Education ) , major.major_id , major.department , major.college , major.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.phone",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.*",
      "major.major_name",
      "major.major_id",
      "major.department",
      "major.college",
      "major.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? | races : races.year , races.name , races.raceid , races.round , races.circuitid , races.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.position , laptimes.* | results : results.fastestlaptime , results.driverid , results.raceid , results.laps , results.rank , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.round",
      "races.circuitid",
      "races.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.position",
      "laptimes.*",
      "results.fastestlaptime",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.rank",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Give the name of the league had the most goals in the 2016 season? | league : league.name , league.id , league.country_id , league.* | match : match.season , match.league_id , match.home_team_goal , match.away_team_goal , match.id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.balance , player_attributes.strength , player_attributes.vision , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.balance",
      "player_attributes.strength",
      "player_attributes.vision",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more male patients with creatinine not within the normal range than female? True or False? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.symptoms , examination.lac , examination.* | laboratory : laboratory.cre , laboratory.cpk , laboratory.id , laboratory.date , laboratory.pic , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.*",
      "laboratory.cre",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? | comments : comments.score , comments.userid , comments.postid , comments.id , comments.text , comments.* | users : users.upvotes , users.downvotes , users.id , users.views , users.reputation , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userid",
      "comments.postid",
      "comments.id",
      "comments.text",
      "comments.*",
      "users.upvotes",
      "users.downvotes",
      "users.id",
      "users.views",
      "users.reputation",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM | comments : comments.score , comments.creationdate , comments.postid , comments.userid , comments.id , comments.* | posts : posts.creaiondate , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.creationdate",
      "comments.postid",
      "comments.userid",
      "comments.id",
      "comments.*",
      "posts.creaiondate",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Please list the superhero names of all the superheroes that have blue eyes and blond hair. | superhero : superhero.superhero_name , superhero.eye_colour_id , superhero.full_name , superhero.hair_colour_id , superhero.gender_id , superhero.* | colour : colour.colour ( Blond , Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all carcinogenic molecules and their elements. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many unknown power cards contain info about the triggered ability | cards : cards.power , cards.name , cards.id , cards.life , cards.uuid , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.id",
      "cards.life",
      "cards.uuid",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many students of the Student_Club have attended the event \"Women's Soccer\"? | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | member : member.link_to_major , member.member_id , member.zip , member.position , member.first_name , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.position",
      "member.first_name",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.publisher_id , superhero.id , superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "In 2012, who had the least consumption in LAM? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.segment ( LAM ) , customers.customerid , customers.currency , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.segment",
      "customers.customerid",
      "customers.currency",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which post has the highest score? Please give its id and title's name. | posts : posts.title , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | comments : comments.postid , comments.score , comments.id , comments.text , comments.userid , comments.* | posthistory : posthistory.comment ( Title , title ) , posthistory.postid , posthistory.id , posthistory.userid , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "comments.postid",
      "comments.score",
      "comments.id",
      "comments.text",
      "comments.userid",
      "comments.*",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. | patient : patient.sex , patient.admission , patient.birthday , patient.id , patient.diagnosis , patient.* | laboratory : laboratory.rbc , laboratory.hgb , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis , examination.thrombosis , examination.symptoms , examination.id , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.id",
      "patient.diagnosis",
      "patient.*",
      "laboratory.rbc",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.id",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the percentage difference of student badges given during 2010 and 2011? | badges : badges.date , badges.userid , badges.name ( Student ) , badges.id , badges.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posts : posts.id , posts.score , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.date",
      "badges.userid",
      "badges.name",
      "badges.id",
      "badges.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posts.id",
      "posts.score",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. | superhero : superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.alignment_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | alignment : alignment.alignment ( Good ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.alignment_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many bonds which involved atom 12 does molecule TR009 have? | bond : bond.molecule_id ( TR009 ) , bond.bond_id , bond.bond_type , bond.* | atom : atom.atom_id , atom.molecule_id ( TR009 ) , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id ( TR009 ) , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? | player_attributes : player_attributes.overall_rating , player_attributes.attacking_work_rate , player_attributes.defensive_work_rate , player_attributes.potential , player_attributes.player_api_id , player_attributes.* | match : match.id , match.season , match.stage , match.date , match.home_team_api_id , match.* | player : player.player_api_id , player.player_fifa_api_id , player.id , player.player_name , player.birthday , player.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.attacking_work_rate",
      "player_attributes.defensive_work_rate",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.player_name",
      "player.birthday",
      "player.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the difference in the number of crimes committed in East and North Bohemia in 1996? | district : district.a16 , district.a3 ( north Bohemia ) , district.a15 , district.district_id , district.a2 , district.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | client : client.gender , client.client_id , client.district_id , client.birth_date , client.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a16",
      "district.a3",
      "district.a15",
      "district.district_id",
      "district.a2",
      "district.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? | patient : patient.sex , patient.id , patient.birthday , patient.diagnosis , patient.admission , patient.* | examination : examination.acl iga , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.diagnosis",
      "patient.admission",
      "patient.*",
      "examination.acl iga",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes. | comments : comments.score , comments.userdisplayname , comments.userid , comments.id , comments.postid , comments.* | users : users.downvotes , users.upvotes , users.displayname , users.id , users.views , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userdisplayname",
      "comments.userid",
      "comments.id",
      "comments.postid",
      "comments.*",
      "users.downvotes",
      "users.upvotes",
      "users.displayname",
      "users.id",
      "users.views",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which customers, paying in CZK, consumed the most gas in 2011? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | transactions_1k : transactions_1k.date , transactions_1k.time , transactions_1k.amount , transactions_1k.price , transactions_1k.customerid , transactions_1k.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "transactions_1k.date",
      "transactions_1k.time",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.customerid",
      "transactions_1k.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which customers, paying in CZK, consumed the most gas in 2011? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | transactions_1k : transactions_1k.date , transactions_1k.time , transactions_1k.amount , transactions_1k.price , transactions_1k.customerid , transactions_1k.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "transactions_1k.date",
      "transactions_1k.time",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.customerid",
      "transactions_1k.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? | races : races.name ( Austrian Grand Prix ) , races.date , races.raceid , races.time , races.circuitid , races.* | pitstops : pitstops.duration , pitstops.raceid , pitstops.stop , pitstops.lap , pitstops.time , pitstops.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.laps , results.raceid , results.time , results.driverid , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.date",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "pitstops.duration",
      "pitstops.raceid",
      "pitstops.stop",
      "pitstops.lap",
      "pitstops.time",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.laps",
      "results.raceid",
      "results.time",
      "results.driverid",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average time in seconds of champion for each year, before year 1975? | races : races.year , races.time , races.date , races.raceid , races.circuitid , races.* | laptimes : laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.* | results : results.time , results.milliseconds , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.time",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.*",
      "results.time",
      "results.milliseconds",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the percentage of female patient were born after 1930? | patient : patient.sex , patient.birthday , patient.first date , patient.id , patient.description , patient.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.ana pattern , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.gpt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.description",
      "patient.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.gpt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the toxicology and label of molecule TR060? | molecule : molecule.label , molecule.molecule_id ( TR060 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR060 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR060 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards without power are in French? | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | cards : cards.power , cards.name , cards.uuid , cards.artist , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "cards.power",
      "cards.name",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Find the triple-bonded molecules which are carcinogenic. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. | sets : sets.type ( commander , expansion ) , sets.id , sets.totalsetsize , sets.isonlineonly , sets.isnonfoilonly , sets.* | cards : cards.promotypes , cards.types , cards.subtypes , cards.ispromo , cards.name , cards.* | legalities : legalities.uuid , legalities.id , legalities.status , legalities.format ( commander ) , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.type",
      "sets.id",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.isnonfoilonly",
      "sets.*",
      "cards.promotypes",
      "cards.types",
      "cards.subtypes",
      "cards.ispromo",
      "cards.name",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.status",
      "legalities.format",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. | member : member.last_name , member.first_name , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_description , expense.approved , expense.expense_id , expense.link_to_budget , expense.* | budget : budget.spent , budget.budget_id , budget.amount , budget.category , budget.remaining , budget.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.expense_id",
      "expense.link_to_budget",
      "expense.*",
      "budget.spent",
      "budget.budget_id",
      "budget.amount",
      "budget.category",
      "budget.remaining",
      "budget.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of cards whose language is French among the Story Spotlight cards? | foreign_data : foreign_data.language ( French ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.isstoryspotlight , cards.artist , cards.name , cards.uuid , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.isstoryspotlight",
      "cards.artist",
      "cards.name",
      "cards.uuid",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? | cards : cards.artist ( Aaron Miller , Jeremy Jarvis ) , cards.asciiname , cards.name , cards.uuid , cards.id , cards.* | sets : sets.name ( Coldsnap ) , sets.code , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.asciiname",
      "cards.name",
      "cards.uuid",
      "cards.id",
      "cards.*",
      "sets.name",
      "sets.code",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? | set_translations : set_translations.translation , set_translations.language , set_translations.id , set_translations.setcode , set_translations.* | sets : sets.isonlineonly , sets.id , sets.code , sets.name , sets.block , sets.* | cards : cards.isonlineonly , cards.name , cards.artist , cards.availability , cards.uuid , cards.* | foreign_data : foreign_data.language , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.translation",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.*",
      "sets.isonlineonly",
      "sets.id",
      "sets.code",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.isonlineonly",
      "cards.name",
      "cards.artist",
      "cards.availability",
      "cards.uuid",
      "cards.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Ig A level came to the hospital after 1990/1/1? | patient : patient.first date , patient.admission , patient.id , patient.diagnosis , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.examination date , examination.id , examination.lac , examination.thrombosis , examination.* | laboratory : laboratory.date , laboratory.iga , laboratory.igg , laboratory.igm , laboratory.id , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.lac",
      "examination.thrombosis",
      "examination.*",
      "laboratory.date",
      "laboratory.iga",
      "laboratory.igg",
      "laboratory.igm",
      "laboratory.id",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. | superhero : superhero.eye_colour_id , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.hair_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.hair_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements for bond id TR001_10_11? | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.milliseconds , laptimes.* | races : races.raceid , races.year , races.name , races.round , races.time , races.* | results : results.fastestlaptime , results.constructorid , results.driverid , results.raceid , results.time , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.raceid",
      "races.year",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.driverid",
      "results.raceid",
      "results.time",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.ra , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.ra",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? | laboratory : laboratory.gpt , laboratory.date , laboratory.got , laboratory.id , laboratory.pic , laboratory.* | patient : patient.sex , patient.id , patient.birthday , patient.admission , patient.description , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.gpt",
      "laboratory.date",
      "laboratory.got",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.*",
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.description",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? | patient : patient.birthday , patient.first date , patient.id , patient.sex , patient.description , patient.* | laboratory : laboratory.t-cho , laboratory.date , laboratory.id , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.examination date , examination.id , examination.symptoms , examination.diagnosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.sex",
      "patient.description",
      "patient.*",
      "laboratory.t-cho",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.examination date",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | patient : patient.diagnosis , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.diagnosis , examination.examination date , examination.id , examination.thrombosis , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. | races : races.year , races.circuitid , races.time , races.date , races.raceid , races.* | drivers : drivers.surname ( Hamilton ) , drivers.driverref ( hamilton ) , drivers.driverid , drivers.forename , drivers.code , drivers.* | circuits : circuits.name , circuits.circuitid , circuits.circuitref , circuits.alt , circuits.location , circuits.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.circuitid",
      "races.time",
      "races.date",
      "races.raceid",
      "races.*",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.forename",
      "drivers.code",
      "drivers.*",
      "circuits.name",
      "circuits.circuitid",
      "circuits.circuitref",
      "circuits.alt",
      "circuits.location",
      "circuits.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is reference name of Robert Kubica? | drivers : drivers.surname ( Kubica ) , drivers.driverref ( kubica ) , drivers.forename , drivers.driverid , drivers.dob , drivers.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.milliseconds , laptimes.* | races : races.year , races.raceid , races.name , races.time , races.round , races.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.driverref",
      "drivers.forename",
      "drivers.driverid",
      "drivers.dob",
      "drivers.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.time",
      "races.round",
      "races.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of patients who were born in 1980 and were diagnosed with RA are women? | patient : patient.sex , patient.birthday , patient.diagnosis ( RA ) , patient.first date , patient.id , patient.* | examination : examination.diagnosis ( RA ) , examination.id , examination.symptoms , examination.acl iga , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.acl iga",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes created by George Lucas, identify the percentage of female superheroes. | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( George Lucas ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.superhero_name , superhero.full_name , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of cards whose language is French among the Story Spotlight cards? | foreign_data : foreign_data.language ( French ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.isstoryspotlight , cards.artist , cards.name , cards.uuid , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.isstoryspotlight",
      "cards.artist",
      "cards.name",
      "cards.uuid",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the toxicology and label of molecule TR060? | molecule : molecule.label , molecule.molecule_id ( TR060 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR060 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR060 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Identify the gender of the superhero who has the ability of Phoenix Force. | gender : gender.gender , gender.id , gender.* | superpower : superpower.power_name ( Phoenix Force ) , superpower.id , superpower.* | superhero : superhero.gender_id , superhero.superhero_name ( Phoenix ) , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all carcinogenic molecules and their elements. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.enroll12 , satscores.numtsttakr , satscores.* | schools : schools.streetabr , schools.state , schools.city , schools.zip , schools.street , schools.* | frpm : frpm.low grade , frpm.school name , frpm.cdscode , frpm.high grade , frpm.school code , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numtsttakr",
      "satscores.*",
      "schools.streetabr",
      "schools.state",
      "schools.city",
      "schools.zip",
      "schools.street",
      "schools.*",
      "frpm.low grade",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.high grade",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many percent of female heroes were published by Marvel Comics? | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.publisher_id , superhero.id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules without sulphur element is not having double bond? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. | cards : cards.artist ( Jim Pavelec ) , cards.name , cards.id , cards.uuid , cards.asciiname , cards.* | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.name",
      "cards.id",
      "cards.uuid",
      "cards.asciiname",
      "cards.*",
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR004_8_9 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name chemical elements that form a bond TR001_10_11. | bond : bond.bond_id ( TR001_10_11 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the bond type of TR007_4_19? | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id , bond.* | connected : connected.bond_id ( TR007_4_19 ) , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. | bond : bond.bond_id ( TR001_2_4 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_2_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.time ( 16:25:00 ) , transactions_1k.date , transactions_1k.customerid , transactions_1k.amount , transactions_1k.price , transactions_1k.* | yearmonth : yearmonth.date , yearmonth.customerid , yearmonth.consumption , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.customerid",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.*",
      "yearmonth.date",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? | event : event.event_name , event.location ( 900 E. Washington St. ) , event.type ( Social ) , event.event_id , event.status , event.* | member : member.position ( President , Vice President ) , member.member_id , member.zip , member.first_name , member.email , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | zip_code : zip_code.zip_code , zip_code.city ( Washington ) , zip_code.state ( Washington ) , zip_code.type , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.location",
      "event.type",
      "event.event_id",
      "event.status",
      "event.*",
      "member.position",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.currency ( EUR ) , customers.segment ( LAM ) , customers.customerid , customers.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.currency",
      "customers.segment",
      "customers.customerid",
      "customers.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? | client : client.gender , client.birth_date , client.client_id , client.district_id , client.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.client_id , disp.type , disp.disp_id , disp.* | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.birth_date",
      "client.client_id",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher's name of Blue Beetle II? | publisher : publisher.publisher_name , publisher.id , publisher.* | superhero : superhero.superhero_name ( Beetle , Blue Beetle ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. | team : team.team_short_name , team.team_long_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.buildupplaydribbling , team_attributes.buildupplayspeed , team_attributes.buildupplaypassing , team_attributes.buildupplaydribblingclass , team_attributes.buildupplayspeedclass , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.acceleration , player_attributes.agility , player_attributes.reactions , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_long_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribbling",
      "team_attributes.buildupplayspeed",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.acceleration",
      "player_attributes.agility",
      "player_attributes.reactions",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Please list the ID of the patient whose RF is normal and who is older than 60. | patient : patient.id , patient.birthday , patient.sex , patient.diagnosis , patient.description , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.lac , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.diagnosis",
      "patient.description",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.lac",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. | molecule : molecule.label , molecule.molecule_id ( TR006 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR006 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR006 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Please list the ID of the patient whose RF is normal and who is older than 60. | patient : patient.id , patient.birthday , patient.sex , patient.diagnosis , patient.description , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.lac , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.diagnosis",
      "patient.description",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.lac",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. | molecule : molecule.label , molecule.molecule_id ( TR006 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR006 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR006 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the cost of posters for 'September Speaker' event. | expense : expense.cost , expense.expense_description ( Posters ) , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_name ( September Speaker ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Costa ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? | users : users.displayname ( Harvey Motulsky , Noah Snyder ) , users.views , users.upvotes , users.id , users.reputation , users.* | posts : posts.owneruserid , posts.title , posts.id , posts.score , posts.favoritecount , posts.* | posthistory : posthistory.userid , posthistory.postid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.displayname",
      "users.views",
      "users.upvotes",
      "users.id",
      "users.reputation",
      "users.*",
      "posts.owneruserid",
      "posts.title",
      "posts.id",
      "posts.score",
      "posts.favoritecount",
      "posts.*",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average time in seconds of champion for each year, before year 1975? | races : races.year , races.time , races.date , races.raceid , races.circuitid , races.* | laptimes : laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.* | results : results.time , results.milliseconds , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.time",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.*",
      "results.time",
      "results.milliseconds",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. | sets : sets.type ( commander , expansion ) , sets.id , sets.totalsetsize , sets.isonlineonly , sets.isnonfoilonly , sets.* | cards : cards.promotypes , cards.types , cards.subtypes , cards.ispromo , cards.name , cards.* | legalities : legalities.uuid , legalities.id , legalities.status , legalities.format ( commander ) , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.type",
      "sets.id",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.isnonfoilonly",
      "sets.*",
      "cards.promotypes",
      "cards.types",
      "cards.subtypes",
      "cards.ispromo",
      "cards.name",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.status",
      "legalities.format",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. | player : player.player_name , player.birthday , player.id , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.birthday",
      "player.id",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which countries have zip codes with post office boxes? | zip_code : zip_code.county , zip_code.zip_code , zip_code.city ( Post ) , zip_code.state , zip_code.type , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.link_to_event , budget.* | member : member.zip , member.member_id , member.email , member.position , member.phone , member.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.county",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.link_to_event",
      "budget.*",
      "member.zip",
      "member.member_id",
      "member.email",
      "member.position",
      "member.phone",
      "member.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. | superhero : superhero.eye_colour_id , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.hair_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.hair_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70? | player : player.height , player.weight , player.birthday , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.strength , player_attributes.overall_rating , player_attributes.potential , player_attributes.player_api_id , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.height",
      "player.weight",
      "player.birthday",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.strength",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? | team : team.team_long_name ( Hannover 96 ) , team.team_short_name , team.team_api_id , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.defenceaggressionclass , team_attributes.defenceaggression , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.defenceaggressionclass",
      "team_attributes.defenceaggression",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. | player : player.player_name , player.birthday , player.id , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.birthday",
      "player.id",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down Ajax's superpowers. | superpower : superpower.power_name , superpower.id , superpower.* | superhero : superhero.superhero_name ( Ajax ) , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.power_id , hero_power.hero_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.power_id",
      "hero_power.hero_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. | frpm : frpm.charter funding type ( Locally funded ) , frpm.school name , frpm.enrollment (k-12) , frpm.school type , frpm.free meal count (ages 5-17) , frpm.* | schools : schools.fundingtype ( Locally funded ) , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( K-12 ) , schools.soctype , schools.* | satscores : satscores.sname , satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.charter funding type",
      "frpm.school name",
      "frpm.enrollment (k-12)",
      "frpm.school type",
      "frpm.free meal count (ages 5-17)",
      "frpm.*",
      "schools.fundingtype",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.soctype",
      "schools.*",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? | atom : atom.element , atom.atom_id ( TR004_7 ) , atom.molecule_id , atom.* | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? | patient : patient.sex , patient.diagnosis ( SLE ) , patient.id , patient.birthday , patient.admission , patient.* | laboratory : laboratory.alb , laboratory.pt , laboratory.hgb , laboratory.glu , laboratory.hct , laboratory.* | examination : examination.diagnosis ( SLE ) , examination.lac , examination.kct , examination.symptoms , examination.rvvt , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.*",
      "laboratory.alb",
      "laboratory.pt",
      "laboratory.hgb",
      "laboratory.glu",
      "laboratory.hct",
      "laboratory.*",
      "examination.diagnosis",
      "examination.lac",
      "examination.kct",
      "examination.symptoms",
      "examination.rvvt",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers. | users : users.age , users.id , users.reputation , users.location , users.views , users.* | badges : badges.name ( Organizer ) , badges.userid , badges.date , badges.id , badges.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.id , posthistory.userid , posthistory.text , posthistory.comment , posthistory.postid , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.age",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Please list the superhero names of all the superheroes that have blue eyes and blond hair. | superhero : superhero.superhero_name , superhero.eye_colour_id , superhero.full_name , superhero.hair_colour_id , superhero.gender_id , superhero.* | colour : colour.colour ( Blond , Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. | superhero : superhero.eye_colour_id , superhero.publisher_id , superhero.skin_colour_id , superhero.hair_colour_id , superhero.superhero_name , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.publisher_id",
      "superhero.skin_colour_id",
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many bonds which involved atom 12 does molecule TR009 have? | bond : bond.molecule_id ( TR009 ) , bond.bond_id , bond.bond_type , bond.* | atom : atom.atom_id , atom.molecule_id ( TR009 ) , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id ( TR009 ) , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.cdscode , frpm.school code , frpm.free meal count (k-12) , frpm.* | satscores : satscores.enroll12 , satscores.sname , satscores.cds , satscores.numge1500 , satscores.dname , satscores.* | schools : schools.school , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.enroll12",
      "satscores.sname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.*",
      "schools.school",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of cards whose language is French among the Story Spotlight cards? | foreign_data : foreign_data.language ( French ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.isstoryspotlight , cards.artist , cards.name , cards.uuid , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.isstoryspotlight",
      "cards.artist",
      "cards.name",
      "cards.uuid",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Describe the display name of the parent ID for child post with the highest score. | posts : posts.score , posts.ownerdisplayname , posts.parentid , posts.id , posts.posttypeid , posts.* | users : users.displayname ( name ) , users.id , users.reputation , users.location , users.views , users.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.ownerdisplayname",
      "posts.parentid",
      "posts.id",
      "posts.posttypeid",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the difference in the percentage of members in New Jersey and Vermont. | zip_code : zip_code.state ( New Jersey , Vermont ) , zip_code.city ( Jersey , Vermont ) , zip_code.zip_code , zip_code.short_state , zip_code.county , zip_code.* | member : member.member_id , member.zip , member.link_to_major , member.email , member.phone , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.state",
      "zip_code.city",
      "zip_code.zip_code",
      "zip_code.short_state",
      "zip_code.county",
      "zip_code.*",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.email",
      "member.phone",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.publisher_id , superhero.id , superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? | races : races.name ( Spanish Grand Prix ) , races.year , races.circuitid , races.raceid , races.date , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.constructorid , results.statusid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.* | drivers : drivers.driverid , drivers.surname ( Speed ) , drivers.driverref ( driver , speed ) , drivers.number , drivers.code , drivers.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.circuitid",
      "races.raceid",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.constructorid",
      "results.statusid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*",
      "drivers.driverid",
      "drivers.surname",
      "drivers.driverref",
      "drivers.number",
      "drivers.code",
      "drivers.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last names of students under the Elementary Education major and include their phone numbers. | member : member.last_name , member.phone , member.link_to_major , member.member_id , member.zip , member.* | major : major.major_name ( Elementary Education ) , major.major_id , major.department , major.college , major.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.phone",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.*",
      "major.major_name",
      "major.major_id",
      "major.department",
      "major.college",
      "major.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average time in seconds of champion for each year, before year 1975? | races : races.year , races.time , races.date , races.raceid , races.circuitid , races.* | laptimes : laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.* | results : results.time , results.milliseconds , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.time",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.*",
      "results.time",
      "results.milliseconds",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 , district.* | order : order.order_id , order.account_id , order.amount , order.account_to , order.k_symbol , order.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "order.order_id",
      "order.account_id",
      "order.amount",
      "order.account_to",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. | atom : atom.element , atom.molecule_id ( TR000 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR000 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR000 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the elements of all the triple bonds. | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. | schools : schools.gsoffered , schools.city , schools.magnet , schools.gsserved , schools.cdscode , schools.* | frpm : frpm.nslp provision status ( Multiple Provision Types , Provision 3 ) , frpm.cdscode , frpm.school type , frpm.school name , frpm.irc , frpm.* | satscores : satscores.cds , satscores.numge1500 , satscores.rtype , satscores.sname , satscores.dname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.gsoffered",
      "schools.city",
      "schools.magnet",
      "schools.gsserved",
      "schools.cdscode",
      "schools.*",
      "frpm.nslp provision status",
      "frpm.cdscode",
      "frpm.school type",
      "frpm.school name",
      "frpm.irc",
      "frpm.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes created by George Lucas, identify the percentage of female superheroes. | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( George Lucas ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.superhero_name , superhero.full_name , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? | patient : patient.sex , patient.id , patient.diagnosis , patient.birthday , patient.description , patient.* | laboratory : laboratory.fg , laboratory.wbc , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.fg",
      "laboratory.wbc",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of blue female superheroes among all female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | colour : colour.colour ( Blue ) , colour.id , colour.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.skin_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.skin_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all carcinogenic molecules and their elements. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Give the name of the league had the most goals in the 2016 season? | league : league.name , league.id , league.country_id , league.* | match : match.season , match.league_id , match.home_team_goal , match.away_team_goal , match.id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.balance , player_attributes.strength , player_attributes.vision , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.balance",
      "player_attributes.strength",
      "player_attributes.vision",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.c4 , laboratory.c3 , laboratory.pt , laboratory.id , laboratory.rbc , laboratory.* | examination : examination.thrombosis , examination.diagnosis ( Normal ) , examination.lac , examination.id , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.c4",
      "laboratory.c3",
      "laboratory.pt",
      "laboratory.id",
      "laboratory.rbc",
      "laboratory.*",
      "examination.thrombosis",
      "examination.diagnosis",
      "examination.lac",
      "examination.id",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many white bordered cards are powerful? | cards : cards.power , cards.bordercolor ( white ) , cards.uuid , cards.id , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.bordercolor",
      "cards.uuid",
      "cards.id",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many bonds which involved atom 12 does molecule TR009 have? | bond : bond.molecule_id ( TR009 ) , bond.bond_id , bond.bond_type , bond.* | atom : atom.atom_id , atom.molecule_id ( TR009 ) , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id ( TR009 ) , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment ( KAM , LAM ) , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal RF don't have thrombosis? | examination : examination.diagnosis ( Normal , thrombosis ) , examination.thrombosis , examination.id , examination.symptoms , examination.kct , examination.* | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.glu , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.tg , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? | races : races.name ( Spanish Grand Prix ) , races.year , races.circuitid , races.raceid , races.date , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.constructorid , results.statusid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.* | drivers : drivers.driverid , drivers.surname ( Speed ) , drivers.driverref ( driver , speed ) , drivers.number , drivers.code , drivers.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.circuitid",
      "races.raceid",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.constructorid",
      "results.statusid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*",
      "drivers.driverid",
      "drivers.surname",
      "drivers.driverref",
      "drivers.number",
      "drivers.code",
      "drivers.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Mention the category of events which were held at MU 215. | event : event.location ( MU 215 ) , event.type , event.event_name , event.event_id , event.event_date , event.* | budget : budget.category , budget.budget_id , budget.spent , budget.remaining , budget.amount , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.location",
      "event.type",
      "event.event_name",
      "event.event_id",
      "event.event_date",
      "event.*",
      "budget.category",
      "budget.budget_id",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. | races : races.time , races.name , races.date , races.year , races.raceid , races.* | drivers : drivers.dob , drivers.driverid , drivers.surname ( Driver ) , drivers.number , drivers.code , drivers.* | qualifying : qualifying.raceid , qualifying.driverid , qualifying.q1 , qualifying.qualifyid , qualifying.q3 , qualifying.* | results : results.driverid , results.raceid , results.number , results.grid , results.position , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.time",
      "races.name",
      "races.date",
      "races.year",
      "races.raceid",
      "races.*",
      "drivers.dob",
      "drivers.driverid",
      "drivers.surname",
      "drivers.number",
      "drivers.code",
      "drivers.*",
      "qualifying.raceid",
      "qualifying.driverid",
      "qualifying.q1",
      "qualifying.qualifyid",
      "qualifying.q3",
      "qualifying.*",
      "results.driverid",
      "results.raceid",
      "results.number",
      "results.grid",
      "results.position",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? | patient : patient.admission , patient.id , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.rnp , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.rnp",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of patients who were born in 1980 and were diagnosed with RA are women? | patient : patient.sex , patient.birthday , patient.diagnosis ( RA ) , patient.first date , patient.id , patient.* | examination : examination.diagnosis ( RA ) , examination.id , examination.symptoms , examination.acl iga , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.acl iga",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. | district : district.a11 , district.district_id , district.a3 , district.a2 , district.a8 , district.* | loan : loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.status , loan.* | disp : disp.type , disp.account_id , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a11",
      "district.district_id",
      "district.a3",
      "district.a2",
      "district.a8",
      "district.*",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? | cards : cards.convertedmanacost , cards.power , cards.name , cards.manacost , cards.isonlineonly , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.power",
      "cards.name",
      "cards.manacost",
      "cards.isonlineonly",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? | schools : schools.county ( Los Angeles ) , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.* | frpm : frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.cname ( Los Angeles ) , satscores.cds , satscores.numge1500 , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.cname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the most durability published by Dark Horse Comics? | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | superpower : superpower.power_name ( Durability ) , superpower.id , superpower.* | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.publisher_id , superhero.id , superhero.* | attribute : attribute.attribute_name ( Durability ) , attribute.id , attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.*",
      "attribute.attribute_name",
      "attribute.id",
      "attribute.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 , district.* | order : order.order_id , order.account_id , order.amount , order.account_to , order.k_symbol , order.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "order.order_id",
      "order.account_id",
      "order.amount",
      "order.account_to",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM | comments : comments.score , comments.creationdate , comments.postid , comments.userid , comments.id , comments.* | posts : posts.creaiondate , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.creationdate",
      "comments.postid",
      "comments.userid",
      "comments.id",
      "comments.*",
      "posts.creaiondate",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? | patient : patient.id , patient.admission , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.cre , laboratory.sc170 , laboratory.cpk , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.cre",
      "laboratory.sc170",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. | frpm : frpm.charter funding type ( Locally funded ) , frpm.school name , frpm.enrollment (k-12) , frpm.school type , frpm.free meal count (ages 5-17) , frpm.* | schools : schools.fundingtype ( Locally funded ) , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( K-12 ) , schools.soctype , schools.* | satscores : satscores.sname , satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.charter funding type",
      "frpm.school name",
      "frpm.enrollment (k-12)",
      "frpm.school type",
      "frpm.free meal count (ages 5-17)",
      "frpm.*",
      "schools.fundingtype",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.soctype",
      "schools.*",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes created by George Lucas, identify the percentage of female superheroes. | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( George Lucas ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.superhero_name , superhero.full_name , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher's name of Blue Beetle II? | publisher : publisher.publisher_name , publisher.id , publisher.* | superhero : superhero.superhero_name ( Beetle , Blue Beetle ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? | laptimes : laptimes.milliseconds , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.* | races : races.year , races.raceid , races.name , races.round , races.time , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.fastestlaptime , results.constructorid , results.milliseconds , results.raceid , results.fastestlap , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.milliseconds",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.milliseconds",
      "results.raceid",
      "results.fastestlap",
      "results.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR004_8_9 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n? | player : player.player_name ( Aaron Appindangoye , Abdou Diallo ) , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.ball_control , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.ball_control",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many white bordered cards are powerful? | cards : cards.power , cards.bordercolor ( white ) , cards.uuid , cards.id , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.bordercolor",
      "cards.uuid",
      "cards.id",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. | laboratory : laboratory.date , laboratory.t-bil , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.id , patient.admission , patient.first date , patient.diagnosis , patient.sex , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.examination date , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.id",
      "patient.admission",
      "patient.first date",
      "patient.diagnosis",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.examination date",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.ra , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.ra",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the ratio of male to female patients among all those with abnormal uric acid counts? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.superhero_name , superhero.gender_id , superhero.full_name , superhero.publisher_id , superhero.* | superpower : superpower.id , superpower.power_name , superpower.* | hero_attribute : hero_attribute.attribute_value , hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.*",
      "superpower.id",
      "superpower.power_name",
      "superpower.*",
      "hero_attribute.attribute_value",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | expense : expense.approved , expense.link_to_member , expense.expense_id , expense.cost , expense.link_to_budget , expense.* | member : member.member_id , member.zip , member.first_name , member.last_name , member.link_to_major , member.* | event : event.event_date , event.event_id , event.status , event.type , event.notes , event.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.cost",
      "expense.link_to_budget",
      "expense.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.last_name",
      "member.link_to_major",
      "member.*",
      "event.event_date",
      "event.event_id",
      "event.status",
      "event.type",
      "event.notes",
      "event.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. | drivers : drivers.dob , drivers.nationality ( German ) , drivers.driverid , drivers.surname , drivers.forename , drivers.* | pitstops : pitstops.duration , pitstops.stop , pitstops.driverid , pitstops.milliseconds , pitstops.raceid , pitstops.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.position , laptimes.* | driverstandings : driverstandings.driverid , driverstandings.raceid , driverstandings.points , driverstandings.position , driverstandings.wins , driverstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.surname",
      "drivers.forename",
      "drivers.*",
      "pitstops.duration",
      "pitstops.stop",
      "pitstops.driverid",
      "pitstops.milliseconds",
      "pitstops.raceid",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.position",
      "laptimes.*",
      "driverstandings.driverid",
      "driverstandings.raceid",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.wins",
      "driverstandings.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which user added a bounty amount of 50 to the post title mentioning variance? | posts : posts.title , posts.owneruserid , posts.id , posts.tags , posts.score , posts.* | votes : votes.bountyamount , votes.userid , votes.postid , votes.id , votes.creationdate , votes.* | posthistory : posthistory.comment ( Title , variance ) , posthistory.userid , posthistory.postid , posthistory.userdisplayname ( User ) , posthistory.id , posthistory.* | badges : badges.name ( variance ) , badges.userid , badges.id , badges.date , badges.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.owneruserid",
      "posts.id",
      "posts.tags",
      "posts.score",
      "posts.*",
      "votes.bountyamount",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.creationdate",
      "votes.*",
      "posthistory.comment",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.userdisplayname",
      "posthistory.id",
      "posthistory.*",
      "badges.name",
      "badges.userid",
      "badges.id",
      "badges.date",
      "badges.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name chemical elements that form a bond TR001_10_11. | bond : bond.bond_id ( TR001_10_11 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. | transactions_1k : transactions_1k.time , transactions_1k.date , transactions_1k.amount , transactions_1k.price , transactions_1k.transactionid , transactions_1k.* | gasstations : gasstations.chainid , gasstations.segment , gasstations.country , gasstations.gasstationid , gasstations.* | yearmonth : yearmonth.customerid , yearmonth.date , yearmonth.consumption , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.*",
    "output_sequence": " | ",
    "tc_original": [
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.transactionid",
      "transactions_1k.*",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.*",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. | member : member.first_name , member.last_name , member.member_id , member.zip , member.email , member.* | income : income.date_received , income.amount , income.income_id , income.source , income.notes , income.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "income.date_received",
      "income.amount",
      "income.income_id",
      "income.source",
      "income.notes",
      "income.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? | patient : patient.diagnosis ( SLE ) , patient.first date , patient.admission , patient.id , patient.sex , patient.* | examination : examination.diagnosis ( SLE ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "When was the first time did Kevin Constant have his highest crossing score? Give the date. | player : player.player_name ( Kevin Constant ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.player_api_id , player_attributes.overall_rating , player_attributes.potential , player_attributes.* | team_attributes : team_attributes.chancecreationcrossingclass , team_attributes.date , team_attributes.id , team_attributes.chancecreationcrossing , team_attributes.team_fifa_api_id , team_attributes.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.*",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.date",
      "team_attributes.id",
      "team_attributes.chancecreationcrossing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. | expense : expense.cost , expense.expense_date , expense.expense_description ( Pizza ) , expense.expense_id , expense.approved , expense.* | event : event.event_name , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city ( Hundred ) , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_date",
      "expense.expense_description",
      "expense.expense_id",
      "expense.approved",
      "expense.*",
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.time ( 16:25:00 ) , transactions_1k.date , transactions_1k.customerid , transactions_1k.amount , transactions_1k.price , transactions_1k.* | yearmonth : yearmonth.date , yearmonth.customerid , yearmonth.consumption , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.customerid",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.*",
      "yearmonth.date",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. | player : player.player_name , player.birthday , player.id , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.birthday",
      "player.id",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height of all neutral superheroes. | superhero : superhero.height_cm , superhero.alignment_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.* | alignment : alignment.alignment ( Neutral ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.alignment_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height of all neutral superheroes. | superhero : superhero.height_cm , superhero.alignment_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.* | alignment : alignment.alignment ( Neutral ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.alignment_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. | player : player.player_name , player.height , player.player_api_id , player.id , player.weight , player.* | player_attributes : player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.height",
      "player.player_api_id",
      "player.id",
      "player.weight",
      "player.*",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? | cards : cards.name ( Tendo Ice Bridge ) , cards.isonlineonly , cards.facename ( Ice ) , cards.uuid , cards.originalreleasedate , cards.* | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.name , foreign_data.id , foreign_data.text , foreign_data.* | sets : sets.name , sets.isonlineonly , sets.code ( ICE ) , sets.id , sets.block , sets.* | set_translations : set_translations.language ( French ) , set_translations.id , set_translations.setcode ( ICE ) , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.uuid",
      "cards.originalreleasedate",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.name",
      "foreign_data.id",
      "foreign_data.text",
      "foreign_data.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.block",
      "sets.*",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes. | comments : comments.score , comments.userdisplayname , comments.userid , comments.id , comments.postid , comments.* | users : users.downvotes , users.upvotes , users.displayname , users.id , users.views , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userdisplayname",
      "comments.userid",
      "comments.id",
      "comments.postid",
      "comments.*",
      "users.downvotes",
      "users.upvotes",
      "users.displayname",
      "users.id",
      "users.views",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? | comments : comments.score , comments.userid , comments.postid , comments.id , comments.text , comments.* | users : users.upvotes , users.downvotes , users.id , users.views , users.reputation , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userid",
      "comments.postid",
      "comments.id",
      "comments.text",
      "comments.*",
      "users.upvotes",
      "users.downvotes",
      "users.id",
      "users.views",
      "users.reputation",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the heights of the heroes whose eye colours are amber. | superhero : superhero.height_cm , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Amber ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.publisher_id , superhero.gender_id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the percentage difference of student badges given during 2010 and 2011? | badges : badges.date , badges.userid , badges.name ( Student ) , badges.id , badges.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posts : posts.id , posts.score , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.date",
      "badges.userid",
      "badges.name",
      "badges.id",
      "badges.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posts.id",
      "posts.score",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards with format commander and legal status do not have a content warning? | legalities : legalities.status ( Legal ) , legalities.format ( commander ) , legalities.id , legalities.uuid , legalities.* | cards : cards.hascontentwarning , cards.uuid , cards.name ( Warning ) , cards.isonlineonly , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.status",
      "legalities.format",
      "legalities.id",
      "legalities.uuid",
      "legalities.*",
      "cards.hascontentwarning",
      "cards.uuid",
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. | district : district.a11 , district.district_id , district.a3 , district.a2 , district.a8 , district.* | loan : loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.status , loan.* | disp : disp.type , disp.account_id , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a11",
      "district.district_id",
      "district.a3",
      "district.a2",
      "district.a8",
      "district.*",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of patients who were born in 1980 and were diagnosed with RA are women? | patient : patient.sex , patient.birthday , patient.diagnosis ( RA ) , patient.first date , patient.id , patient.* | examination : examination.diagnosis ( RA ) , examination.id , examination.symptoms , examination.acl iga , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.acl iga",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. | superhero : superhero.eye_colour_id , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.hair_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.hair_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the bad superheroes, what is the percentage of female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | alignment : alignment.alignment ( Bad ) , alignment.id , alignment.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Calculate the average home team goal in the 2010/2011 season in the country of Poland. | country : country.name ( Poland ) , country.id , country.* | match : match.season ( 2010/2011 ) , match.home_team_goal , match.home_team_api_id , match.away_team_api_id , match.country_id , match.* | league : league.id , league.country_id , league.name , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "match.season",
      "match.home_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.country_id",
      "match.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. | player : player.player_name , player.height , player.player_api_id , player.id , player.weight , player.* | player_attributes : player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.height",
      "player.player_api_id",
      "player.id",
      "player.weight",
      "player.*",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. | laboratory : laboratory.date , laboratory.t-bil , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.id , patient.admission , patient.first date , patient.diagnosis , patient.sex , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.examination date , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.id",
      "patient.admission",
      "patient.first date",
      "patient.diagnosis",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.examination date",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? | races : races.year , races.name , races.raceid , races.round , races.circuitid , races.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.position , laptimes.* | results : results.fastestlaptime , results.driverid , results.raceid , results.laps , results.rank , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.round",
      "races.circuitid",
      "races.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.position",
      "laptimes.*",
      "results.fastestlaptime",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.rank",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. | superhero : superhero.eye_colour_id , superhero.publisher_id , superhero.skin_colour_id , superhero.hair_colour_id , superhero.superhero_name , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.publisher_id",
      "superhero.skin_colour_id",
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? | patient : patient.sex , patient.diagnosis ( PSS ) , patient.id , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( PSS ) , examination.id , examination.symptoms , examination.ana pattern , examination.thrombosis , examination.* | laboratory : laboratory.crp ( 2+ ) , laboratory.cre , laboratory.ra ( 2+ ) , laboratory.cpk , laboratory.t-bil , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.thrombosis",
      "examination.*",
      "laboratory.crp",
      "laboratory.cre",
      "laboratory.ra",
      "laboratory.cpk",
      "laboratory.t-bil",
      "laboratory.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.price , transactions_1k.amount , transactions_1k.customerid , transactions_1k.productid , transactions_1k.date , transactions_1k.* | yearmonth : yearmonth.customerid , yearmonth.consumption , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.price",
      "transactions_1k.amount",
      "transactions_1k.customerid",
      "transactions_1k.productid",
      "transactions_1k.date",
      "transactions_1k.*",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? | player_attributes : player_attributes.overall_rating , player_attributes.attacking_work_rate , player_attributes.defensive_work_rate , player_attributes.potential , player_attributes.player_api_id , player_attributes.* | match : match.id , match.season , match.stage , match.date , match.home_team_api_id , match.* | player : player.player_api_id , player.player_fifa_api_id , player.id , player.player_name , player.birthday , player.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.attacking_work_rate",
      "player_attributes.defensive_work_rate",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.player_name",
      "player.birthday",
      "player.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.price , transactions_1k.amount , transactions_1k.customerid , transactions_1k.productid , transactions_1k.date , transactions_1k.* | yearmonth : yearmonth.customerid , yearmonth.consumption , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.price",
      "transactions_1k.amount",
      "transactions_1k.customerid",
      "transactions_1k.productid",
      "transactions_1k.date",
      "transactions_1k.*",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards without power are in French? | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | cards : cards.power , cards.name , cards.uuid , cards.artist , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "cards.power",
      "cards.name",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.ra , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.ra",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the badge name that user 'SilentGhost' obtained? | badges : badges.name , badges.userid , badges.date , badges.id , badges.* | users : users.displayname ( SilentGhost , name ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the most durability published by Dark Horse Comics? | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | superpower : superpower.power_name ( Durability ) , superpower.id , superpower.* | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.publisher_id , superhero.id , superhero.* | attribute : attribute.attribute_name ( Durability ) , attribute.id , attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.*",
      "attribute.attribute_name",
      "attribute.id",
      "attribute.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. | member : member.first_name , member.last_name , member.member_id , member.zip , member.email , member.* | income : income.date_received , income.amount , income.income_id , income.source , income.notes , income.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "income.date_received",
      "income.amount",
      "income.income_id",
      "income.source",
      "income.notes",
      "income.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which home team had lost the fewest matches in the 2016 season? | match : match.season , match.home_team_api_id , match.away_team_api_id , match.id , match.stage , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.vision , player_attributes.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.season",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.vision",
      "player_attributes.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? | legalities : legalities.format ( legacy ) , legalities.status , legalities.uuid , legalities.id , legalities.* | cards : cards.frameversion , cards.artist ( D. Alexander Gregory ) , cards.name , cards.hascontentwarning , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.id",
      "legalities.*",
      "cards.frameversion",
      "cards.artist",
      "cards.name",
      "cards.hascontentwarning",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. | races : races.name ( Singapore Grand Prix ) , races.year , races.raceid , races.circuitid , races.date , races.* | constructors : constructors.constructorref , constructors.name , constructors.constructorid , constructors.url , constructors.nationality , constructors.* | driverstandings : driverstandings.raceid , driverstandings.driverid , driverstandings.wins , driverstandings.points , driverstandings.position , driverstandings.* | constructorstandings : constructorstandings.constructorid , constructorstandings.wins , constructorstandings.points , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.raceid",
      "races.circuitid",
      "races.date",
      "races.*",
      "constructors.constructorref",
      "constructors.name",
      "constructors.constructorid",
      "constructors.url",
      "constructors.nationality",
      "constructors.*",
      "driverstandings.raceid",
      "driverstandings.driverid",
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.*",
      "constructorstandings.constructorid",
      "constructorstandings.wins",
      "constructorstandings.points",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.kct , examination.acl igg , examination.rvvt , examination.* | laboratory : laboratory.hgb , laboratory.id , laboratory.t-bil , laboratory.hct , laboratory.tp , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.kct",
      "examination.acl igg",
      "examination.rvvt",
      "examination.*",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.t-bil",
      "laboratory.hct",
      "laboratory.tp",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "In 2012, who had the least consumption in LAM? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.segment ( LAM ) , customers.customerid , customers.currency , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.segment",
      "customers.customerid",
      "customers.currency",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the bad superheroes, what is the percentage of female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | alignment : alignment.alignment ( Bad ) , alignment.id , alignment.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In which years did Lewis Hamilton participate in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.circuitid , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.constructorid , results.raceid , results.driverid , results.number , results.grid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.circuitid",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.constructorid",
      "results.raceid",
      "results.driverid",
      "results.number",
      "results.grid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? | schools : schools.soctype ( Youth Authority Facilities ) , schools.closeddate , schools.county , schools.soc , schools.cdscode , schools.* | frpm : frpm.county name , frpm.school type ( Youth Authority Facilities ) , frpm.county code , frpm.school code , frpm.cdscode , frpm.* | satscores : satscores.numge1500 , satscores.cds , satscores.cname , satscores.rtype , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.soctype",
      "schools.closeddate",
      "schools.county",
      "schools.soc",
      "schools.cdscode",
      "schools.*",
      "frpm.county name",
      "frpm.school type",
      "frpm.county code",
      "frpm.school code",
      "frpm.cdscode",
      "frpm.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.cname",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.description , patient.admission , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.t-cho , laboratory.id , laboratory.date , laboratory.pic , laboratory.sm ( negative ) , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.description",
      "patient.admission",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.t-cho",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. | laboratory : laboratory.date , laboratory.plt , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.birthday , patient.id , patient.sex , patient.admission , patient.diagnosis , patient.* | examination : examination.examination date , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.birthday",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.*",
      "examination.examination date",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. | races : races.year , races.name ( Monaco Grand Prix ) , races.date , races.time , races.circuitid , races.* | constructorresults : constructorresults.points , constructorresults.constructorid , constructorresults.raceid , constructorresults.constructorresultsid , constructorresults.status , constructorresults.* | constructors : constructors.name , constructors.nationality , constructors.constructorref , constructors.constructorid , constructors.url , constructors.* | constructorstandings : constructorstandings.constructorid , constructorstandings.points , constructorstandings.wins , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.time",
      "races.circuitid",
      "races.*",
      "constructorresults.points",
      "constructorresults.constructorid",
      "constructorresults.raceid",
      "constructorresults.constructorresultsid",
      "constructorresults.status",
      "constructorresults.*",
      "constructors.name",
      "constructors.nationality",
      "constructors.constructorref",
      "constructors.constructorid",
      "constructors.url",
      "constructors.*",
      "constructorstandings.constructorid",
      "constructorstandings.points",
      "constructorstandings.wins",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22? | team : team.team_long_name ( Hull City ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationcrossingclass , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.id , team_attributes.* | match : match.date , match.season , match.home_team_api_id , match.id , match.stage , match.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.id , player_attributes.potential , player_attributes.finishing , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.home_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Determine the bond type that is formed in the chemical compound containing element Carbon. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment ( KAM , LAM ) , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Among the members who incurred expenses in more than one event, who paid the most amount? | expense : expense.link_to_member , expense.cost , expense.expense_id , expense.approved , expense.expense_date , expense.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.first_name , member.email , member.link_to_major , member.* | budget : budget.link_to_event , budget.amount , budget.budget_id , budget.category , budget.spent , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.link_to_member",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.expense_date",
      "expense.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.link_to_major",
      "member.*",
      "budget.link_to_event",
      "budget.amount",
      "budget.budget_id",
      "budget.category",
      "budget.spent",
      "budget.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? | client : client.gender , client.district_id , client.client_id , client.birth_date , client.* | district : district.a3 ( south Bohemia ) , district.a4 , district.district_id , district.a5 , district.a2 , district.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.client_id , disp.type , disp.disp_id , disp.account_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.district_id",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.a4",
      "district.district_id",
      "district.a5",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.account_id",
      "disp.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last name of the members of the club that attended the women's soccer event. | member : member.last_name , member.member_id , member.position ( Member ) , member.zip , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Clubb ) , zip_code.type , zip_code.state , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.member_id",
      "member.position",
      "member.zip",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.state",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Calculate the average home team goal in the 2010/2011 season in the country of Poland. | country : country.name ( Poland ) , country.id , country.* | match : match.season ( 2010/2011 ) , match.home_team_goal , match.home_team_api_id , match.away_team_api_id , match.country_id , match.* | league : league.id , league.country_id , league.name , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "match.season",
      "match.home_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.country_id",
      "match.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. | races : races.year , races.raceid , races.time , races.date , races.name , races.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.* | drivers : drivers.nationality ( Japanese ) , drivers.driverid , drivers.driverref ( driver ) , drivers.code , drivers.surname , drivers.* | results : results.driverid , results.laps , results.raceid , results.points , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.time",
      "races.date",
      "races.name",
      "races.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.*",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.code",
      "drivers.surname",
      "drivers.*",
      "results.driverid",
      "results.laps",
      "results.raceid",
      "results.points",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many unknown power cards contain info about the triggered ability | cards : cards.power , cards.name , cards.id , cards.life , cards.uuid , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.id",
      "cards.life",
      "cards.uuid",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20. | team : team.team_long_name ( PEC Zwolle ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationpassingclass , team_attributes.chancecreationpassing , team_attributes.team_fifa_api_id , team_attributes.team_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many atoms with iodine and with sulfur type elements are there in single bond molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many superheroes with blonde hair are there? | colour : colour.colour ( Blond ) , colour.id , colour.* | superhero : superhero.hair_colour_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? | match : match.date , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | league : league.name , league.country_id , league.id , league.* | country : country.name , country.id , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.agility , player_attributes.balance , player_attributes.jumping , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.date",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.jumping",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average time in seconds of champion for each year, before year 1975? | races : races.year , races.time , races.date , races.raceid , races.circuitid , races.* | laptimes : laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.* | results : results.time , results.milliseconds , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.time",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.*",
      "results.time",
      "results.milliseconds",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. | district : district.a11 , district.district_id , district.a3 , district.a2 , district.a8 , district.* | loan : loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.status , loan.* | disp : disp.type , disp.account_id , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a11",
      "district.district_id",
      "district.a3",
      "district.a2",
      "district.a8",
      "district.*",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the hero name and race of Charles Chandler. | race : race.race , race.id , race.* | superhero : superhero.superhero_name , superhero.full_name ( Charles Chandler ) , superhero.race_id , superhero.skin_colour_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "race.race",
      "race.id",
      "race.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Among the members who incurred expenses in more than one event, who paid the most amount? | expense : expense.link_to_member , expense.cost , expense.expense_id , expense.approved , expense.expense_date , expense.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.first_name , member.email , member.link_to_major , member.* | budget : budget.link_to_event , budget.amount , budget.budget_id , budget.category , budget.spent , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.link_to_member",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.expense_date",
      "expense.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.link_to_major",
      "member.*",
      "budget.link_to_event",
      "budget.amount",
      "budget.budget_id",
      "budget.category",
      "budget.spent",
      "budget.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average time in seconds of champion for each year, before year 1975? | races : races.year , races.time , races.date , races.raceid , races.circuitid , races.* | laptimes : laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.* | results : results.time , results.milliseconds , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.time",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.*",
      "results.time",
      "results.milliseconds",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the percentage of female patient were born after 1930? | patient : patient.sex , patient.birthday , patient.first date , patient.id , patient.description , patient.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.ana pattern , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.gpt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.description",
      "patient.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.gpt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What are the player api id of 10 heaviest players? | player : player.weight , player.player_api_id , player.player_fifa_api_id , player.height , player.id , player.* | player_attributes : player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.weight",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.height",
      "player.id",
      "player.*",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which customers, paying in CZK, consumed the most gas in 2011? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | transactions_1k : transactions_1k.date , transactions_1k.time , transactions_1k.amount , transactions_1k.price , transactions_1k.customerid , transactions_1k.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "transactions_1k.date",
      "transactions_1k.time",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.customerid",
      "transactions_1k.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more in-patient or outpatient who were male? What is the deviation in percentage? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.examination date , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.ra , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.ra",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What are the player api id of 10 heaviest players? | player : player.weight , player.player_api_id , player.player_fifa_api_id , player.height , player.id , player.* | player_attributes : player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.weight",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.height",
      "player.id",
      "player.*",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. | player : player.player_name , player.height , player.player_api_id , player.id , player.weight , player.* | player_attributes : player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.height",
      "player.player_api_id",
      "player.id",
      "player.weight",
      "player.*",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the total atoms consisting of the element carbon and hydrogen. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the highest eligible free rate for K-12 students in the schools in Alameda County? | frpm : frpm.county name ( Alameda ) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.free meal count (k-12) , frpm.school code , frpm.* | schools : schools.county ( Alameda ) , schools.gsoffered ( K-12 ) , schools.cdscode , schools.gsserved ( K-12 ) , schools.latitude , schools.* | satscores : satscores.numge1500 , satscores.enroll12 , satscores.cds , satscores.cname ( Alameda ) , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.*",
      "schools.county",
      "schools.gsoffered",
      "schools.cdscode",
      "schools.gsserved",
      "schools.latitude",
      "schools.*",
      "satscores.numge1500",
      "satscores.enroll12",
      "satscores.cds",
      "satscores.cname",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. | races : races.year , races.raceid , races.time , races.date , races.name , races.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.* | drivers : drivers.nationality ( Japanese ) , drivers.driverid , drivers.driverref ( driver ) , drivers.code , drivers.surname , drivers.* | results : results.driverid , results.laps , results.raceid , results.points , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.time",
      "races.date",
      "races.name",
      "races.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.*",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.code",
      "drivers.surname",
      "drivers.*",
      "results.driverid",
      "results.laps",
      "results.raceid",
      "results.points",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the element and bond type included in the molecule with molecule ID of TR002. | bond : bond.bond_type , bond.molecule_id ( TR002 ) , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR002 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR002 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment ( KAM , LAM ) , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver has the fastest lap time? Please give their forenames and surnames. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.code , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.fastestlaptime , results.fastestlapspeed , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down Ajax's superpowers. | superpower : superpower.power_name , superpower.id , superpower.* | superhero : superhero.superhero_name ( Ajax ) , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.power_id , hero_power.hero_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.power_id",
      "hero_power.hero_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many atoms with iodine and with sulfur type elements are there in single bond molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. | patient : patient.sex , patient.id , patient.birthday , patient.description , patient.diagnosis , patient.* | laboratory : laboratory.glu , laboratory.t-cho , laboratory.tg , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.description",
      "patient.diagnosis",
      "patient.*",
      "laboratory.glu",
      "laboratory.t-cho",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Give the full name and contact number of members who had to spend more than average on each expense. | member : member.first_name , member.last_name , member.phone , member.email , member.member_id , member.* | expense : expense.cost , expense.expense_id , expense.approved , expense.link_to_member , expense.expense_description , expense.* | zip_code : zip_code.zip_code , zip_code.city ( Given ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.phone",
      "member.email",
      "member.member_id",
      "member.*",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_description",
      "expense.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? | schools : schools.county ( Los Angeles ) , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.* | frpm : frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.cname ( Los Angeles ) , satscores.cds , satscores.numge1500 , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.cname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? | team : team.team_long_name ( Hannover 96 ) , team.team_short_name , team.team_api_id , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.defenceaggressionclass , team_attributes.defenceaggression , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.defenceaggressionclass",
      "team_attributes.defenceaggression",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Calculate the average home team goal in the 2010/2011 season in the country of Poland. | country : country.name ( Poland ) , country.id , country.* | match : match.season ( 2010/2011 ) , match.home_team_goal , match.home_team_api_id , match.away_team_api_id , match.country_id , match.* | league : league.id , league.country_id , league.name , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "match.season",
      "match.home_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.country_id",
      "match.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. | sets : sets.id , sets.isforeignonly , sets.code , sets.isfoilonly , sets.isonlineonly , sets.* | cards : cards.name ( Foil ) , cards.availability , cards.facename ( Response ) , cards.isonlineonly , cards.setcode , cards.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.isforeignonly",
      "sets.code",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "cards.name",
      "cards.availability",
      "cards.facename",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70? | player : player.height , player.weight , player.birthday , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.strength , player_attributes.overall_rating , player_attributes.potential , player_attributes.player_api_id , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.height",
      "player.weight",
      "player.birthday",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.strength",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.c4 , laboratory.c3 , laboratory.pt , laboratory.id , laboratory.rbc , laboratory.* | examination : examination.thrombosis , examination.diagnosis ( Normal ) , examination.lac , examination.id , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.c4",
      "laboratory.c3",
      "laboratory.pt",
      "laboratory.id",
      "laboratory.rbc",
      "laboratory.*",
      "examination.thrombosis",
      "examination.diagnosis",
      "examination.lac",
      "examination.id",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the score and the link type ID for post ID 395? | posts : posts.score , posts.id , posts.posttypeid , posts.body , posts.title , posts.* | postlinks : postlinks.linktypeid , postlinks.postid , postlinks.relatedpostid , postlinks.id , postlinks.creationdate , postlinks.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment ( link , type ) , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.title",
      "posts.*",
      "postlinks.linktypeid",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.id",
      "postlinks.creationdate",
      "postlinks.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal RF don't have thrombosis? | examination : examination.diagnosis ( Normal , thrombosis ) , examination.thrombosis , examination.id , examination.symptoms , examination.kct , examination.* | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.glu , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many bonds which involved atom 12 does molecule TR009 have? | bond : bond.molecule_id ( TR009 ) , bond.bond_id , bond.bond_type , bond.* | atom : atom.atom_id , atom.molecule_id ( TR009 ) , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id ( TR009 ) , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. | drivers : drivers.dob , drivers.nationality ( German ) , drivers.driverid , drivers.surname , drivers.forename , drivers.* | pitstops : pitstops.duration , pitstops.stop , pitstops.driverid , pitstops.milliseconds , pitstops.raceid , pitstops.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.position , laptimes.* | driverstandings : driverstandings.driverid , driverstandings.raceid , driverstandings.points , driverstandings.position , driverstandings.wins , driverstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.surname",
      "drivers.forename",
      "drivers.*",
      "pitstops.duration",
      "pitstops.stop",
      "pitstops.driverid",
      "pitstops.milliseconds",
      "pitstops.raceid",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.position",
      "laptimes.*",
      "driverstandings.driverid",
      "driverstandings.raceid",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.wins",
      "driverstandings.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of atoms that can not bond with any other atoms. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements for bond id TR001_10_11? | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.publisher_id , superhero.gender_id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? | client : client.gender , client.birth_date , client.client_id , client.district_id , client.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.client_id , disp.type , disp.disp_id , disp.* | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.birth_date",
      "client.client_id",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who have a normal platelet level, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? | races : races.name ( Spanish Grand Prix ) , races.year , races.circuitid , races.raceid , races.date , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.constructorid , results.statusid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.* | drivers : drivers.driverid , drivers.surname ( Speed ) , drivers.driverref ( driver , speed ) , drivers.number , drivers.code , drivers.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.circuitid",
      "races.raceid",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.constructorid",
      "results.statusid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*",
      "drivers.driverid",
      "drivers.surname",
      "drivers.driverref",
      "drivers.number",
      "drivers.code",
      "drivers.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM | comments : comments.score , comments.creationdate , comments.postid , comments.userid , comments.id , comments.* | posts : posts.creaiondate , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.creationdate",
      "comments.postid",
      "comments.userid",
      "comments.id",
      "comments.*",
      "posts.creaiondate",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of incredibly powerful cards in the set Coldsnap? | cards : cards.power , cards.name , cards.isonlineonly , cards.setcode , cards.uuid , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.uuid",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which foot is preferred by Abdou Diallo? | player : player.player_name ( Abdou Diallo ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.preferred_foot , player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.preferred_foot",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the percentage difference of student badges given during 2010 and 2011? | badges : badges.date , badges.userid , badges.name ( Student ) , badges.id , badges.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posts : posts.id , posts.score , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.date",
      "badges.userid",
      "badges.name",
      "badges.id",
      "badges.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posts.id",
      "posts.score",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Describe the display name of the parent ID for child post with the highest score. | posts : posts.score , posts.ownerdisplayname , posts.parentid , posts.id , posts.posttypeid , posts.* | users : users.displayname ( name ) , users.id , users.reputation , users.location , users.views , users.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.ownerdisplayname",
      "posts.parentid",
      "posts.id",
      "posts.posttypeid",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? | client : client.gender , client.birth_date , client.client_id , client.district_id , client.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.client_id , disp.type , disp.disp_id , disp.* | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.birth_date",
      "client.client_id",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? | event : event.event_name , event.location ( 900 E. Washington St. ) , event.type ( Social ) , event.event_id , event.status , event.* | member : member.position ( President , Vice President ) , member.member_id , member.zip , member.first_name , member.email , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | zip_code : zip_code.zip_code , zip_code.city ( Washington ) , zip_code.state ( Washington ) , zip_code.type , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.location",
      "event.type",
      "event.event_id",
      "event.status",
      "event.*",
      "member.position",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | patient : patient.diagnosis , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.diagnosis , examination.examination date , examination.id , examination.thrombosis , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in a double type bond? | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? | loan : loan.date , loan.amount , loan.account_id , loan.duration , loan.loan_id , loan.* | client : client.gender , client.client_id , client.birth_date , client.district_id , client.* | account : account.account_id , account.date , account.district_id , account.frequency , account.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.amount",
      "loan.account_id",
      "loan.duration",
      "loan.loan_id",
      "loan.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.frequency",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the bad superheroes, what is the percentage of female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | alignment : alignment.alignment ( Bad ) , alignment.id , alignment.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. | member : member.last_name , member.first_name , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_description , expense.approved , expense.expense_id , expense.link_to_budget , expense.* | budget : budget.spent , budget.budget_id , budget.amount , budget.category , budget.remaining , budget.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.expense_id",
      "expense.link_to_budget",
      "expense.*",
      "budget.spent",
      "budget.budget_id",
      "budget.amount",
      "budget.category",
      "budget.remaining",
      "budget.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the composition of element chlorine in percentage among the single bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? | races : races.raceid , races.name , races.year , races.round , races.date , races.* | results : results.fastestlapspeed , results.raceid , results.driverid , results.fastestlap , results.statusid , results.* | drivers : drivers.surname ( Speed , di Resta ) , drivers.forename ( Paul ) , drivers.driverref ( resta , speed ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.raceid",
      "races.name",
      "races.year",
      "races.round",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.raceid",
      "results.driverid",
      "results.fastestlap",
      "results.statusid",
      "results.*",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the elements of all the triple bonds. | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the lap record set by Lewis Hamilton in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.date , races.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.driverid , laptimes.time , laptimes.milliseconds , laptimes.* | drivers : drivers.forename ( Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.laps , results.constructorid , results.fastestlap , results.raceid , results.driverid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.date",
      "races.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "drivers.forename",
      "drivers.driverref",
      "drivers.surname",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.laps",
      "results.constructorid",
      "results.fastestlap",
      "results.raceid",
      "results.driverid",
      "results.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Calculate the average home team goal in the 2010/2011 season in the country of Poland. | country : country.name ( Poland ) , country.id , country.* | match : match.season ( 2010/2011 ) , match.home_team_goal , match.home_team_api_id , match.away_team_api_id , match.country_id , match.* | league : league.id , league.country_id , league.name , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "match.season",
      "match.home_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.country_id",
      "match.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the bond type of TR007_4_19? | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id , bond.* | connected : connected.bond_id ( TR007_4_19 ) , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please list the lap records for the circuits in Italy. | circuits : circuits.country ( Italy ) , circuits.circuitid , circuits.name , circuits.circuitref , circuits.location , circuits.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.laps , results.fastestlap , results.fastestlaptime , results.fastestlapspeed , results.time , results.* | races : races.circuitid , races.year , races.raceid , races.name , races.date , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "circuits.country",
      "circuits.circuitid",
      "circuits.name",
      "circuits.circuitref",
      "circuits.location",
      "circuits.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.laps",
      "results.fastestlap",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.time",
      "results.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.name",
      "races.date",
      "races.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' | posts : posts.title ( Open source tools for visualizing multi-dimensional data? , Visualizing multi-dimensional data (LSI) in 2D ) , posts.lasteditordisplayname , posts.owneruserid , posts.ownerdisplayname , posts.lasteditoruserid , posts.* | badges : badges.name ( Editor ) , badges.userid , badges.date , badges.id , badges.* | posthistory : posthistory.text ( Open source tools for visualizing multi-dimensional data ? , Open source tools for visualizing multi-dimensional data? ) , posthistory.postid , posthistory.userid , posthistory.id , posthistory.comment ( Title , data ) , posthistory.* | users : users.displayname ( editor ) , users.id , users.reputation , users.location , users.views , users.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.lasteditordisplayname",
      "posts.owneruserid",
      "posts.ownerdisplayname",
      "posts.lasteditoruserid",
      "posts.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "posthistory.text",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.comment",
      "posthistory.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which user added a bounty amount of 50 to the post title mentioning variance? | posts : posts.title , posts.owneruserid , posts.id , posts.tags , posts.score , posts.* | votes : votes.bountyamount , votes.userid , votes.postid , votes.id , votes.creationdate , votes.* | posthistory : posthistory.comment ( Title , variance ) , posthistory.userid , posthistory.postid , posthistory.userdisplayname ( User ) , posthistory.id , posthistory.* | badges : badges.name ( variance ) , badges.userid , badges.id , badges.date , badges.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.owneruserid",
      "posts.id",
      "posts.tags",
      "posts.score",
      "posts.*",
      "votes.bountyamount",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.creationdate",
      "votes.*",
      "posthistory.comment",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.userdisplayname",
      "posthistory.id",
      "posthistory.*",
      "badges.name",
      "badges.userid",
      "badges.id",
      "badges.date",
      "badges.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? | patient : patient.sex , patient.birthday , patient.id , patient.first date , patient.admission , patient.* | laboratory : laboratory.pt , laboratory.aptt , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.thrombosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.*",
      "laboratory.pt",
      "laboratory.aptt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the skin colour of the superheroes with 100 attribute value. | hero_attribute : hero_attribute.attribute_value , hero_attribute.attribute_id , hero_attribute.hero_id , hero_attribute.* | colour : colour.colour , colour.id , colour.* | superhero : superhero.skin_colour_id , superhero.id , superhero.superhero_name , superhero.gender_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "hero_attribute.attribute_value",
      "hero_attribute.attribute_id",
      "hero_attribute.hero_id",
      "hero_attribute.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.skin_colour_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. | player : player.player_name , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.attacking_work_rate , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.potential , player_attributes.overall_rating , player_attributes.* | match : match.id , match.season , match.home_team_api_id , match.stage , match.date , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.attacking_work_rate",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.home_team_api_id",
      "match.stage",
      "match.date",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? | patient : patient.sex , patient.diagnosis ( SLE ) , patient.id , patient.birthday , patient.admission , patient.* | laboratory : laboratory.alb , laboratory.pt , laboratory.hgb , laboratory.glu , laboratory.hct , laboratory.* | examination : examination.diagnosis ( SLE ) , examination.lac , examination.kct , examination.symptoms , examination.rvvt , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.*",
      "laboratory.alb",
      "laboratory.pt",
      "laboratory.hgb",
      "laboratory.glu",
      "laboratory.hct",
      "laboratory.*",
      "examination.diagnosis",
      "examination.lac",
      "examination.kct",
      "examination.symptoms",
      "examination.rvvt",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the difference in the percentage of members in New Jersey and Vermont. | zip_code : zip_code.state ( New Jersey , Vermont ) , zip_code.city ( Jersey , Vermont ) , zip_code.zip_code , zip_code.short_state , zip_code.county , zip_code.* | member : member.member_id , member.zip , member.link_to_major , member.email , member.phone , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.state",
      "zip_code.city",
      "zip_code.zip_code",
      "zip_code.short_state",
      "zip_code.county",
      "zip_code.*",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.email",
      "member.phone",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the composition of element chlorine in percentage among the single bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? | cards : cards.convertedmanacost , cards.isonlineonly , cards.faceconvertedmanacost , cards.uuid , cards.name , cards.* | sets : sets.name ( Coldsnap ) , sets.isonlineonly , sets.mcmname ( Coldsnap ) , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.isonlineonly",
      "cards.faceconvertedmanacost",
      "cards.uuid",
      "cards.name",
      "cards.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.mcmname",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. | superhero : superhero.weight_kg , superhero.eye_colour_id , superhero.superhero_name ( Data ) , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.weight_kg",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the difference in the number of crimes committed in East and North Bohemia in 1996? | district : district.a16 , district.a3 ( north Bohemia ) , district.a15 , district.district_id , district.a2 , district.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | client : client.gender , client.client_id , client.district_id , client.birth_date , client.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a16",
      "district.a3",
      "district.a15",
      "district.district_id",
      "district.a2",
      "district.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | patient : patient.diagnosis , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.diagnosis , examination.examination date , examination.id , examination.thrombosis , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.numtsttakr , satscores.rtype , satscores.* | schools : schools.admlname3 , schools.admfname3 , schools.admlname1 ( Administration ) , schools.admlname2 , schools.admfname2 , schools.* | frpm : frpm.cdscode , frpm.school name , frpm.school code , frpm.school type , frpm.academic year , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.rtype",
      "satscores.*",
      "schools.admlname3",
      "schools.admfname3",
      "schools.admlname1",
      "schools.admlname2",
      "schools.admfname2",
      "schools.*",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.school code",
      "frpm.school type",
      "frpm.academic year",
      "frpm.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. | superhero : superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.alignment_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | alignment : alignment.alignment ( Good ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.alignment_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name chemical elements that form a bond TR001_10_11. | bond : bond.bond_id ( TR001_10_11 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. | bond : bond.bond_id ( TR001_2_4 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_2_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many bonds which involved atom 12 does molecule TR009 have? | bond : bond.molecule_id ( TR009 ) , bond.bond_id , bond.bond_type , bond.* | atom : atom.atom_id , atom.molecule_id ( TR009 ) , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id ( TR009 ) , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? | player : player.player_name ( Jordan Bowery , Landon Donovan ) , player.player_api_id , player.id , player.player_fifa_api_id , player.height , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.height",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.kct , examination.* | patient : patient.id , patient.sex , patient.admission , patient.diagnosis , patient.birthday , patient.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? | patient : patient.sex , patient.id , patient.first date , patient.admission , patient.birthday , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | examination : examination.id , examination.examination date , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.examination date",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70? | player : player.height , player.weight , player.birthday , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.strength , player_attributes.overall_rating , player_attributes.potential , player_attributes.player_api_id , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.height",
      "player.weight",
      "player.birthday",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.strength",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | laboratory : laboratory.ssb , laboratory.centromea , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "laboratory.ssb",
      "laboratory.centromea",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? | cards : cards.manacost , cards.availability ( mtgo , paper ) , cards.bordercolor ( black ) , cards.frameversion , cards.layout ( normal ) , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.uuid , foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.manacost",
      "cards.availability",
      "cards.bordercolor",
      "cards.frameversion",
      "cards.layout",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.kct , examination.acl igg , examination.rvvt , examination.* | laboratory : laboratory.hgb , laboratory.id , laboratory.t-bil , laboratory.hct , laboratory.tp , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.kct",
      "examination.acl igg",
      "examination.rvvt",
      "examination.*",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.t-bil",
      "laboratory.hct",
      "laboratory.tp",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20. | team : team.team_long_name ( PEC Zwolle ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationpassingclass , team_attributes.chancecreationpassing , team_attributes.team_fifa_api_id , team_attributes.team_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.publisher_id , superhero.id , superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the element and bond type included in the molecule with molecule ID of TR002. | bond : bond.bond_type , bond.molecule_id ( TR002 ) , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR002 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR002 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? | set_translations : set_translations.language ( Japanese ) , set_translations.translation , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.isnonfoilonly , sets.code , sets.id , sets.isfoilonly , sets.isonlineonly , sets.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.availability , cards.name , cards.artist , cards.uuid , cards.id , cards.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.isnonfoilonly",
      "sets.code",
      "sets.id",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.availability",
      "cards.name",
      "cards.artist",
      "cards.uuid",
      "cards.id",
      "cards.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the heights of the heroes whose eye colours are amber. | superhero : superhero.height_cm , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Amber ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which countries have zip codes with post office boxes? | zip_code : zip_code.county , zip_code.zip_code , zip_code.city ( Post ) , zip_code.state , zip_code.type , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.link_to_event , budget.* | member : member.zip , member.member_id , member.email , member.position , member.phone , member.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.county",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.link_to_event",
      "budget.*",
      "member.zip",
      "member.member_id",
      "member.email",
      "member.position",
      "member.phone",
      "member.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? | patient : patient.sex , patient.id , patient.diagnosis , patient.birthday , patient.description , patient.* | laboratory : laboratory.fg , laboratory.wbc , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.fg",
      "laboratory.wbc",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. | player : player.player_name , player.height , player.player_api_id , player.id , player.weight , player.* | player_attributes : player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.height",
      "player.player_api_id",
      "player.id",
      "player.weight",
      "player.*",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? | races : races.name ( Austrian Grand Prix ) , races.date , races.raceid , races.time , races.circuitid , races.* | pitstops : pitstops.duration , pitstops.raceid , pitstops.stop , pitstops.lap , pitstops.time , pitstops.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.laps , results.raceid , results.time , results.driverid , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.date",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "pitstops.duration",
      "pitstops.raceid",
      "pitstops.stop",
      "pitstops.lap",
      "pitstops.time",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.laps",
      "results.raceid",
      "results.time",
      "results.driverid",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? | budget : budget.category ( Advertisement ) , budget.amount , budget.budget_id , budget.link_to_event , budget.spent , budget.* | event : event.event_name ( October Meeting , Yearly Kickoff ) , event.event_id , event.type ( Budget , Meeting ) , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "budget.category",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.spent",
      "budget.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | laboratory : laboratory.ssb , laboratory.centromea , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "laboratory.ssb",
      "laboratory.centromea",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. | team : team.team_long_name , team.team_short_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.chancecreationpassingclass ( Normal ) , team_attributes.buildupplaydribblingclass ( Normal ) , team_attributes.chancecreationpassing , team_attributes.date , team_attributes.team_api_id , team_attributes.* | match : match.season , match.id , match.stage , match.date , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.season",
      "match.id",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70? | player : player.height , player.weight , player.birthday , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.strength , player_attributes.overall_rating , player_attributes.potential , player_attributes.player_api_id , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.height",
      "player.weight",
      "player.birthday",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.strength",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which foot is preferred by Abdou Diallo? | player : player.player_name ( Abdou Diallo ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.preferred_foot , player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.preferred_foot",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.enroll12 , satscores.numtsttakr , satscores.* | schools : schools.streetabr , schools.state , schools.city , schools.zip , schools.street , schools.* | frpm : frpm.low grade , frpm.school name , frpm.cdscode , frpm.high grade , frpm.school code , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numtsttakr",
      "satscores.*",
      "schools.streetabr",
      "schools.state",
      "schools.city",
      "schools.zip",
      "schools.street",
      "schools.*",
      "frpm.low grade",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.high grade",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who have a normal platelet level, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? | laptimes : laptimes.milliseconds , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.* | races : races.year , races.raceid , races.name , races.round , races.time , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.fastestlaptime , results.constructorid , results.milliseconds , results.raceid , results.fastestlap , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.milliseconds",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.milliseconds",
      "results.raceid",
      "results.fastestlap",
      "results.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n? | player : player.player_name ( Aaron Appindangoye , Abdou Diallo ) , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.ball_control , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.ball_control",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary? | client : client.gender , client.birth_date , client.client_id , client.district_id , client.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.client_id , disp.type , disp.disp_id , disp.* | loan : loan.account_id , loan.date , loan.amount , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.birth_date",
      "client.client_id",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.*",
      "loan.account_id",
      "loan.date",
      "loan.amount",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. | member : member.last_name , member.first_name , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_description , expense.approved , expense.expense_id , expense.link_to_budget , expense.* | budget : budget.spent , budget.budget_id , budget.amount , budget.category , budget.remaining , budget.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.expense_id",
      "expense.link_to_budget",
      "expense.*",
      "budget.spent",
      "budget.budget_id",
      "budget.amount",
      "budget.category",
      "budget.remaining",
      "budget.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? | races : races.raceid , races.name , races.year , races.round , races.date , races.* | results : results.fastestlapspeed , results.raceid , results.driverid , results.fastestlap , results.statusid , results.* | drivers : drivers.surname ( Speed , di Resta ) , drivers.forename ( Paul ) , drivers.driverref ( resta , speed ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.raceid",
      "races.name",
      "races.year",
      "races.round",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.raceid",
      "results.driverid",
      "results.fastestlap",
      "results.statusid",
      "results.*",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? | patient : patient.birthday , patient.diagnosis ( SJS ) , patient.first date , patient.admission , patient.id , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.hct , laboratory.got , laboratory.* | examination : examination.id , examination.diagnosis ( SjS ) , examination.symptoms , examination.examination date , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many unknown power cards contain info about the triggered ability | cards : cards.power , cards.name , cards.id , cards.life , cards.uuid , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.id",
      "cards.life",
      "cards.uuid",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the element and bond type included in the molecule with molecule ID of TR002. | bond : bond.bond_type , bond.molecule_id ( TR002 ) , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR002 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR002 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender ( Female ) , gender.id , gender.* | superhero : superhero.skin_colour_id , superhero.eye_colour_id , superhero.hair_colour_id , superhero.gender_id , superhero.publisher_id , superhero.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.time , races.circuitid , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.position , results.points , results.* | driverstandings : driverstandings.wins , driverstandings.driverid , driverstandings.position , driverstandings.points , driverstandings.raceid , driverstandings.* | laptimes : laptimes.position , laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.position",
      "results.points",
      "results.*",
      "driverstandings.wins",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.points",
      "driverstandings.raceid",
      "driverstandings.*",
      "laptimes.position",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the badge name that user 'SilentGhost' obtained? | badges : badges.name , badges.userid , badges.date , badges.id , badges.* | users : users.displayname ( SilentGhost , name ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? | team : team.team_long_name ( Hannover 96 ) , team.team_short_name , team.team_api_id , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.defenceaggressionclass , team_attributes.defenceaggression , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.defenceaggressionclass",
      "team_attributes.defenceaggression",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many bonds which involved atom 12 does molecule TR009 have? | bond : bond.molecule_id ( TR009 ) , bond.bond_id , bond.bond_type , bond.* | atom : atom.atom_id , atom.molecule_id ( TR009 ) , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id ( TR009 ) , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM | comments : comments.score , comments.creationdate , comments.postid , comments.userid , comments.id , comments.* | posts : posts.creaiondate , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.creationdate",
      "comments.postid",
      "comments.userid",
      "comments.id",
      "comments.*",
      "posts.creaiondate",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Please list the ID of the patient whose RF is normal and who is older than 60. | patient : patient.id , patient.birthday , patient.sex , patient.diagnosis , patient.description , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.lac , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.diagnosis",
      "patient.description",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.lac",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the description about the ruling of card \"Condemn\"? | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | cards : cards.name ( Condemn ) , cards.uuid , cards.originaltext , cards.originalreleasedate , cards.artist , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "cards.name",
      "cards.uuid",
      "cards.originaltext",
      "cards.originalreleasedate",
      "cards.artist",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? | patient : patient.sex , patient.diagnosis ( PSS ) , patient.id , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( PSS ) , examination.id , examination.symptoms , examination.ana pattern , examination.thrombosis , examination.* | laboratory : laboratory.crp ( 2+ ) , laboratory.cre , laboratory.ra ( 2+ ) , laboratory.cpk , laboratory.t-bil , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.thrombosis",
      "examination.*",
      "laboratory.crp",
      "laboratory.cre",
      "laboratory.ra",
      "laboratory.cpk",
      "laboratory.t-bil",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? | patient : patient.id , patient.admission , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.cre , laboratory.sc170 , laboratory.cpk , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.cre",
      "laboratory.sc170",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements with double bond, consisted in molecule TR024. | bond : bond.molecule_id ( TR024 ) , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR024 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR024 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. | schools : schools.streetabr , schools.street , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( 5-7 , K-12 ) , schools.* | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.enrollment (ages 5-17) , frpm.free meal count (ages 5-17) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.sname , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.streetabr",
      "schools.street",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.enrollment (ages 5-17)",
      "frpm.free meal count (ages 5-17)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "How many users are awarded with more than 5 badges? | badges : badges.userid , badges.id , badges.name , badges.date , badges.* | votes : votes.userid , votes.id , votes.postid , votes.creationdate , votes.bountyamount , votes.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.userid",
      "badges.id",
      "badges.name",
      "badges.date",
      "badges.*",
      "votes.userid",
      "votes.id",
      "votes.postid",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height for each superhero. | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | hero_attribute : hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.attribute_value , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.attribute_value",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? | atom : atom.element , atom.atom_id ( TR004_7 ) , atom.molecule_id , atom.* | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. | bond : bond.bond_id ( TR001_2_4 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_2_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the average height of a non-human superhero in Dark Horse Comics? | superhero : superhero.height_cm , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.* | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What percentage of carcinogenic-type molecules does not contain fluorine? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? | event : event.event_name , event.location ( 900 E. Washington St. ) , event.type ( Social ) , event.event_id , event.status , event.* | member : member.position ( President , Vice President ) , member.member_id , member.zip , member.first_name , member.email , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | zip_code : zip_code.zip_code , zip_code.city ( Washington ) , zip_code.state ( Washington ) , zip_code.type , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.location",
      "event.type",
      "event.event_id",
      "event.status",
      "event.*",
      "member.position",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which element is the least numerous in non-carcinogenic molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which country is the league Italy Serie A from? | country : country.name ( Italy ) , country.id , country.* | league : league.name ( Italy Serie A ) , league.country_id , league.id , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.* | player : player.id , player.birthday , player.height , player.weight , player.player_api_id , player.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*",
      "player.id",
      "player.birthday",
      "player.height",
      "player.weight",
      "player.player_api_id",
      "player.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the hero name and race of Charles Chandler. | race : race.race , race.id , race.* | superhero : superhero.superhero_name , superhero.full_name ( Charles Chandler ) , superhero.race_id , superhero.skin_colour_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "race.race",
      "race.id",
      "race.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of cards whose language is French among the Story Spotlight cards? | foreign_data : foreign_data.language ( French ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.isstoryspotlight , cards.artist , cards.name , cards.uuid , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.isstoryspotlight",
      "cards.artist",
      "cards.name",
      "cards.uuid",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22? | team : team.team_long_name ( Hull City ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationcrossingclass , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.id , team_attributes.* | match : match.date , match.season , match.home_team_api_id , match.id , match.stage , match.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.id , player_attributes.potential , player_attributes.finishing , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.home_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. | atom : atom.element , atom.molecule_id ( TR000 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR000 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR000 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which post has the highest score? Please give its id and title's name. | posts : posts.title , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | comments : comments.postid , comments.score , comments.id , comments.text , comments.userid , comments.* | posthistory : posthistory.comment ( Title , title ) , posthistory.postid , posthistory.id , posthistory.userid , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "comments.postid",
      "comments.score",
      "comments.id",
      "comments.text",
      "comments.userid",
      "comments.*",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the hero name and race of Charles Chandler. | race : race.race , race.id , race.* | superhero : superhero.superhero_name , superhero.full_name ( Charles Chandler ) , superhero.race_id , superhero.skin_colour_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "race.race",
      "race.id",
      "race.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the cost of posters for 'September Speaker' event. | expense : expense.cost , expense.expense_description ( Posters ) , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_name ( September Speaker ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Costa ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.c4 , laboratory.c3 , laboratory.pt , laboratory.id , laboratory.rbc , laboratory.* | examination : examination.thrombosis , examination.diagnosis ( Normal ) , examination.lac , examination.id , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.c4",
      "laboratory.c3",
      "laboratory.pt",
      "laboratory.id",
      "laboratory.rbc",
      "laboratory.*",
      "examination.thrombosis",
      "examination.diagnosis",
      "examination.lac",
      "examination.id",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.currency ( EUR ) , customers.segment ( LAM ) , customers.customerid , customers.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.currency",
      "customers.segment",
      "customers.customerid",
      "customers.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In which years did Lewis Hamilton participate in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.circuitid , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.constructorid , results.raceid , results.driverid , results.number , results.grid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.circuitid",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.constructorid",
      "results.raceid",
      "results.driverid",
      "results.number",
      "results.grid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. | district : district.a13 , district.a12 , district.a2 , district.a3 , district.district_id , district.* | loan : loan.duration , loan.status , loan.loan_id , loan.account_id , loan.date , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a13",
      "district.a12",
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.*",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? | loan : loan.date , loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.balance , trans.account_id , trans.trans_id , trans.type , trans.amount , trans.* | account : account.account_id , account.date , account.frequency , account.district_id , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.balance",
      "trans.account_id",
      "trans.trans_id",
      "trans.type",
      "trans.amount",
      "trans.*",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. | races : races.year , races.name ( Canadian Grand Prix ) , races.date , races.raceid , races.circuitid , races.* | drivers : drivers.driverref ( driver ) , drivers.surname ( Driver ) , drivers.forename , drivers.driverid , drivers.code , drivers.* | results : results.rank , results.driverid , results.laps , results.grid , results.raceid , results.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.position , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "drivers.driverref",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.rank",
      "results.driverid",
      "results.laps",
      "results.grid",
      "results.raceid",
      "results.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of the toxicology of the molecule \"TR004\". | molecule : molecule.molecule_id ( TR004 ) , molecule.label , molecule.* | atom : atom.element , atom.molecule_id ( TR004 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR004 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. | team : team.team_short_name , team.team_long_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.buildupplaydribbling , team_attributes.buildupplayspeed , team_attributes.buildupplaypassing , team_attributes.buildupplaydribblingclass , team_attributes.buildupplayspeedclass , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.acceleration , player_attributes.agility , player_attributes.reactions , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_long_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribbling",
      "team_attributes.buildupplayspeed",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.acceleration",
      "player_attributes.agility",
      "player_attributes.reactions",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? | drivers : drivers.dob , drivers.number , drivers.driverid , drivers.surname , drivers.code , drivers.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | races : races.year , races.date , races.raceid , races.time , races.round , races.* | results : results.laps , results.fastestlap , results.time , results.driverid , results.points , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.number",
      "drivers.driverid",
      "drivers.surname",
      "drivers.code",
      "drivers.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.date",
      "races.raceid",
      "races.time",
      "races.round",
      "races.*",
      "results.laps",
      "results.fastestlap",
      "results.time",
      "results.driverid",
      "results.points",
      "results.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher for Hawkman, Karate Kid and Speedy? | superhero : superhero.superhero_name ( Hawkman , Karate Kid ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the average height of a non-human superhero in Dark Horse Comics? | superhero : superhero.height_cm , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.* | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of atoms that can not bond with any other atoms. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. | sets : sets.id , sets.isforeignonly , sets.code , sets.isfoilonly , sets.isonlineonly , sets.* | cards : cards.name ( Foil ) , cards.availability , cards.facename ( Response ) , cards.isonlineonly , cards.setcode , cards.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.isforeignonly",
      "sets.code",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "cards.name",
      "cards.availability",
      "cards.facename",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. | frpm : frpm.charter funding type ( Locally funded ) , frpm.school name , frpm.enrollment (k-12) , frpm.school type , frpm.free meal count (ages 5-17) , frpm.* | schools : schools.fundingtype ( Locally funded ) , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( K-12 ) , schools.soctype , schools.* | satscores : satscores.sname , satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.charter funding type",
      "frpm.school name",
      "frpm.enrollment (k-12)",
      "frpm.school type",
      "frpm.free meal count (ages 5-17)",
      "frpm.*",
      "schools.fundingtype",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.soctype",
      "schools.*",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? | driverstandings : driverstandings.wins , driverstandings.points , driverstandings.driverid , driverstandings.position , driverstandings.driverstandingsid , driverstandings.* | results : results.points , results.driverid , results.raceid , results.laps , results.constructorid , results.* | drivers : drivers.surname ( Driver ) , drivers.driverid , drivers.driverref ( driver ) , drivers.forename , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.driverstandingsid",
      "driverstandings.*",
      "results.points",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.constructorid",
      "results.*",
      "drivers.surname",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.forename",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. | player : player.birthday , player.player_name , player.player_fifa_api_id , player.player_api_id , player.height , player.* | player_attributes : player_attributes.sprint_speed , player_attributes.date , player_attributes.acceleration , player_attributes.player_api_id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.birthday",
      "player.player_name",
      "player.player_fifa_api_id",
      "player.player_api_id",
      "player.height",
      "player.*",
      "player_attributes.sprint_speed",
      "player_attributes.date",
      "player_attributes.acceleration",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Mention the category of events which were held at MU 215. | event : event.location ( MU 215 ) , event.type , event.event_name , event.event_id , event.event_date , event.* | budget : budget.category , budget.budget_id , budget.spent , budget.remaining , budget.amount , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.location",
      "event.type",
      "event.event_name",
      "event.event_id",
      "event.event_date",
      "event.*",
      "budget.category",
      "budget.budget_id",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher for Hawkman, Karate Kid and Speedy? | superhero : superhero.superhero_name ( Hawkman , Karate Kid ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the total average cost that Elijah Allen spent in the events on September and October. | member : member.last_name ( Allen ) , member.first_name ( Elijah ) , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_date , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_date , event.event_id , event.event_name , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_date",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_date",
      "event.event_id",
      "event.event_name",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? | player : player.player_name ( Jordan Bowery , Landon Donovan ) , player.player_api_id , player.id , player.player_fifa_api_id , player.height , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.height",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? | driverstandings : driverstandings.wins , driverstandings.points , driverstandings.driverid , driverstandings.position , driverstandings.driverstandingsid , driverstandings.* | results : results.points , results.driverid , results.raceid , results.laps , results.constructorid , results.* | drivers : drivers.surname ( Driver ) , drivers.driverid , drivers.driverref ( driver ) , drivers.forename , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.driverstandingsid",
      "driverstandings.*",
      "results.points",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.constructorid",
      "results.*",
      "drivers.surname",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.forename",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. | league : league.name , league.id , league.country_id , league.* | match : match.season ( 2009/2010 ) , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | patient : patient.diagnosis , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.diagnosis , examination.examination date , examination.id , examination.thrombosis , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? | races : races.name ( Spanish Grand Prix ) , races.year , races.circuitid , races.raceid , races.date , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.constructorid , results.statusid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.* | drivers : drivers.driverid , drivers.surname ( Speed ) , drivers.driverref ( driver , speed ) , drivers.number , drivers.code , drivers.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.circuitid",
      "races.raceid",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.constructorid",
      "results.statusid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*",
      "drivers.driverid",
      "drivers.surname",
      "drivers.driverref",
      "drivers.number",
      "drivers.code",
      "drivers.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. | district : district.a13 , district.a12 , district.a2 , district.a3 , district.district_id , district.* | loan : loan.duration , loan.status , loan.loan_id , loan.account_id , loan.date , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a13",
      "district.a12",
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.*",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? | cards : cards.convertedmanacost , cards.isonlineonly , cards.faceconvertedmanacost , cards.uuid , cards.name , cards.* | sets : sets.name ( Coldsnap ) , sets.isonlineonly , sets.mcmname ( Coldsnap ) , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.isonlineonly",
      "cards.faceconvertedmanacost",
      "cards.uuid",
      "cards.name",
      "cards.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.mcmname",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20. | team : team.team_long_name ( PEC Zwolle ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationpassingclass , team_attributes.chancecreationpassing , team_attributes.team_fifa_api_id , team_attributes.team_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is reference name of Robert Kubica? | drivers : drivers.surname ( Kubica ) , drivers.driverref ( kubica ) , drivers.forename , drivers.driverid , drivers.dob , drivers.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.milliseconds , laptimes.* | races : races.year , races.raceid , races.name , races.time , races.round , races.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.driverref",
      "drivers.forename",
      "drivers.driverid",
      "drivers.dob",
      "drivers.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.time",
      "races.round",
      "races.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.cdscode , frpm.school code , frpm.free meal count (k-12) , frpm.* | satscores : satscores.enroll12 , satscores.sname , satscores.cds , satscores.numge1500 , satscores.dname , satscores.* | schools : schools.school , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.enroll12",
      "satscores.sname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.*",
      "schools.school",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the owner user id of the most valuable post? | posts : posts.owneruserid , posts.score , posts.id , posts.title , posts.posttypeid , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | votes : votes.postid , votes.userid , votes.id , votes.creationdate , votes.bountyamount , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.score",
      "posts.id",
      "posts.title",
      "posts.posttypeid",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "votes.postid",
      "votes.userid",
      "votes.id",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. | atom : atom.element , atom.molecule_id ( TR000 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR000 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR000 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.cdscode , frpm.school code , frpm.free meal count (k-12) , frpm.* | satscores : satscores.enroll12 , satscores.sname , satscores.cds , satscores.numge1500 , satscores.dname , satscores.* | schools : schools.school , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.enroll12",
      "satscores.sname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.*",
      "schools.school",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers. | users : users.age , users.id , users.reputation , users.location , users.views , users.* | badges : badges.name ( Organizer ) , badges.userid , badges.date , badges.id , badges.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.id , posthistory.userid , posthistory.text , posthistory.comment , posthistory.postid , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.age",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. | superhero : superhero.weight_kg , superhero.eye_colour_id , superhero.superhero_name ( Data ) , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.weight_kg",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height for each superhero. | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | hero_attribute : hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.attribute_value , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.attribute_value",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? | patient : patient.sex , patient.birthday , patient.id , patient.first date , patient.admission , patient.* | laboratory : laboratory.pt , laboratory.aptt , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.thrombosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.*",
      "laboratory.pt",
      "laboratory.aptt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender ( Female ) , gender.id , gender.* | superhero : superhero.skin_colour_id , superhero.eye_colour_id , superhero.hair_colour_id , superhero.gender_id , superhero.publisher_id , superhero.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? | event : event.event_name , event.location ( 900 E. Washington St. ) , event.type ( Social ) , event.event_id , event.status , event.* | member : member.position ( President , Vice President ) , member.member_id , member.zip , member.first_name , member.email , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | zip_code : zip_code.zip_code , zip_code.city ( Washington ) , zip_code.state ( Washington ) , zip_code.type , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.location",
      "event.type",
      "event.event_id",
      "event.status",
      "event.*",
      "member.position",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? | users : users.displayname ( Harvey Motulsky , Noah Snyder ) , users.views , users.upvotes , users.id , users.reputation , users.* | posts : posts.owneruserid , posts.title , posts.id , posts.score , posts.favoritecount , posts.* | posthistory : posthistory.userid , posthistory.postid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.displayname",
      "users.views",
      "users.upvotes",
      "users.id",
      "users.reputation",
      "users.*",
      "posts.owneruserid",
      "posts.title",
      "posts.id",
      "posts.score",
      "posts.favoritecount",
      "posts.*",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? | users : users.displayname ( Harvey Motulsky , Noah Snyder ) , users.views , users.upvotes , users.id , users.reputation , users.* | posts : posts.owneruserid , posts.title , posts.id , posts.score , posts.favoritecount , posts.* | posthistory : posthistory.userid , posthistory.postid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.displayname",
      "users.views",
      "users.upvotes",
      "users.id",
      "users.reputation",
      "users.*",
      "posts.owneruserid",
      "posts.title",
      "posts.id",
      "posts.score",
      "posts.favoritecount",
      "posts.*",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the description about the ruling of card \"Condemn\"? | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | cards : cards.name ( Condemn ) , cards.uuid , cards.originaltext , cards.originalreleasedate , cards.artist , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "cards.name",
      "cards.uuid",
      "cards.originaltext",
      "cards.originalreleasedate",
      "cards.artist",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last name of the members of the club that attended the women's soccer event. | member : member.last_name , member.member_id , member.position ( Member ) , member.zip , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Clubb ) , zip_code.type , zip_code.state , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.member_id",
      "member.position",
      "member.zip",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.state",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. | superhero : superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.alignment_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | alignment : alignment.alignment ( Good ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.alignment_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver has the fastest lap time? Please give their forenames and surnames. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.code , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.fastestlaptime , results.fastestlapspeed , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more in-patient or outpatient who were male? What is the deviation in percentage? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.examination date , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.ra , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.ra",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which user added a bounty amount of 50 to the post title mentioning variance? | posts : posts.title , posts.owneruserid , posts.id , posts.tags , posts.score , posts.* | votes : votes.bountyamount , votes.userid , votes.postid , votes.id , votes.creationdate , votes.* | posthistory : posthistory.comment ( Title , variance ) , posthistory.userid , posthistory.postid , posthistory.userdisplayname ( User ) , posthistory.id , posthistory.* | badges : badges.name ( variance ) , badges.userid , badges.id , badges.date , badges.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.owneruserid",
      "posts.id",
      "posts.tags",
      "posts.score",
      "posts.*",
      "votes.bountyamount",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.creationdate",
      "votes.*",
      "posthistory.comment",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.userdisplayname",
      "posthistory.id",
      "posthistory.*",
      "badges.name",
      "badges.userid",
      "badges.id",
      "badges.date",
      "badges.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the lap record set by Lewis Hamilton in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.date , races.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.driverid , laptimes.time , laptimes.milliseconds , laptimes.* | drivers : drivers.forename ( Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.laps , results.constructorid , results.fastestlap , results.raceid , results.driverid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.date",
      "races.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "drivers.forename",
      "drivers.driverref",
      "drivers.surname",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.laps",
      "results.constructorid",
      "results.fastestlap",
      "results.raceid",
      "results.driverid",
      "results.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. | cards : cards.artist ( Jim Pavelec ) , cards.name , cards.id , cards.uuid , cards.asciiname , cards.* | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.name",
      "cards.id",
      "cards.uuid",
      "cards.asciiname",
      "cards.*",
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? | cards : cards.manacost , cards.availability ( mtgo , paper ) , cards.bordercolor ( black ) , cards.frameversion , cards.layout ( normal ) , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.uuid , foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.manacost",
      "cards.availability",
      "cards.bordercolor",
      "cards.frameversion",
      "cards.layout",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes. | comments : comments.score , comments.userdisplayname , comments.userid , comments.id , comments.postid , comments.* | users : users.downvotes , users.upvotes , users.displayname , users.id , users.views , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userdisplayname",
      "comments.userid",
      "comments.id",
      "comments.postid",
      "comments.*",
      "users.downvotes",
      "users.upvotes",
      "users.displayname",
      "users.id",
      "users.views",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? | bond : bond.bond_type , bond.molecule_id ( TR010 ) , bond.bond_id , bond.* | molecule : molecule.molecule_id ( TR010 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.element , atom.atom_id , atom.molecule_id ( TR010 ) , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Among all the lap records set on various circuits, what is the time for the fastest one? | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.fastestlaptime , results.fastestlap , results.fastestlapspeed , results.laps , results.time , results.* | circuits : circuits.circuitid , circuits.name , circuits.url , circuits.circuitref , circuits.lat , circuits.* | races : races.circuitid , races.year , races.raceid , races.time , races.name , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlap",
      "results.fastestlapspeed",
      "results.laps",
      "results.time",
      "results.*",
      "circuits.circuitid",
      "circuits.name",
      "circuits.url",
      "circuits.circuitref",
      "circuits.lat",
      "circuits.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.time",
      "races.name",
      "races.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of incredibly powerful cards in the set Coldsnap? | cards : cards.power , cards.name , cards.isonlineonly , cards.setcode , cards.uuid , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.uuid",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | laboratory : laboratory.ssb , laboratory.centromea , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "laboratory.ssb",
      "laboratory.centromea",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.enroll12 , satscores.numtsttakr , satscores.* | schools : schools.streetabr , schools.state , schools.city , schools.zip , schools.street , schools.* | frpm : frpm.low grade , frpm.school name , frpm.cdscode , frpm.high grade , frpm.school code , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numtsttakr",
      "satscores.*",
      "schools.streetabr",
      "schools.state",
      "schools.city",
      "schools.zip",
      "schools.street",
      "schools.*",
      "frpm.low grade",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.high grade",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the most durability published by Dark Horse Comics? | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | superpower : superpower.power_name ( Durability ) , superpower.id , superpower.* | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.publisher_id , superhero.id , superhero.* | attribute : attribute.attribute_name ( Durability ) , attribute.id , attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.*",
      "attribute.attribute_name",
      "attribute.id",
      "attribute.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. | player : player.player_name , player.height , player.player_api_id , player.id , player.weight , player.* | player_attributes : player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.height",
      "player.player_api_id",
      "player.id",
      "player.weight",
      "player.*",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. | expense : expense.cost , expense.expense_date , expense.expense_description ( Pizza ) , expense.expense_id , expense.approved , expense.* | event : event.event_name , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city ( Hundred ) , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_date",
      "expense.expense_description",
      "expense.expense_id",
      "expense.approved",
      "expense.*",
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. | team : team.team_short_name , team.team_long_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.buildupplaydribbling , team_attributes.buildupplayspeed , team_attributes.buildupplaypassing , team_attributes.buildupplaydribblingclass , team_attributes.buildupplayspeedclass , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.acceleration , player_attributes.agility , player_attributes.reactions , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_long_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribbling",
      "team_attributes.buildupplayspeed",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.acceleration",
      "player_attributes.agility",
      "player_attributes.reactions",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? | patient : patient.diagnosis ( SLE ) , patient.first date , patient.admission , patient.id , patient.sex , patient.* | examination : examination.diagnosis ( SLE ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. | races : races.time , races.name , races.date , races.year , races.raceid , races.* | drivers : drivers.dob , drivers.driverid , drivers.surname ( Driver ) , drivers.number , drivers.code , drivers.* | qualifying : qualifying.raceid , qualifying.driverid , qualifying.q1 , qualifying.qualifyid , qualifying.q3 , qualifying.* | results : results.driverid , results.raceid , results.number , results.grid , results.position , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.time",
      "races.name",
      "races.date",
      "races.year",
      "races.raceid",
      "races.*",
      "drivers.dob",
      "drivers.driverid",
      "drivers.surname",
      "drivers.number",
      "drivers.code",
      "drivers.*",
      "qualifying.raceid",
      "qualifying.driverid",
      "qualifying.q1",
      "qualifying.qualifyid",
      "qualifying.q3",
      "qualifying.*",
      "results.driverid",
      "results.raceid",
      "results.number",
      "results.grid",
      "results.position",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Please list the ID of the patient whose RF is normal and who is older than 60. | patient : patient.id , patient.birthday , patient.sex , patient.diagnosis , patient.description , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.lac , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.diagnosis",
      "patient.description",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.lac",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. | player : player.player_name , player.birthday , player.id , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.birthday",
      "player.id",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Calculate the average home team goal in the 2010/2011 season in the country of Poland. | country : country.name ( Poland ) , country.id , country.* | match : match.season ( 2010/2011 ) , match.home_team_goal , match.home_team_api_id , match.away_team_api_id , match.country_id , match.* | league : league.id , league.country_id , league.name , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "match.season",
      "match.home_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.country_id",
      "match.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the badge name that user 'SilentGhost' obtained? | badges : badges.name , badges.userid , badges.date , badges.id , badges.* | users : users.displayname ( SilentGhost , name ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? | laptimes : laptimes.milliseconds , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.* | races : races.year , races.raceid , races.name , races.round , races.time , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.fastestlaptime , results.constructorid , results.milliseconds , results.raceid , results.fastestlap , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.milliseconds",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.milliseconds",
      "results.raceid",
      "results.fastestlap",
      "results.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.price , transactions_1k.amount , transactions_1k.customerid , transactions_1k.productid , transactions_1k.date , transactions_1k.* | yearmonth : yearmonth.customerid , yearmonth.consumption , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.price",
      "transactions_1k.amount",
      "transactions_1k.customerid",
      "transactions_1k.productid",
      "transactions_1k.date",
      "transactions_1k.*",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all carcinogenic molecules and their elements. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? | drivers : drivers.dob , drivers.number , drivers.driverid , drivers.surname , drivers.code , drivers.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | races : races.year , races.date , races.raceid , races.time , races.round , races.* | results : results.laps , results.fastestlap , results.time , results.driverid , results.points , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.number",
      "drivers.driverid",
      "drivers.surname",
      "drivers.code",
      "drivers.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.date",
      "races.raceid",
      "races.time",
      "races.round",
      "races.*",
      "results.laps",
      "results.fastestlap",
      "results.time",
      "results.driverid",
      "results.points",
      "results.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. | patient : patient.sex , patient.admission , patient.birthday , patient.id , patient.diagnosis , patient.* | laboratory : laboratory.rbc , laboratory.hgb , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis , examination.thrombosis , examination.symptoms , examination.id , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.id",
      "patient.diagnosis",
      "patient.*",
      "laboratory.rbc",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.id",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? | client : client.gender , client.district_id , client.client_id , client.birth_date , client.* | district : district.a3 ( south Bohemia ) , district.a4 , district.district_id , district.a5 , district.a2 , district.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.client_id , disp.type , disp.disp_id , disp.account_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.district_id",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.a4",
      "district.district_id",
      "district.a5",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.account_id",
      "disp.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. | superhero : superhero.eye_colour_id , superhero.publisher_id , superhero.skin_colour_id , superhero.hair_colour_id , superhero.superhero_name , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.publisher_id",
      "superhero.skin_colour_id",
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How many matches in the 2015/2016 season were held in Scotland Premier League\n? | league : league.name ( Scotland Premier League ) , league.country_id , league.id , league.* | match : match.season ( 2015/2016 ) , match.league_id , match.id , match.stage , match.date , match.* | country : country.name ( Scotland ) , country.id , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.id",
      "match.stage",
      "match.date",
      "match.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List all the football player with the highest potential score. | player : player.player_name , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.potential , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.player_fifa_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.player_fifa_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. | sets : sets.id , sets.isforeignonly , sets.code , sets.isfoilonly , sets.isonlineonly , sets.* | cards : cards.name ( Foil ) , cards.availability , cards.facename ( Response ) , cards.isonlineonly , cards.setcode , cards.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.isforeignonly",
      "sets.code",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "cards.name",
      "cards.availability",
      "cards.facename",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? | client : client.gender , client.district_id , client.client_id , client.birth_date , client.* | district : district.a3 ( south Bohemia ) , district.a4 , district.district_id , district.a5 , district.a2 , district.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.client_id , disp.type , disp.disp_id , disp.account_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.district_id",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.a4",
      "district.district_id",
      "district.a5",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.account_id",
      "disp.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.price , transactions_1k.amount , transactions_1k.customerid , transactions_1k.productid , transactions_1k.date , transactions_1k.* | yearmonth : yearmonth.customerid , yearmonth.consumption , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.price",
      "transactions_1k.amount",
      "transactions_1k.customerid",
      "transactions_1k.productid",
      "transactions_1k.date",
      "transactions_1k.*",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is reference name of Robert Kubica? | drivers : drivers.surname ( Kubica ) , drivers.driverref ( kubica ) , drivers.forename , drivers.driverid , drivers.dob , drivers.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.milliseconds , laptimes.* | races : races.year , races.raceid , races.name , races.time , races.round , races.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.driverref",
      "drivers.forename",
      "drivers.driverid",
      "drivers.dob",
      "drivers.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.time",
      "races.round",
      "races.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Give the full name and contact number of members who had to spend more than average on each expense. | member : member.first_name , member.last_name , member.phone , member.email , member.member_id , member.* | expense : expense.cost , expense.expense_id , expense.approved , expense.link_to_member , expense.expense_description , expense.* | zip_code : zip_code.zip_code , zip_code.city ( Given ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.phone",
      "member.email",
      "member.member_id",
      "member.*",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_description",
      "expense.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? | match : match.date , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | league : league.name , league.country_id , league.id , league.* | country : country.name , country.id , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.agility , player_attributes.balance , player_attributes.jumping , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.date",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.jumping",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? | schools : schools.county ( Los Angeles ) , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.* | frpm : frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.cname ( Los Angeles ) , satscores.cds , satscores.numge1500 , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.cname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Give the full name and contact number of members who had to spend more than average on each expense. | member : member.first_name , member.last_name , member.phone , member.email , member.member_id , member.* | expense : expense.cost , expense.expense_id , expense.approved , expense.link_to_member , expense.expense_description , expense.* | zip_code : zip_code.zip_code , zip_code.city ( Given ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.phone",
      "member.email",
      "member.member_id",
      "member.*",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_description",
      "expense.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which countries have zip codes with post office boxes? | zip_code : zip_code.county , zip_code.zip_code , zip_code.city ( Post ) , zip_code.state , zip_code.type , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.link_to_event , budget.* | member : member.zip , member.member_id , member.email , member.position , member.phone , member.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.county",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.link_to_event",
      "budget.*",
      "member.zip",
      "member.member_id",
      "member.email",
      "member.position",
      "member.phone",
      "member.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. | sets : sets.type ( commander , expansion ) , sets.id , sets.totalsetsize , sets.isonlineonly , sets.isnonfoilonly , sets.* | cards : cards.promotypes , cards.types , cards.subtypes , cards.ispromo , cards.name , cards.* | legalities : legalities.uuid , legalities.id , legalities.status , legalities.format ( commander ) , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.type",
      "sets.id",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.isnonfoilonly",
      "sets.*",
      "cards.promotypes",
      "cards.types",
      "cards.subtypes",
      "cards.ispromo",
      "cards.name",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.status",
      "legalities.format",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the cost of posters for 'September Speaker' event. | expense : expense.cost , expense.expense_description ( Posters ) , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_name ( September Speaker ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Costa ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down Ajax's superpowers. | superpower : superpower.power_name , superpower.id , superpower.* | superhero : superhero.superhero_name ( Ajax ) , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.power_id , hero_power.hero_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.power_id",
      "hero_power.hero_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.time ( 16:25:00 ) , transactions_1k.date , transactions_1k.customerid , transactions_1k.amount , transactions_1k.price , transactions_1k.* | yearmonth : yearmonth.date , yearmonth.customerid , yearmonth.consumption , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.customerid",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.*",
      "yearmonth.date",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which customers, paying in CZK, consumed the most gas in 2011? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | transactions_1k : transactions_1k.date , transactions_1k.time , transactions_1k.amount , transactions_1k.price , transactions_1k.customerid , transactions_1k.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "transactions_1k.date",
      "transactions_1k.time",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.customerid",
      "transactions_1k.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy. | player : player.player_name , player.height , player.player_api_id , player.id , player.weight , player.* | player_attributes : player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.height",
      "player.player_api_id",
      "player.id",
      "player.weight",
      "player.*",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. | superhero : superhero.eye_colour_id , superhero.publisher_id , superhero.skin_colour_id , superhero.hair_colour_id , superhero.superhero_name , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.publisher_id",
      "superhero.skin_colour_id",
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "On average how many carcinogenic molecules are single bonded? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the football player Francois Affolter header's finishing rate on 18/09/2014? | player : player.player_name ( Francois Affolter ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.finishing , player_attributes.date , player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.finishing",
      "player_attributes.date",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among all the posts posted by the most influential user, identify the percentage with a score above 50. | posts : posts.score , posts.owneruserid , posts.id , posts.posttypeid , posts.body , posts.* | users : users.reputation , users.id , users.location , users.views , users.age , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "users.reputation",
      "users.id",
      "users.location",
      "users.views",
      "users.age",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? | set_translations : set_translations.translation , set_translations.language , set_translations.id , set_translations.setcode , set_translations.* | sets : sets.isonlineonly , sets.id , sets.code , sets.name , sets.block , sets.* | cards : cards.isonlineonly , cards.name , cards.artist , cards.availability , cards.uuid , cards.* | foreign_data : foreign_data.language , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.translation",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.*",
      "sets.isonlineonly",
      "sets.id",
      "sets.code",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.isonlineonly",
      "cards.name",
      "cards.artist",
      "cards.availability",
      "cards.uuid",
      "cards.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the elements of all the triple bonds. | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the percentage of carbon in double-bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? | cards : cards.artist ( Aaron Miller , Jeremy Jarvis ) , cards.asciiname , cards.name , cards.uuid , cards.id , cards.* | sets : sets.name ( Coldsnap ) , sets.code , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.asciiname",
      "cards.name",
      "cards.uuid",
      "cards.id",
      "cards.*",
      "sets.name",
      "sets.code",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.superhero_name , superhero.gender_id , superhero.full_name , superhero.publisher_id , superhero.* | superpower : superpower.id , superpower.power_name , superpower.* | hero_attribute : hero_attribute.attribute_value , hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.*",
      "superpower.id",
      "superpower.power_name",
      "superpower.*",
      "hero_attribute.attribute_value",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? | loan : loan.date , loan.amount , loan.account_id , loan.duration , loan.loan_id , loan.* | client : client.gender , client.client_id , client.birth_date , client.district_id , client.* | account : account.account_id , account.date , account.district_id , account.frequency , account.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.amount",
      "loan.account_id",
      "loan.duration",
      "loan.loan_id",
      "loan.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.frequency",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes created by George Lucas, identify the percentage of female superheroes. | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( George Lucas ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.superhero_name , superhero.full_name , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. | district : district.a11 , district.district_id , district.a3 , district.a2 , district.a8 , district.* | loan : loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.status , loan.* | disp : disp.type , disp.account_id , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a11",
      "district.district_id",
      "district.a3",
      "district.a2",
      "district.a8",
      "district.*",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.ra , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.ra",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which element is the least numerous in non-carcinogenic molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? | races : races.year , races.name , races.raceid , races.round , races.circuitid , races.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.position , laptimes.* | results : results.fastestlaptime , results.driverid , results.raceid , results.laps , results.rank , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.round",
      "races.circuitid",
      "races.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.position",
      "laptimes.*",
      "results.fastestlaptime",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.rank",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the skin colour of the superheroes with 100 attribute value. | hero_attribute : hero_attribute.attribute_value , hero_attribute.attribute_id , hero_attribute.hero_id , hero_attribute.* | colour : colour.colour , colour.id , colour.* | superhero : superhero.skin_colour_id , superhero.id , superhero.superhero_name , superhero.gender_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "hero_attribute.attribute_value",
      "hero_attribute.attribute_id",
      "hero_attribute.hero_id",
      "hero_attribute.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.skin_colour_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? | schools : schools.county ( Los Angeles ) , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.* | frpm : frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.cname ( Los Angeles ) , satscores.cds , satscores.numge1500 , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.cname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of the toxicology of the molecule \"TR004\". | molecule : molecule.molecule_id ( TR004 ) , molecule.label , molecule.* | atom : atom.element , atom.molecule_id ( TR004 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR004 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many percent of female heroes were published by Marvel Comics? | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.publisher_id , superhero.id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.superhero_name , superhero.gender_id , superhero.full_name , superhero.publisher_id , superhero.* | superpower : superpower.id , superpower.power_name , superpower.* | hero_attribute : hero_attribute.attribute_value , hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.*",
      "superpower.id",
      "superpower.power_name",
      "superpower.*",
      "hero_attribute.attribute_value",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? | atom : atom.element , atom.atom_id ( TR004_7 ) , atom.molecule_id , atom.* | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? | frpm : frpm.school type ( Intermediate/Middle Schools (Public) ) , frpm.district name ( San Bernardino City Unified ) , frpm.district type , frpm.cdscode , frpm.school name , frpm.* | schools : schools.county ( San Bernardino ) , schools.soctype ( Intermediate/Middle Schools (Public) ) , schools.phone , schools.district ( San Bernardino City Unified , San Bernardino County ROP ) , schools.closeddate , schools.* | satscores : satscores.cds , satscores.numge1500 , satscores.dname ( San Bernardino City Unified ) , satscores.cname ( San Bernardino ) , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.school type",
      "frpm.district name",
      "frpm.district type",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.*",
      "schools.county",
      "schools.soctype",
      "schools.phone",
      "schools.district",
      "schools.closeddate",
      "schools.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.cname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the highest eligible free rate for K-12 students in the schools in Alameda County? | frpm : frpm.county name ( Alameda ) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.free meal count (k-12) , frpm.school code , frpm.* | schools : schools.county ( Alameda ) , schools.gsoffered ( K-12 ) , schools.cdscode , schools.gsserved ( K-12 ) , schools.latitude , schools.* | satscores : satscores.numge1500 , satscores.enroll12 , satscores.cds , satscores.cname ( Alameda ) , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.*",
      "schools.county",
      "schools.gsoffered",
      "schools.cdscode",
      "schools.gsserved",
      "schools.latitude",
      "schools.*",
      "satscores.numge1500",
      "satscores.enroll12",
      "satscores.cds",
      "satscores.cname",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. | league : league.name , league.id , league.country_id , league.* | match : match.season ( 2009/2010 ) , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Give the name of the league had the most goals in the 2016 season? | league : league.name , league.id , league.country_id , league.* | match : match.season , match.league_id , match.home_team_goal , match.away_team_goal , match.id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.balance , player_attributes.strength , player_attributes.vision , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.balance",
      "player_attributes.strength",
      "player_attributes.vision",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.kct , examination.acl igg , examination.rvvt , examination.* | laboratory : laboratory.hgb , laboratory.id , laboratory.t-bil , laboratory.hct , laboratory.tp , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.kct",
      "examination.acl igg",
      "examination.rvvt",
      "examination.*",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.t-bil",
      "laboratory.hct",
      "laboratory.tp",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20. | team : team.team_long_name ( PEC Zwolle ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationpassingclass , team_attributes.chancecreationpassing , team_attributes.team_fifa_api_id , team_attributes.team_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? | set_translations : set_translations.translation , set_translations.language , set_translations.id , set_translations.setcode , set_translations.* | sets : sets.isonlineonly , sets.id , sets.code , sets.name , sets.block , sets.* | cards : cards.isonlineonly , cards.name , cards.artist , cards.availability , cards.uuid , cards.* | foreign_data : foreign_data.language , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.translation",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.*",
      "sets.isonlineonly",
      "sets.id",
      "sets.code",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.isonlineonly",
      "cards.name",
      "cards.artist",
      "cards.availability",
      "cards.uuid",
      "cards.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers. | users : users.age , users.id , users.reputation , users.location , users.views , users.* | badges : badges.name ( Organizer ) , badges.userid , badges.date , badges.id , badges.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.id , posthistory.userid , posthistory.text , posthistory.comment , posthistory.postid , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.age",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the total average cost that Elijah Allen spent in the events on September and October. | member : member.last_name ( Allen ) , member.first_name ( Elijah ) , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_date , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_date , event.event_id , event.event_name , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_date",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_date",
      "event.event_id",
      "event.event_name",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the owner user id of the most valuable post? | posts : posts.owneruserid , posts.score , posts.id , posts.title , posts.posttypeid , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | votes : votes.postid , votes.userid , votes.id , votes.creationdate , votes.bountyamount , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.score",
      "posts.id",
      "posts.title",
      "posts.posttypeid",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "votes.postid",
      "votes.userid",
      "votes.id",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. | races : races.year , races.name ( Canadian Grand Prix ) , races.date , races.raceid , races.circuitid , races.* | drivers : drivers.driverref ( driver ) , drivers.surname ( Driver ) , drivers.forename , drivers.driverid , drivers.code , drivers.* | results : results.rank , results.driverid , results.laps , results.grid , results.raceid , results.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.position , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "drivers.driverref",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.rank",
      "results.driverid",
      "results.laps",
      "results.grid",
      "results.raceid",
      "results.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements for bond id TR001_10_11? | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. | expense : expense.cost , expense.expense_date , expense.expense_description ( Pizza ) , expense.expense_id , expense.approved , expense.* | event : event.event_name , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city ( Hundred ) , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_date",
      "expense.expense_description",
      "expense.expense_id",
      "expense.approved",
      "expense.*",
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. | drivers : drivers.dob , drivers.nationality ( German ) , drivers.driverid , drivers.surname , drivers.forename , drivers.* | pitstops : pitstops.duration , pitstops.stop , pitstops.driverid , pitstops.milliseconds , pitstops.raceid , pitstops.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.position , laptimes.* | driverstandings : driverstandings.driverid , driverstandings.raceid , driverstandings.points , driverstandings.position , driverstandings.wins , driverstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.surname",
      "drivers.forename",
      "drivers.*",
      "pitstops.duration",
      "pitstops.stop",
      "pitstops.driverid",
      "pitstops.milliseconds",
      "pitstops.raceid",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.position",
      "laptimes.*",
      "driverstandings.driverid",
      "driverstandings.raceid",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.wins",
      "driverstandings.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which foot is preferred by Abdou Diallo? | player : player.player_name ( Abdou Diallo ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.preferred_foot , player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.preferred_foot",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver has the fastest lap time? Please give their forenames and surnames. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.code , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.fastestlaptime , results.fastestlapspeed , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the highest eligible free rate for K-12 students in the schools in Alameda County? | frpm : frpm.county name ( Alameda ) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.free meal count (k-12) , frpm.school code , frpm.* | schools : schools.county ( Alameda ) , schools.gsoffered ( K-12 ) , schools.cdscode , schools.gsserved ( K-12 ) , schools.latitude , schools.* | satscores : satscores.numge1500 , satscores.enroll12 , satscores.cds , satscores.cname ( Alameda ) , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.*",
      "schools.county",
      "schools.gsoffered",
      "schools.cdscode",
      "schools.gsserved",
      "schools.latitude",
      "schools.*",
      "satscores.numge1500",
      "satscores.enroll12",
      "satscores.cds",
      "satscores.cname",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'. | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How many drivers managed to finish the race in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.circuitid , races.time , races.* | results : results.driverid , results.raceid , results.laps , results.resultid , results.constructorid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | status : status.status ( Finished ) , status.statusid , status.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.circuitid",
      "races.time",
      "races.*",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.resultid",
      "results.constructorid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "status.status",
      "status.statusid",
      "status.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? | patient : patient.first date , patient.sex , patient.diagnosis ( BEHCET ) , patient.admission , patient.id , patient.* | examination : examination.diagnosis ( Behcet ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.sex",
      "patient.diagnosis",
      "patient.admission",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which customers, paying in CZK, consumed the most gas in 2011? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | transactions_1k : transactions_1k.date , transactions_1k.time , transactions_1k.amount , transactions_1k.price , transactions_1k.customerid , transactions_1k.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "transactions_1k.date",
      "transactions_1k.time",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.customerid",
      "transactions_1k.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? | player : player.player_name ( Jordan Bowery , Landon Donovan ) , player.player_api_id , player.id , player.player_fifa_api_id , player.height , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.height",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. | district : district.a11 , district.district_id , district.a3 , district.a2 , district.a8 , district.* | loan : loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.status , loan.* | disp : disp.type , disp.account_id , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a11",
      "district.district_id",
      "district.a3",
      "district.a2",
      "district.a8",
      "district.*",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. | sets : sets.type ( commander , expansion ) , sets.id , sets.totalsetsize , sets.isonlineonly , sets.isnonfoilonly , sets.* | cards : cards.promotypes , cards.types , cards.subtypes , cards.ispromo , cards.name , cards.* | legalities : legalities.uuid , legalities.id , legalities.status , legalities.format ( commander ) , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.type",
      "sets.id",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.isnonfoilonly",
      "sets.*",
      "cards.promotypes",
      "cards.types",
      "cards.subtypes",
      "cards.ispromo",
      "cards.name",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.status",
      "legalities.format",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which toxic element can be found in the molecule TR151? | atom : atom.element , atom.molecule_id ( TR151 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR151 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR151 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the percentage of female patient were born after 1930? | patient : patient.sex , patient.birthday , patient.first date , patient.id , patient.description , patient.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.ana pattern , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.gpt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.description",
      "patient.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.gpt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height for each superhero. | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | hero_attribute : hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.attribute_value , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.attribute_value",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? | patient : patient.first date , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.u-pro , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.u-pro",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? | races : races.raceid , races.name , races.year , races.round , races.date , races.* | results : results.fastestlapspeed , results.raceid , results.driverid , results.fastestlap , results.statusid , results.* | drivers : drivers.surname ( Speed , di Resta ) , drivers.forename ( Paul ) , drivers.driverref ( resta , speed ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.raceid",
      "races.name",
      "races.year",
      "races.round",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.raceid",
      "results.driverid",
      "results.fastestlap",
      "results.statusid",
      "results.*",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? | patient : patient.sex , patient.id , patient.diagnosis , patient.birthday , patient.description , patient.* | laboratory : laboratory.fg , laboratory.wbc , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.fg",
      "laboratory.wbc",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal RF don't have thrombosis? | examination : examination.diagnosis ( Normal , thrombosis ) , examination.thrombosis , examination.id , examination.symptoms , examination.kct , examination.* | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.glu , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? | cards : cards.artist ( Aaron Miller , Jeremy Jarvis ) , cards.asciiname , cards.name , cards.uuid , cards.id , cards.* | sets : sets.name ( Coldsnap ) , sets.code , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.asciiname",
      "cards.name",
      "cards.uuid",
      "cards.id",
      "cards.*",
      "sets.name",
      "sets.code",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? | atom : atom.element , atom.atom_id ( TR004_7 ) , atom.molecule_id , atom.* | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.numtsttakr , satscores.rtype , satscores.* | schools : schools.admlname3 , schools.admfname3 , schools.admlname1 ( Administration ) , schools.admlname2 , schools.admfname2 , schools.* | frpm : frpm.cdscode , frpm.school name , frpm.school code , frpm.school type , frpm.academic year , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.rtype",
      "satscores.*",
      "schools.admlname3",
      "schools.admfname3",
      "schools.admlname1",
      "schools.admlname2",
      "schools.admfname2",
      "schools.*",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.school code",
      "frpm.school type",
      "frpm.academic year",
      "frpm.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the name of the closed event whose cost has exceeded the budget the most. | expense : expense.cost , expense.approved , expense.link_to_budget , expense.link_to_member , expense.expense_id , expense.* | event : event.event_name , event.status ( Closed ) , event.event_id , event.notes , event.location , event.* | budget : budget.event_status ( Closed ) , budget.amount , budget.budget_id , budget.link_to_event , budget.category , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.approved",
      "expense.link_to_budget",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.*",
      "event.event_name",
      "event.status",
      "event.event_id",
      "event.notes",
      "event.location",
      "event.*",
      "budget.event_status",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.category",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\". | member : member.phone , member.member_id , member.zip , member.link_to_major , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.phone",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? | races : races.name ( Austrian Grand Prix ) , races.date , races.raceid , races.time , races.circuitid , races.* | pitstops : pitstops.duration , pitstops.raceid , pitstops.stop , pitstops.lap , pitstops.time , pitstops.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.laps , results.raceid , results.time , results.driverid , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.date",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "pitstops.duration",
      "pitstops.raceid",
      "pitstops.stop",
      "pitstops.lap",
      "pitstops.time",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.laps",
      "results.raceid",
      "results.time",
      "results.driverid",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. | team : team.team_long_name , team.team_short_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.chancecreationpassingclass ( Normal ) , team_attributes.buildupplaydribblingclass ( Normal ) , team_attributes.chancecreationpassing , team_attributes.date , team_attributes.team_api_id , team_attributes.* | match : match.season , match.id , match.stage , match.date , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.season",
      "match.id",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? | atom : atom.element , atom.atom_id ( TR004_7 ) , atom.molecule_id , atom.* | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.ra , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.ra",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Identify the gender of the superhero who has the ability of Phoenix Force. | gender : gender.gender , gender.id , gender.* | superpower : superpower.power_name ( Phoenix Force ) , superpower.id , superpower.* | superhero : superhero.gender_id , superhero.superhero_name ( Phoenix ) , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver has the fastest lap time? Please give their forenames and surnames. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.code , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.fastestlaptime , results.fastestlapspeed , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Describe the display name of the parent ID for child post with the highest score. | posts : posts.score , posts.ownerdisplayname , posts.parentid , posts.id , posts.posttypeid , posts.* | users : users.displayname ( name ) , users.id , users.reputation , users.location , users.views , users.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.ownerdisplayname",
      "posts.parentid",
      "posts.id",
      "posts.posttypeid",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? | patient : patient.birthday , patient.first date , patient.id , patient.sex , patient.description , patient.* | laboratory : laboratory.t-cho , laboratory.date , laboratory.id , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.examination date , examination.id , examination.symptoms , examination.diagnosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.sex",
      "patient.description",
      "patient.*",
      "laboratory.t-cho",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.examination date",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of incredibly powerful cards in the set Coldsnap? | cards : cards.power , cards.name , cards.isonlineonly , cards.setcode , cards.uuid , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.uuid",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? | drivers : drivers.dob , drivers.number , drivers.driverid , drivers.surname , drivers.code , drivers.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | races : races.year , races.date , races.raceid , races.time , races.round , races.* | results : results.laps , results.fastestlap , results.time , results.driverid , results.points , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.number",
      "drivers.driverid",
      "drivers.surname",
      "drivers.code",
      "drivers.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.date",
      "races.raceid",
      "races.time",
      "races.round",
      "races.*",
      "results.laps",
      "results.fastestlap",
      "results.time",
      "results.driverid",
      "results.points",
      "results.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? | schools : schools.soctype ( Youth Authority Facilities ) , schools.closeddate , schools.county , schools.soc , schools.cdscode , schools.* | frpm : frpm.county name , frpm.school type ( Youth Authority Facilities ) , frpm.county code , frpm.school code , frpm.cdscode , frpm.* | satscores : satscores.numge1500 , satscores.cds , satscores.cname , satscores.rtype , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.soctype",
      "schools.closeddate",
      "schools.county",
      "schools.soc",
      "schools.cdscode",
      "schools.*",
      "frpm.county name",
      "frpm.school type",
      "frpm.county code",
      "frpm.school code",
      "frpm.cdscode",
      "frpm.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.cname",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? | cards : cards.artist ( Aaron Miller , Jeremy Jarvis ) , cards.asciiname , cards.name , cards.uuid , cards.id , cards.* | sets : sets.name ( Coldsnap ) , sets.code , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.asciiname",
      "cards.name",
      "cards.uuid",
      "cards.id",
      "cards.*",
      "sets.name",
      "sets.code",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the difference in the percentage of members in New Jersey and Vermont. | zip_code : zip_code.state ( New Jersey , Vermont ) , zip_code.city ( Jersey , Vermont ) , zip_code.zip_code , zip_code.short_state , zip_code.county , zip_code.* | member : member.member_id , member.zip , member.link_to_major , member.email , member.phone , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.state",
      "zip_code.city",
      "zip_code.zip_code",
      "zip_code.short_state",
      "zip_code.county",
      "zip_code.*",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.email",
      "member.phone",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? | patient : patient.birthday , patient.first date , patient.id , patient.sex , patient.description , patient.* | laboratory : laboratory.t-cho , laboratory.date , laboratory.id , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.examination date , examination.id , examination.symptoms , examination.diagnosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.sex",
      "patient.description",
      "patient.*",
      "laboratory.t-cho",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.examination date",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. | event : event.event_name , event.status ( Closed ) , event.type ( Game ) , event.event_date , event.event_id , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.county , zip_code.type , zip_code.state , zip_code.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.status",
      "event.type",
      "event.event_date",
      "event.event_id",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.county",
      "zip_code.type",
      "zip_code.state",
      "zip_code.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM | comments : comments.score , comments.creationdate , comments.postid , comments.userid , comments.id , comments.* | posts : posts.creaiondate , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.creationdate",
      "comments.postid",
      "comments.userid",
      "comments.id",
      "comments.*",
      "posts.creaiondate",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How many matches in the 2015/2016 season were held in Scotland Premier League\n? | league : league.name ( Scotland Premier League ) , league.country_id , league.id , league.* | match : match.season ( 2015/2016 ) , match.league_id , match.id , match.stage , match.date , match.* | country : country.name ( Scotland ) , country.id , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.id",
      "match.stage",
      "match.date",
      "match.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. | player : player.birthday , player.player_name , player.player_fifa_api_id , player.player_api_id , player.height , player.* | player_attributes : player_attributes.sprint_speed , player_attributes.date , player_attributes.acceleration , player_attributes.player_api_id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.birthday",
      "player.player_name",
      "player.player_fifa_api_id",
      "player.player_api_id",
      "player.height",
      "player.*",
      "player_attributes.sprint_speed",
      "player_attributes.date",
      "player_attributes.acceleration",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 , district.* | order : order.order_id , order.account_id , order.amount , order.account_to , order.k_symbol , order.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "order.order_id",
      "order.account_id",
      "order.amount",
      "order.account_to",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more male patients with creatinine not within the normal range than female? True or False? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.symptoms , examination.lac , examination.* | laboratory : laboratory.cre , laboratory.cpk , laboratory.id , laboratory.date , laboratory.pic , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.*",
      "laboratory.cre",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Identify the gender of the superhero who has the ability of Phoenix Force. | gender : gender.gender , gender.id , gender.* | superpower : superpower.power_name ( Phoenix Force ) , superpower.id , superpower.* | superhero : superhero.gender_id , superhero.superhero_name ( Phoenix ) , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Mention the category of events which were held at MU 215. | event : event.location ( MU 215 ) , event.type , event.event_name , event.event_id , event.event_date , event.* | budget : budget.category , budget.budget_id , budget.spent , budget.remaining , budget.amount , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.location",
      "event.type",
      "event.event_name",
      "event.event_id",
      "event.event_date",
      "event.*",
      "budget.category",
      "budget.budget_id",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the most durability published by Dark Horse Comics? | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | superpower : superpower.power_name ( Durability ) , superpower.id , superpower.* | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.publisher_id , superhero.id , superhero.* | attribute : attribute.attribute_name ( Durability ) , attribute.id , attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.*",
      "attribute.attribute_name",
      "attribute.id",
      "attribute.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.enroll12 , satscores.numtsttakr , satscores.* | schools : schools.streetabr , schools.state , schools.city , schools.zip , schools.street , schools.* | frpm : frpm.low grade , frpm.school name , frpm.cdscode , frpm.high grade , frpm.school code , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numtsttakr",
      "satscores.*",
      "schools.streetabr",
      "schools.state",
      "schools.city",
      "schools.zip",
      "schools.street",
      "schools.*",
      "frpm.low grade",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.high grade",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many members did attend the event 'Community Theater' in 2019? | event : event.event_name ( Community Theater ) , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.email , member.phone , member.link_to_major , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.phone",
      "member.link_to_major",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? | cards : cards.convertedmanacost , cards.isonlineonly , cards.faceconvertedmanacost , cards.uuid , cards.name , cards.* | sets : sets.name ( Coldsnap ) , sets.isonlineonly , sets.mcmname ( Coldsnap ) , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.isonlineonly",
      "cards.faceconvertedmanacost",
      "cards.uuid",
      "cards.name",
      "cards.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.mcmname",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which molecules have triple bonds and list all the elements they contain. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'. | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is reference name of Robert Kubica? | drivers : drivers.surname ( Kubica ) , drivers.driverref ( kubica ) , drivers.forename , drivers.driverid , drivers.dob , drivers.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.milliseconds , laptimes.* | races : races.year , races.raceid , races.name , races.time , races.round , races.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.driverref",
      "drivers.forename",
      "drivers.driverid",
      "drivers.dob",
      "drivers.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.time",
      "races.round",
      "races.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? | patient : patient.first date , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.u-pro , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.u-pro",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many members did attend the event 'Community Theater' in 2019? | event : event.event_name ( Community Theater ) , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.email , member.phone , member.link_to_major , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.phone",
      "member.link_to_major",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? | legalities : legalities.format ( legacy ) , legalities.status , legalities.uuid , legalities.id , legalities.* | cards : cards.frameversion , cards.artist ( D. Alexander Gregory ) , cards.name , cards.hascontentwarning , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.id",
      "legalities.*",
      "cards.frameversion",
      "cards.artist",
      "cards.name",
      "cards.hascontentwarning",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. | superhero : superhero.weight_kg , superhero.eye_colour_id , superhero.superhero_name ( Data ) , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.weight_kg",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the product description of the products consumed in September, 2013. | products : products.description , products.productid , products.* | yearmonth : yearmonth.date , yearmonth.consumption , yearmonth.customerid , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "products.description",
      "products.productid",
      "products.*",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n? | player : player.player_name ( Aaron Appindangoye , Abdou Diallo ) , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.ball_control , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.ball_control",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the atoms' elements that form bond TR000_2_3. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR000_2_3 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR000_2_3 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In which years did Lewis Hamilton participate in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.circuitid , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.constructorid , results.raceid , results.driverid , results.number , results.grid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.circuitid",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.constructorid",
      "results.raceid",
      "results.driverid",
      "results.number",
      "results.grid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the composition of element chlorine in percentage among the single bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. | superhero : superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.alignment_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | alignment : alignment.alignment ( Good ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.alignment_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? | examination : examination.ana pattern , examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.* | patient : patient.id , patient.admission , patient.sex , patient.birthday , patient.description , patient.* | laboratory : laboratory.t-bil , laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.ana pattern",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the total average cost that Elijah Allen spent in the events on September and October. | member : member.last_name ( Allen ) , member.first_name ( Elijah ) , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_date , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_date , event.event_id , event.event_name , event.type , event.notes , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_date",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_date",
      "event.event_id",
      "event.event_name",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? | patient : patient.birthday , patient.diagnosis ( SJS ) , patient.first date , patient.admission , patient.id , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.hct , laboratory.got , laboratory.* | examination : examination.id , examination.diagnosis ( SjS ) , examination.symptoms , examination.examination date , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver has the fastest lap time? Please give their forenames and surnames. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.code , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.fastestlaptime , results.fastestlapspeed , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? | atom : atom.element , atom.atom_id ( TR004_7 ) , atom.molecule_id , atom.* | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes. | comments : comments.score , comments.userdisplayname , comments.userid , comments.id , comments.postid , comments.* | users : users.downvotes , users.upvotes , users.displayname , users.id , users.views , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userdisplayname",
      "comments.userid",
      "comments.id",
      "comments.postid",
      "comments.*",
      "users.downvotes",
      "users.upvotes",
      "users.displayname",
      "users.id",
      "users.views",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all carcinogenic molecules and their elements. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more male patients with creatinine not within the normal range than female? True or False? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.symptoms , examination.lac , examination.* | laboratory : laboratory.cre , laboratory.cpk , laboratory.id , laboratory.date , laboratory.pic , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.*",
      "laboratory.cre",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. | transactions_1k : transactions_1k.time , transactions_1k.date , transactions_1k.amount , transactions_1k.price , transactions_1k.transactionid , transactions_1k.* | gasstations : gasstations.chainid , gasstations.segment , gasstations.country , gasstations.gasstationid , gasstations.* | yearmonth : yearmonth.customerid , yearmonth.date , yearmonth.consumption , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.*",
    "output_sequence": " | ",
    "tc_original": [
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.transactionid",
      "transactions_1k.*",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.*",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height of all neutral superheroes. | superhero : superhero.height_cm , superhero.alignment_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.* | alignment : alignment.alignment ( Neutral ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.alignment_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "On average how many carcinogenic molecules are single bonded? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which foot is preferred by Abdou Diallo? | player : player.player_name ( Abdou Diallo ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.preferred_foot , player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.preferred_foot",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. | member : member.first_name , member.last_name , member.member_id , member.zip , member.email , member.* | income : income.date_received , income.amount , income.income_id , income.source , income.notes , income.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "income.date_received",
      "income.amount",
      "income.income_id",
      "income.source",
      "income.notes",
      "income.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the hero name and race of Charles Chandler. | race : race.race , race.id , race.* | superhero : superhero.superhero_name , superhero.full_name ( Charles Chandler ) , superhero.race_id , superhero.skin_colour_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "race.race",
      "race.id",
      "race.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver has the fastest lap time? Please give their forenames and surnames. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.code , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.fastestlaptime , results.fastestlapspeed , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? | examination : examination.diagnosis ( thrombosis ) , examination.ana pattern , examination.acl igg , examination.thrombosis , examination.acl iga , examination.* | patient : patient.diagnosis ( ANA ) , patient.id , patient.sex , patient.admission , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.sm , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.acl igg",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*",
      "patient.diagnosis",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. | district : district.a11 , district.district_id , district.a3 , district.a2 , district.a8 , district.* | loan : loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.status , loan.* | disp : disp.type , disp.account_id , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a11",
      "district.district_id",
      "district.a3",
      "district.a2",
      "district.a8",
      "district.*",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70? | player : player.height , player.weight , player.birthday , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.strength , player_attributes.overall_rating , player_attributes.potential , player_attributes.player_api_id , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.height",
      "player.weight",
      "player.birthday",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.strength",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.milliseconds , laptimes.* | races : races.raceid , races.year , races.name , races.round , races.time , races.* | results : results.fastestlaptime , results.constructorid , results.driverid , results.raceid , results.time , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.raceid",
      "races.year",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.driverid",
      "results.raceid",
      "results.time",
      "results.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which home team had lost the fewest matches in the 2016 season? | match : match.season , match.home_team_api_id , match.away_team_api_id , match.id , match.stage , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.vision , player_attributes.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.season",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.vision",
      "player_attributes.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which country is the league Italy Serie A from? | country : country.name ( Italy ) , country.id , country.* | league : league.name ( Italy Serie A ) , league.country_id , league.id , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.* | player : player.id , player.birthday , player.height , player.weight , player.player_api_id , player.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*",
      "player.id",
      "player.birthday",
      "player.height",
      "player.weight",
      "player.player_api_id",
      "player.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? | bond : bond.bond_type , bond.molecule_id ( TR010 ) , bond.bond_id , bond.* | molecule : molecule.molecule_id ( TR010 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.element , atom.atom_id , atom.molecule_id ( TR010 ) , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. | patient : patient.sex , patient.id , patient.birthday , patient.description , patient.diagnosis , patient.* | laboratory : laboratory.glu , laboratory.t-cho , laboratory.tg , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.description",
      "patient.diagnosis",
      "patient.*",
      "laboratory.glu",
      "laboratory.t-cho",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the composition of element chlorine in percentage among the single bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the long name of teams with above-average build-up play passing in 2012. | team : team.team_long_name , team.team_api_id , team.team_short_name , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.buildupplaypassing , team_attributes.buildupplaypassingclass ( Long ) , team_attributes.buildupplayspeed , team_attributes.team_api_id , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.buildupplayspeed",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How many drivers managed to finish the race in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.circuitid , races.time , races.* | results : results.driverid , results.raceid , results.laps , results.resultid , results.constructorid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | status : status.status ( Finished ) , status.statusid , status.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.circuitid",
      "races.time",
      "races.*",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.resultid",
      "results.constructorid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "status.status",
      "status.statusid",
      "status.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. | superhero : superhero.eye_colour_id , superhero.publisher_id , superhero.skin_colour_id , superhero.hair_colour_id , superhero.superhero_name , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.publisher_id",
      "superhero.skin_colour_id",
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more in-patient or outpatient who were male? What is the deviation in percentage? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.examination date , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.ra , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.ra",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the ratio of male to female patients among all those with abnormal uric acid counts? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the composition of element chlorine in percentage among the single bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? | match : match.date , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | league : league.name , league.country_id , league.id , league.* | country : country.name , country.id , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.agility , player_attributes.balance , player_attributes.jumping , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.date",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.jumping",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. | superhero : superhero.weight_kg , superhero.eye_colour_id , superhero.superhero_name ( Data ) , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.weight_kg",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher for Hawkman, Karate Kid and Speedy? | superhero : superhero.superhero_name ( Hawkman , Karate Kid ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Which district has highest active loan? | district : district.a2 , district.a3 , district.district_id , district.a4 , district.a6 , district.* | loan : loan.status , loan.loan_id , loan.account_id , loan.amount , loan.date , loan.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.a4",
      "district.a6",
      "district.*",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? | loan : loan.date , loan.amount , loan.account_id , loan.duration , loan.loan_id , loan.* | client : client.gender , client.client_id , client.birth_date , client.district_id , client.* | account : account.account_id , account.date , account.district_id , account.frequency , account.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.amount",
      "loan.account_id",
      "loan.duration",
      "loan.loan_id",
      "loan.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.frequency",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. | sets : sets.type ( commander , expansion ) , sets.id , sets.totalsetsize , sets.isonlineonly , sets.isnonfoilonly , sets.* | cards : cards.promotypes , cards.types , cards.subtypes , cards.ispromo , cards.name , cards.* | legalities : legalities.uuid , legalities.id , legalities.status , legalities.format ( commander ) , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.type",
      "sets.id",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.isnonfoilonly",
      "sets.*",
      "cards.promotypes",
      "cards.types",
      "cards.subtypes",
      "cards.ispromo",
      "cards.name",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.status",
      "legalities.format",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the long name of teams with above-average build-up play passing in 2012. | team : team.team_long_name , team.team_api_id , team.team_short_name , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.buildupplaypassing , team_attributes.buildupplaypassingclass ( Long ) , team_attributes.buildupplayspeed , team_attributes.team_api_id , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.buildupplayspeed",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. | patient : patient.sex , patient.id , patient.birthday , patient.description , patient.diagnosis , patient.* | laboratory : laboratory.glu , laboratory.t-cho , laboratory.tg , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.description",
      "patient.diagnosis",
      "patient.*",
      "laboratory.glu",
      "laboratory.t-cho",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the product description of the products consumed in September, 2013. | products : products.description , products.productid , products.* | yearmonth : yearmonth.date , yearmonth.consumption , yearmonth.customerid , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "products.description",
      "products.productid",
      "products.*",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. | patient : patient.id , patient.birthday , patient.sex , patient.first date , patient.description , patient.* | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.alp , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.first date",
      "patient.description",
      "patient.*",
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.alp",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR004_8_9 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Find the triple-bonded molecules which are carcinogenic. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Give the name of the league had the most goals in the 2016 season? | league : league.name , league.id , league.country_id , league.* | match : match.season , match.league_id , match.home_team_goal , match.away_team_goal , match.id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.balance , player_attributes.strength , player_attributes.vision , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.balance",
      "player_attributes.strength",
      "player_attributes.vision",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? | patient : patient.sex , patient.id , patient.birthday , patient.diagnosis , patient.admission , patient.* | examination : examination.acl iga , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.diagnosis",
      "patient.admission",
      "patient.*",
      "examination.acl iga",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. | schools : schools.gsoffered , schools.city , schools.magnet , schools.gsserved , schools.cdscode , schools.* | frpm : frpm.nslp provision status ( Multiple Provision Types , Provision 3 ) , frpm.cdscode , frpm.school type , frpm.school name , frpm.irc , frpm.* | satscores : satscores.cds , satscores.numge1500 , satscores.rtype , satscores.sname , satscores.dname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.gsoffered",
      "schools.city",
      "schools.magnet",
      "schools.gsserved",
      "schools.cdscode",
      "schools.*",
      "frpm.nslp provision status",
      "frpm.cdscode",
      "frpm.school type",
      "frpm.school name",
      "frpm.irc",
      "frpm.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many atoms with iodine and with sulfur type elements are there in single bond molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which home team had lost the fewest matches in the 2016 season? | match : match.season , match.home_team_api_id , match.away_team_api_id , match.id , match.stage , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.vision , player_attributes.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.season",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.vision",
      "player_attributes.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the ratio of male to female patients among all those with abnormal uric acid counts? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of blue female superheroes among all female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | colour : colour.colour ( Blue ) , colour.id , colour.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.skin_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.skin_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.time ( 16:25:00 ) , transactions_1k.date , transactions_1k.customerid , transactions_1k.amount , transactions_1k.price , transactions_1k.* | yearmonth : yearmonth.date , yearmonth.customerid , yearmonth.consumption , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.customerid",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.*",
      "yearmonth.date",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List all the football player with the highest potential score. | player : player.player_name , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.potential , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.player_fifa_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.player_fifa_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which toxic element can be found in the molecule TR151? | atom : atom.element , atom.molecule_id ( TR151 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR151 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR151 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please list the lap records for the circuits in Italy. | circuits : circuits.country ( Italy ) , circuits.circuitid , circuits.name , circuits.circuitref , circuits.location , circuits.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.laps , results.fastestlap , results.fastestlaptime , results.fastestlapspeed , results.time , results.* | races : races.circuitid , races.year , races.raceid , races.name , races.date , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "circuits.country",
      "circuits.circuitid",
      "circuits.name",
      "circuits.circuitref",
      "circuits.location",
      "circuits.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.laps",
      "results.fastestlap",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.time",
      "results.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.name",
      "races.date",
      "races.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which molecules have triple bonds and list all the elements they contain. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down at least five full names of superheroes with blue eyes. | superhero : superhero.full_name , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.full_name",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Give the full name and contact number of members who had to spend more than average on each expense. | member : member.first_name , member.last_name , member.phone , member.email , member.member_id , member.* | expense : expense.cost , expense.expense_id , expense.approved , expense.link_to_member , expense.expense_description , expense.* | zip_code : zip_code.zip_code , zip_code.city ( Given ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.phone",
      "member.email",
      "member.member_id",
      "member.*",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_description",
      "expense.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event. | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | expense : expense.approved , expense.link_to_member , expense.expense_id , expense.cost , expense.link_to_budget , expense.* | member : member.member_id , member.zip , member.first_name , member.last_name , member.link_to_major , member.* | event : event.event_date , event.event_id , event.status , event.type , event.notes , event.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.cost",
      "expense.link_to_budget",
      "expense.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.last_name",
      "member.link_to_major",
      "member.*",
      "event.event_date",
      "event.event_id",
      "event.status",
      "event.type",
      "event.notes",
      "event.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the long name of teams with above-average build-up play passing in 2012. | team : team.team_long_name , team.team_api_id , team.team_short_name , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.buildupplaypassing , team_attributes.buildupplaypassingclass ( Long ) , team_attributes.buildupplayspeed , team_attributes.team_api_id , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.buildupplayspeed",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.milliseconds , laptimes.* | races : races.raceid , races.year , races.name , races.round , races.time , races.* | results : results.fastestlaptime , results.constructorid , results.driverid , results.raceid , results.time , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.raceid",
      "races.year",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.driverid",
      "results.raceid",
      "results.time",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many members did attend the event 'Community Theater' in 2019? | event : event.event_name ( Community Theater ) , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.email , member.phone , member.link_to_major , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.phone",
      "member.link_to_major",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. | atom : atom.element , atom.molecule_id ( TR000 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR000 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR000 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the element and bond type included in the molecule with molecule ID of TR002. | bond : bond.bond_type , bond.molecule_id ( TR002 ) , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR002 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR002 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is reference name of Robert Kubica? | drivers : drivers.surname ( Kubica ) , drivers.driverref ( kubica ) , drivers.forename , drivers.driverid , drivers.dob , drivers.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.milliseconds , laptimes.* | races : races.year , races.raceid , races.name , races.time , races.round , races.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.driverref",
      "drivers.forename",
      "drivers.driverid",
      "drivers.dob",
      "drivers.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.time",
      "races.round",
      "races.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.milliseconds , laptimes.* | races : races.raceid , races.year , races.name , races.round , races.time , races.* | results : results.fastestlaptime , results.constructorid , results.driverid , results.raceid , results.time , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.raceid",
      "races.year",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.driverid",
      "results.raceid",
      "results.time",
      "results.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Which district has highest active loan? | district : district.a2 , district.a3 , district.district_id , district.a4 , district.a6 , district.* | loan : loan.status , loan.loan_id , loan.account_id , loan.amount , loan.date , loan.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.a4",
      "district.a6",
      "district.*",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. | district : district.a13 , district.a12 , district.a2 , district.a3 , district.district_id , district.* | loan : loan.duration , loan.status , loan.loan_id , loan.account_id , loan.date , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a13",
      "district.a12",
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.*",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. | laboratory : laboratory.date , laboratory.t-bil , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.id , patient.admission , patient.first date , patient.diagnosis , patient.sex , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.examination date , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.id",
      "patient.admission",
      "patient.first date",
      "patient.diagnosis",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.examination date",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. | races : races.year , races.circuitid , races.time , races.date , races.raceid , races.* | drivers : drivers.surname ( Hamilton ) , drivers.driverref ( hamilton ) , drivers.driverid , drivers.forename , drivers.code , drivers.* | circuits : circuits.name , circuits.circuitid , circuits.circuitref , circuits.alt , circuits.location , circuits.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.circuitid",
      "races.time",
      "races.date",
      "races.raceid",
      "races.*",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.forename",
      "drivers.code",
      "drivers.*",
      "circuits.name",
      "circuits.circuitid",
      "circuits.circuitref",
      "circuits.alt",
      "circuits.location",
      "circuits.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? | client : client.gender , client.district_id , client.client_id , client.birth_date , client.* | district : district.a3 ( south Bohemia ) , district.a4 , district.district_id , district.a5 , district.a2 , district.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.client_id , disp.type , disp.disp_id , disp.account_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.district_id",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.a4",
      "district.district_id",
      "district.a5",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.account_id",
      "disp.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the long name of teams with above-average build-up play passing in 2012. | team : team.team_long_name , team.team_api_id , team.team_short_name , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.buildupplaypassing , team_attributes.buildupplaypassingclass ( Long ) , team_attributes.buildupplayspeed , team_attributes.team_api_id , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.buildupplayspeed",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which toxic element can be found in the molecule TR151? | atom : atom.element , atom.molecule_id ( TR151 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR151 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR151 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? | set_translations : set_translations.language , set_translations.translation ( Mirrodin ) , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.name ( Mirrodin ) , sets.isonlineonly , sets.code , sets.mcmname ( Mirrodin ) , sets.block ( Mirrodin ) , sets.* | cards : cards.name , cards.isonlineonly , cards.subtypes ( Mirrodin ) , cards.uuid , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.mcmname",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.isonlineonly",
      "cards.subtypes",
      "cards.uuid",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.kct , examination.* | patient : patient.id , patient.sex , patient.admission , patient.diagnosis , patient.birthday , patient.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many white bordered cards are powerful? | cards : cards.power , cards.bordercolor ( white ) , cards.uuid , cards.id , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.bordercolor",
      "cards.uuid",
      "cards.id",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. | sets : sets.id , sets.isforeignonly , sets.code , sets.isfoilonly , sets.isonlineonly , sets.* | cards : cards.name ( Foil ) , cards.availability , cards.facename ( Response ) , cards.isonlineonly , cards.setcode , cards.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.isforeignonly",
      "sets.code",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "cards.name",
      "cards.availability",
      "cards.facename",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | player : player.player_name ( Marko Arnautovic ) , player.player_api_id , player.player_fifa_api_id , player.birthday , player.id , player.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.id",
      "player.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Among all the lap records set on various circuits, what is the time for the fastest one? | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.fastestlaptime , results.fastestlap , results.fastestlapspeed , results.laps , results.time , results.* | circuits : circuits.circuitid , circuits.name , circuits.url , circuits.circuitref , circuits.lat , circuits.* | races : races.circuitid , races.year , races.raceid , races.time , races.name , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlap",
      "results.fastestlapspeed",
      "results.laps",
      "results.time",
      "results.*",
      "circuits.circuitid",
      "circuits.name",
      "circuits.url",
      "circuits.circuitref",
      "circuits.lat",
      "circuits.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.time",
      "races.name",
      "races.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the cost of posters for 'September Speaker' event. | expense : expense.cost , expense.expense_description ( Posters ) , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_name ( September Speaker ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Costa ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many white bordered cards are powerful? | cards : cards.power , cards.bordercolor ( white ) , cards.uuid , cards.id , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.bordercolor",
      "cards.uuid",
      "cards.id",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? | bond : bond.bond_type , bond.molecule_id ( TR010 ) , bond.bond_id , bond.* | molecule : molecule.molecule_id ( TR010 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.element , atom.atom_id , atom.molecule_id ( TR010 ) , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which foot is preferred by Abdou Diallo? | player : player.player_name ( Abdou Diallo ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.preferred_foot , player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.preferred_foot",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.kct , examination.acl igg , examination.rvvt , examination.* | laboratory : laboratory.hgb , laboratory.id , laboratory.t-bil , laboratory.hct , laboratory.tp , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.kct",
      "examination.acl igg",
      "examination.rvvt",
      "examination.*",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.t-bil",
      "laboratory.hct",
      "laboratory.tp",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes. | superhero : superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.alignment_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | alignment : alignment.alignment ( Good ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.alignment_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? | client : client.gender , client.district_id , client.client_id , client.birth_date , client.* | district : district.a3 ( south Bohemia ) , district.a4 , district.district_id , district.a5 , district.a2 , district.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.client_id , disp.type , disp.disp_id , disp.account_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.district_id",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.a4",
      "district.district_id",
      "district.a5",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.account_id",
      "disp.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher for Hawkman, Karate Kid and Speedy? | superhero : superhero.superhero_name ( Hawkman , Karate Kid ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. | bond : bond.bond_id ( TR001_2_4 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_2_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic? | atom : atom.element , atom.atom_id ( TR004_7 ) , atom.molecule_id , atom.* | connected : connected.atom_id ( TR004_7 ) , connected.atom_id2 ( TR004_7 ) , connected.bond_id , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? | player : player.player_name ( Jordan Bowery , Landon Donovan ) , player.player_api_id , player.id , player.player_fifa_api_id , player.height , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.height",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Find the triple-bonded molecules which are carcinogenic. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.superhero_name , superhero.gender_id , superhero.full_name , superhero.publisher_id , superhero.* | superpower : superpower.id , superpower.power_name , superpower.* | hero_attribute : hero_attribute.attribute_value , hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.*",
      "superpower.id",
      "superpower.power_name",
      "superpower.*",
      "hero_attribute.attribute_value",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the total atoms consisting of the element carbon and hydrogen. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down at least five full names of superheroes with blue eyes. | superhero : superhero.full_name , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.full_name",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Determine the bond type that is formed in the chemical compound containing element Carbon. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Among all the lap records set on various circuits, what is the time for the fastest one? | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.fastestlaptime , results.fastestlap , results.fastestlapspeed , results.laps , results.time , results.* | circuits : circuits.circuitid , circuits.name , circuits.url , circuits.circuitref , circuits.lat , circuits.* | races : races.circuitid , races.year , races.raceid , races.time , races.name , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlap",
      "results.fastestlapspeed",
      "results.laps",
      "results.time",
      "results.*",
      "circuits.circuitid",
      "circuits.name",
      "circuits.url",
      "circuits.circuitref",
      "circuits.lat",
      "circuits.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.time",
      "races.name",
      "races.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the highest eligible free rate for K-12 students in the schools in Alameda County? | frpm : frpm.county name ( Alameda ) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.free meal count (k-12) , frpm.school code , frpm.* | schools : schools.county ( Alameda ) , schools.gsoffered ( K-12 ) , schools.cdscode , schools.gsserved ( K-12 ) , schools.latitude , schools.* | satscores : satscores.numge1500 , satscores.enroll12 , satscores.cds , satscores.cname ( Alameda ) , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.*",
      "schools.county",
      "schools.gsoffered",
      "schools.cdscode",
      "schools.gsserved",
      "schools.latitude",
      "schools.*",
      "satscores.numge1500",
      "satscores.enroll12",
      "satscores.cds",
      "satscores.cname",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules without sulphur element is not having double bond? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the element and bond type included in the molecule with molecule ID of TR002. | bond : bond.bond_type , bond.molecule_id ( TR002 ) , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR002 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR002 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many cards available in paper have a positive starting maximum hand size? | cards : cards.availability ( paper ) , cards.hand , cards.uuid , cards.artist , cards.colors , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.availability",
      "cards.hand",
      "cards.uuid",
      "cards.artist",
      "cards.colors",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of atoms that can not bond with any other atoms. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Among the members who incurred expenses in more than one event, who paid the most amount? | expense : expense.link_to_member , expense.cost , expense.expense_id , expense.approved , expense.expense_date , expense.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.first_name , member.email , member.link_to_major , member.* | budget : budget.link_to_event , budget.amount , budget.budget_id , budget.category , budget.spent , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.link_to_member",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.expense_date",
      "expense.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.link_to_major",
      "member.*",
      "budget.link_to_event",
      "budget.amount",
      "budget.budget_id",
      "budget.category",
      "budget.spent",
      "budget.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? | patient : patient.first date , patient.sex , patient.diagnosis ( BEHCET ) , patient.admission , patient.id , patient.* | examination : examination.diagnosis ( Behcet ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.sex",
      "patient.diagnosis",
      "patient.admission",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.ana pattern , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? | patient : patient.admission , patient.id , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.rnp , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.rnp",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which countries have zip codes with post office boxes? | zip_code : zip_code.county , zip_code.zip_code , zip_code.city ( Post ) , zip_code.state , zip_code.type , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.link_to_event , budget.* | member : member.zip , member.member_id , member.email , member.position , member.phone , member.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.county",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.link_to_event",
      "budget.*",
      "member.zip",
      "member.member_id",
      "member.email",
      "member.position",
      "member.phone",
      "member.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? | frpm : frpm.school type ( Intermediate/Middle Schools (Public) ) , frpm.district name ( San Bernardino City Unified ) , frpm.district type , frpm.cdscode , frpm.school name , frpm.* | schools : schools.county ( San Bernardino ) , schools.soctype ( Intermediate/Middle Schools (Public) ) , schools.phone , schools.district ( San Bernardino City Unified , San Bernardino County ROP ) , schools.closeddate , schools.* | satscores : satscores.cds , satscores.numge1500 , satscores.dname ( San Bernardino City Unified ) , satscores.cname ( San Bernardino ) , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.school type",
      "frpm.district name",
      "frpm.district type",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.*",
      "schools.county",
      "schools.soctype",
      "schools.phone",
      "schools.district",
      "schools.closeddate",
      "schools.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.cname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down at least five full names of superheroes with blue eyes. | superhero : superhero.full_name , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.full_name",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the total atoms consisting of the element carbon and hydrogen. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | player : player.player_name ( Marko Arnautovic ) , player.player_api_id , player.player_fifa_api_id , player.birthday , player.id , player.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.id",
      "player.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many percent of female heroes were published by Marvel Comics? | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.publisher_id , superhero.id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more in-patient or outpatient who were male? What is the deviation in percentage? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.examination date , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.ra , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.ra",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of atoms that can not bond with any other atoms. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. | cards : cards.artist ( Jim Pavelec ) , cards.name , cards.id , cards.uuid , cards.asciiname , cards.* | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.name",
      "cards.id",
      "cards.uuid",
      "cards.asciiname",
      "cards.*",
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In which years did Lewis Hamilton participate in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.circuitid , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.constructorid , results.raceid , results.driverid , results.number , results.grid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.circuitid",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.constructorid",
      "results.raceid",
      "results.driverid",
      "results.number",
      "results.grid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the name of the closed event whose cost has exceeded the budget the most. | expense : expense.cost , expense.approved , expense.link_to_budget , expense.link_to_member , expense.expense_id , expense.* | event : event.event_name , event.status ( Closed ) , event.event_id , event.notes , event.location , event.* | budget : budget.event_status ( Closed ) , budget.amount , budget.budget_id , budget.link_to_event , budget.category , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.approved",
      "expense.link_to_budget",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.*",
      "event.event_name",
      "event.status",
      "event.event_id",
      "event.notes",
      "event.location",
      "event.*",
      "budget.event_status",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.category",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? | patient : patient.sex , patient.diagnosis ( PSS ) , patient.id , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( PSS ) , examination.id , examination.symptoms , examination.ana pattern , examination.thrombosis , examination.* | laboratory : laboratory.crp ( 2+ ) , laboratory.cre , laboratory.ra ( 2+ ) , laboratory.cpk , laboratory.t-bil , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.thrombosis",
      "examination.*",
      "laboratory.crp",
      "laboratory.cre",
      "laboratory.ra",
      "laboratory.cpk",
      "laboratory.t-bil",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.ra , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.ra",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the score and the link type ID for post ID 395? | posts : posts.score , posts.id , posts.posttypeid , posts.body , posts.title , posts.* | postlinks : postlinks.linktypeid , postlinks.postid , postlinks.relatedpostid , postlinks.id , postlinks.creationdate , postlinks.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment ( link , type ) , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.title",
      "posts.*",
      "postlinks.linktypeid",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.id",
      "postlinks.creationdate",
      "postlinks.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Calculate the average home team goal in the 2010/2011 season in the country of Poland. | country : country.name ( Poland ) , country.id , country.* | match : match.season ( 2010/2011 ) , match.home_team_goal , match.home_team_api_id , match.away_team_api_id , match.country_id , match.* | league : league.id , league.country_id , league.name , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "match.season",
      "match.home_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.country_id",
      "match.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "In 2012, who had the least consumption in LAM? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.segment ( LAM ) , customers.customerid , customers.currency , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.segment",
      "customers.customerid",
      "customers.currency",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "When was the first time did Kevin Constant have his highest crossing score? Give the date. | player : player.player_name ( Kevin Constant ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.player_api_id , player_attributes.overall_rating , player_attributes.potential , player_attributes.* | team_attributes : team_attributes.chancecreationcrossingclass , team_attributes.date , team_attributes.id , team_attributes.chancecreationcrossing , team_attributes.team_fifa_api_id , team_attributes.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.*",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.date",
      "team_attributes.id",
      "team_attributes.chancecreationcrossing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards with format commander and legal status do not have a content warning? | legalities : legalities.status ( Legal ) , legalities.format ( commander ) , legalities.id , legalities.uuid , legalities.* | cards : cards.hascontentwarning , cards.uuid , cards.name ( Warning ) , cards.isonlineonly , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.status",
      "legalities.format",
      "legalities.id",
      "legalities.uuid",
      "legalities.*",
      "cards.hascontentwarning",
      "cards.uuid",
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many superheroes with blonde hair are there? | colour : colour.colour ( Blond ) , colour.id , colour.* | superhero : superhero.hair_colour_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the element and bond type included in the molecule with molecule ID of TR002. | bond : bond.bond_type , bond.molecule_id ( TR002 ) , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR002 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR002 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? | set_translations : set_translations.language , set_translations.translation ( Mirrodin ) , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.name ( Mirrodin ) , sets.isonlineonly , sets.code , sets.mcmname ( Mirrodin ) , sets.block ( Mirrodin ) , sets.* | cards : cards.name , cards.isonlineonly , cards.subtypes ( Mirrodin ) , cards.uuid , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.mcmname",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.isonlineonly",
      "cards.subtypes",
      "cards.uuid",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' | posts : posts.title ( Open source tools for visualizing multi-dimensional data? , Visualizing multi-dimensional data (LSI) in 2D ) , posts.lasteditordisplayname , posts.owneruserid , posts.ownerdisplayname , posts.lasteditoruserid , posts.* | badges : badges.name ( Editor ) , badges.userid , badges.date , badges.id , badges.* | posthistory : posthistory.text ( Open source tools for visualizing multi-dimensional data ? , Open source tools for visualizing multi-dimensional data? ) , posthistory.postid , posthistory.userid , posthistory.id , posthistory.comment ( Title , data ) , posthistory.* | users : users.displayname ( editor ) , users.id , users.reputation , users.location , users.views , users.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.lasteditordisplayname",
      "posts.owneruserid",
      "posts.ownerdisplayname",
      "posts.lasteditoruserid",
      "posts.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "posthistory.text",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.comment",
      "posthistory.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? | patient : patient.id , patient.admission , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.cre , laboratory.sc170 , laboratory.cpk , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.cre",
      "laboratory.sc170",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? | order : order.amount , order.account_id , order.account_to , order.order_id , order.k_symbol , order.* | account : account.account_id , account.frequency , account.date , account.district_id , account.* | trans : trans.amount , trans.account_id , trans.balance , trans.trans_id , trans.type , trans.* | loan : loan.account_id , loan.amount , loan.date , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "order.amount",
      "order.account_id",
      "order.account_to",
      "order.order_id",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "trans.amount",
      "trans.account_id",
      "trans.balance",
      "trans.trans_id",
      "trans.type",
      "trans.*",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the owner user id of the most valuable post? | posts : posts.owneruserid , posts.score , posts.id , posts.title , posts.posttypeid , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | votes : votes.postid , votes.userid , votes.id , votes.creationdate , votes.bountyamount , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.score",
      "posts.id",
      "posts.title",
      "posts.posttypeid",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "votes.postid",
      "votes.userid",
      "votes.id",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? | patient : patient.sex , patient.birthday , patient.id , patient.first date , patient.admission , patient.* | laboratory : laboratory.pt , laboratory.aptt , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.thrombosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.*",
      "laboratory.pt",
      "laboratory.aptt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Please list the ID of the patient whose RF is normal and who is older than 60. | patient : patient.id , patient.birthday , patient.sex , patient.diagnosis , patient.description , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.lac , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.diagnosis",
      "patient.description",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.lac",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of incredibly powerful cards in the set Coldsnap? | cards : cards.power , cards.name , cards.isonlineonly , cards.setcode , cards.uuid , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.uuid",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? | comments : comments.score , comments.userid , comments.postid , comments.id , comments.text , comments.* | users : users.upvotes , users.downvotes , users.id , users.views , users.reputation , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userid",
      "comments.postid",
      "comments.id",
      "comments.text",
      "comments.*",
      "users.upvotes",
      "users.downvotes",
      "users.id",
      "users.views",
      "users.reputation",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the total atoms consisting of the element carbon and hydrogen. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many students of the Student_Club have attended the event \"Women's Soccer\"? | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | member : member.link_to_major , member.member_id , member.zip , member.position , member.first_name , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.position",
      "member.first_name",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "In 2012, who had the least consumption in LAM? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.segment ( LAM ) , customers.customerid , customers.currency , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.segment",
      "customers.customerid",
      "customers.currency",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\". | member : member.phone , member.member_id , member.zip , member.link_to_major , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.phone",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? | patient : patient.first date , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.u-pro , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.u-pro",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.publisher_id , superhero.gender_id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.publisher_id , superhero.gender_id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n? | player : player.player_name ( Aaron Appindangoye , Abdou Diallo ) , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.ball_control , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.ball_control",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Give the name of the league had the most goals in the 2016 season? | league : league.name , league.id , league.country_id , league.* | match : match.season , match.league_id , match.home_team_goal , match.away_team_goal , match.id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.balance , player_attributes.strength , player_attributes.vision , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.balance",
      "player_attributes.strength",
      "player_attributes.vision",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. | sets : sets.id , sets.isforeignonly , sets.code , sets.isfoilonly , sets.isonlineonly , sets.* | cards : cards.name ( Foil ) , cards.availability , cards.facename ( Response ) , cards.isonlineonly , cards.setcode , cards.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.isforeignonly",
      "sets.code",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "cards.name",
      "cards.availability",
      "cards.facename",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Give the name of the league had the most goals in the 2016 season? | league : league.name , league.id , league.country_id , league.* | match : match.season , match.league_id , match.home_team_goal , match.away_team_goal , match.id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.balance , player_attributes.strength , player_attributes.vision , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.balance",
      "player_attributes.strength",
      "player_attributes.vision",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. | team : team.team_long_name , team.team_short_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.chancecreationpassingclass ( Normal ) , team_attributes.buildupplaydribblingclass ( Normal ) , team_attributes.chancecreationpassing , team_attributes.date , team_attributes.team_api_id , team_attributes.* | match : match.season , match.id , match.stage , match.date , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.season",
      "match.id",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please list the lap records for the circuits in Italy. | circuits : circuits.country ( Italy ) , circuits.circuitid , circuits.name , circuits.circuitref , circuits.location , circuits.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.laps , results.fastestlap , results.fastestlaptime , results.fastestlapspeed , results.time , results.* | races : races.circuitid , races.year , races.raceid , races.name , races.date , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "circuits.country",
      "circuits.circuitid",
      "circuits.name",
      "circuits.circuitref",
      "circuits.location",
      "circuits.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.laps",
      "results.fastestlap",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.time",
      "results.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.name",
      "races.date",
      "races.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the product description of the products consumed in September, 2013. | products : products.description , products.productid , products.* | yearmonth : yearmonth.date , yearmonth.consumption , yearmonth.customerid , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "products.description",
      "products.productid",
      "products.*",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. | laboratory : laboratory.date , laboratory.plt , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.birthday , patient.id , patient.sex , patient.admission , patient.diagnosis , patient.* | examination : examination.examination date , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.birthday",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.*",
      "examination.examination date",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher's name of Blue Beetle II? | publisher : publisher.publisher_name , publisher.id , publisher.* | superhero : superhero.superhero_name ( Beetle , Blue Beetle ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What are the player api id of 10 heaviest players? | player : player.weight , player.player_api_id , player.player_fifa_api_id , player.height , player.id , player.* | player_attributes : player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.weight",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.height",
      "player.id",
      "player.*",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | laboratory : laboratory.ssb , laboratory.centromea , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "laboratory.ssb",
      "laboratory.centromea",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? | patient : patient.birthday , patient.first date , patient.id , patient.sex , patient.description , patient.* | laboratory : laboratory.t-cho , laboratory.date , laboratory.id , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.examination date , examination.id , examination.symptoms , examination.diagnosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.sex",
      "patient.description",
      "patient.*",
      "laboratory.t-cho",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.examination date",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many atoms with iodine and with sulfur type elements are there in single bond molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which countries have zip codes with post office boxes? | zip_code : zip_code.county , zip_code.zip_code , zip_code.city ( Post ) , zip_code.state , zip_code.type , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.link_to_event , budget.* | member : member.zip , member.member_id , member.email , member.position , member.phone , member.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.county",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.link_to_event",
      "budget.*",
      "member.zip",
      "member.member_id",
      "member.email",
      "member.position",
      "member.phone",
      "member.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which foot is preferred by Abdou Diallo? | player : player.player_name ( Abdou Diallo ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.preferred_foot , player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.preferred_foot",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.enroll12 , satscores.numtsttakr , satscores.* | schools : schools.streetabr , schools.state , schools.city , schools.zip , schools.street , schools.* | frpm : frpm.low grade , frpm.school name , frpm.cdscode , frpm.high grade , frpm.school code , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numtsttakr",
      "satscores.*",
      "schools.streetabr",
      "schools.state",
      "schools.city",
      "schools.zip",
      "schools.street",
      "schools.*",
      "frpm.low grade",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.high grade",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which post has the highest score? Please give its id and title's name. | posts : posts.title , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | comments : comments.postid , comments.score , comments.id , comments.text , comments.userid , comments.* | posthistory : posthistory.comment ( Title , title ) , posthistory.postid , posthistory.id , posthistory.userid , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "comments.postid",
      "comments.score",
      "comments.id",
      "comments.text",
      "comments.userid",
      "comments.*",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? | patient : patient.birthday , patient.first date , patient.id , patient.sex , patient.description , patient.* | laboratory : laboratory.t-cho , laboratory.date , laboratory.id , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.examination date , examination.id , examination.symptoms , examination.diagnosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.sex",
      "patient.description",
      "patient.*",
      "laboratory.t-cho",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.examination date",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.numtsttakr , satscores.rtype , satscores.* | schools : schools.admlname3 , schools.admfname3 , schools.admlname1 ( Administration ) , schools.admlname2 , schools.admfname2 , schools.* | frpm : frpm.cdscode , frpm.school name , frpm.school code , frpm.school type , frpm.academic year , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.rtype",
      "satscores.*",
      "schools.admlname3",
      "schools.admfname3",
      "schools.admlname1",
      "schools.admlname2",
      "schools.admfname2",
      "schools.*",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.school code",
      "frpm.school type",
      "frpm.academic year",
      "frpm.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? | patient : patient.admission , patient.id , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.rnp , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.rnp",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? | cards : cards.name ( Tendo Ice Bridge ) , cards.isonlineonly , cards.facename ( Ice ) , cards.uuid , cards.originalreleasedate , cards.* | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.name , foreign_data.id , foreign_data.text , foreign_data.* | sets : sets.name , sets.isonlineonly , sets.code ( ICE ) , sets.id , sets.block , sets.* | set_translations : set_translations.language ( French ) , set_translations.id , set_translations.setcode ( ICE ) , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.uuid",
      "cards.originalreleasedate",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.name",
      "foreign_data.id",
      "foreign_data.text",
      "foreign_data.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.block",
      "sets.*",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards without power are in French? | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | cards : cards.power , cards.name , cards.uuid , cards.artist , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "cards.power",
      "cards.name",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which post has the highest score? Please give its id and title's name. | posts : posts.title , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | comments : comments.postid , comments.score , comments.id , comments.text , comments.userid , comments.* | posthistory : posthistory.comment ( Title , title ) , posthistory.postid , posthistory.id , posthistory.userid , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "comments.postid",
      "comments.score",
      "comments.id",
      "comments.text",
      "comments.userid",
      "comments.*",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. | superhero : superhero.weight_kg , superhero.eye_colour_id , superhero.superhero_name ( Data ) , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.weight_kg",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? | cards : cards.manacost , cards.availability ( mtgo , paper ) , cards.bordercolor ( black ) , cards.frameversion , cards.layout ( normal ) , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.uuid , foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.manacost",
      "cards.availability",
      "cards.bordercolor",
      "cards.frameversion",
      "cards.layout",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which countries have zip codes with post office boxes? | zip_code : zip_code.county , zip_code.zip_code , zip_code.city ( Post ) , zip_code.state , zip_code.type , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.link_to_event , budget.* | member : member.zip , member.member_id , member.email , member.position , member.phone , member.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.county",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.link_to_event",
      "budget.*",
      "member.zip",
      "member.member_id",
      "member.email",
      "member.position",
      "member.phone",
      "member.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many gold-eyed superheroes did Marvel Comics publish? | superhero : superhero.eye_colour_id , superhero.hair_colour_id , superhero.publisher_id , superhero.id , superhero.skin_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.skin_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? | examination : examination.ana pattern , examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.* | patient : patient.id , patient.admission , patient.sex , patient.birthday , patient.description , patient.* | laboratory : laboratory.t-bil , laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.ana pattern",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? | examination : examination.ana pattern , examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.* | patient : patient.id , patient.admission , patient.sex , patient.birthday , patient.description , patient.* | laboratory : laboratory.t-bil , laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.ana pattern",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Please list the superhero names of all the superheroes that have blue eyes and blond hair. | superhero : superhero.superhero_name , superhero.eye_colour_id , superhero.full_name , superhero.hair_colour_id , superhero.gender_id , superhero.* | colour : colour.colour ( Blond , Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the elements of all the triple bonds. | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all carcinogenic molecules and their elements. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher's name of Blue Beetle II? | publisher : publisher.publisher_name , publisher.id , publisher.* | superhero : superhero.superhero_name ( Beetle , Blue Beetle ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? | examination : examination.diagnosis ( thrombosis ) , examination.ana pattern , examination.acl igg , examination.thrombosis , examination.acl iga , examination.* | patient : patient.diagnosis ( ANA ) , patient.id , patient.sex , patient.admission , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.sm , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.acl igg",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*",
      "patient.diagnosis",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? | loan : loan.date , loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.balance , trans.account_id , trans.trans_id , trans.type , trans.amount , trans.* | account : account.account_id , account.date , account.frequency , account.district_id , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.balance",
      "trans.account_id",
      "trans.trans_id",
      "trans.type",
      "trans.amount",
      "trans.*",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. | patient : patient.id , patient.birthday , patient.sex , patient.first date , patient.description , patient.* | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.alp , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.first date",
      "patient.description",
      "patient.*",
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.alp",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Are there more male patients with creatinine not within the normal range than female? True or False? | patient : patient.sex , patient.id , patient.diagnosis , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.symptoms , examination.lac , examination.* | laboratory : laboratory.cre , laboratory.cpk , laboratory.id , laboratory.date , laboratory.pic , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.*",
      "laboratory.cre",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received. | member : member.first_name , member.last_name , member.member_id , member.zip , member.email , member.* | income : income.date_received , income.amount , income.income_id , income.source , income.notes , income.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "income.date_received",
      "income.amount",
      "income.income_id",
      "income.source",
      "income.notes",
      "income.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name chemical elements that form a bond TR001_10_11. | bond : bond.bond_id ( TR001_10_11 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules without sulphur element is not having double bond? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. | schools : schools.streetabr , schools.street , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( 5-7 , K-12 ) , schools.* | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.enrollment (ages 5-17) , frpm.free meal count (ages 5-17) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.sname , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.streetabr",
      "schools.street",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.enrollment (ages 5-17)",
      "frpm.free meal count (ages 5-17)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Ig A level came to the hospital after 1990/1/1? | patient : patient.first date , patient.admission , patient.id , patient.diagnosis , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.examination date , examination.id , examination.lac , examination.thrombosis , examination.* | laboratory : laboratory.date , laboratory.iga , laboratory.igg , laboratory.igm , laboratory.id , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.lac",
      "examination.thrombosis",
      "examination.*",
      "laboratory.date",
      "laboratory.iga",
      "laboratory.igg",
      "laboratory.igm",
      "laboratory.id",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' | posts : posts.title ( Open source tools for visualizing multi-dimensional data? , Visualizing multi-dimensional data (LSI) in 2D ) , posts.lasteditordisplayname , posts.owneruserid , posts.ownerdisplayname , posts.lasteditoruserid , posts.* | badges : badges.name ( Editor ) , badges.userid , badges.date , badges.id , badges.* | posthistory : posthistory.text ( Open source tools for visualizing multi-dimensional data ? , Open source tools for visualizing multi-dimensional data? ) , posthistory.postid , posthistory.userid , posthistory.id , posthistory.comment ( Title , data ) , posthistory.* | users : users.displayname ( editor ) , users.id , users.reputation , users.location , users.views , users.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.lasteditordisplayname",
      "posts.owneruserid",
      "posts.ownerdisplayname",
      "posts.lasteditoruserid",
      "posts.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "posthistory.text",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.comment",
      "posthistory.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height of all neutral superheroes. | superhero : superhero.height_cm , superhero.alignment_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.* | alignment : alignment.alignment ( Neutral ) , alignment.id , alignment.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.alignment_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. | team : team.team_short_name , team.team_long_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.buildupplaydribbling , team_attributes.buildupplayspeed , team_attributes.buildupplaypassing , team_attributes.buildupplaydribblingclass , team_attributes.buildupplayspeedclass , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.acceleration , player_attributes.agility , player_attributes.reactions , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_long_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribbling",
      "team_attributes.buildupplayspeed",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.acceleration",
      "player_attributes.agility",
      "player_attributes.reactions",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? | cards : cards.name ( Tendo Ice Bridge ) , cards.isonlineonly , cards.facename ( Ice ) , cards.uuid , cards.originalreleasedate , cards.* | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.name , foreign_data.id , foreign_data.text , foreign_data.* | sets : sets.name , sets.isonlineonly , sets.code ( ICE ) , sets.id , sets.block , sets.* | set_translations : set_translations.language ( French ) , set_translations.id , set_translations.setcode ( ICE ) , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.uuid",
      "cards.originalreleasedate",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.name",
      "foreign_data.id",
      "foreign_data.text",
      "foreign_data.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.block",
      "sets.*",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards with format commander and legal status do not have a content warning? | legalities : legalities.status ( Legal ) , legalities.format ( commander ) , legalities.id , legalities.uuid , legalities.* | cards : cards.hascontentwarning , cards.uuid , cards.name ( Warning ) , cards.isonlineonly , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.status",
      "legalities.format",
      "legalities.id",
      "legalities.uuid",
      "legalities.*",
      "cards.hascontentwarning",
      "cards.uuid",
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? | driverstandings : driverstandings.wins , driverstandings.points , driverstandings.driverid , driverstandings.position , driverstandings.driverstandingsid , driverstandings.* | results : results.points , results.driverid , results.raceid , results.laps , results.constructorid , results.* | drivers : drivers.surname ( Driver ) , drivers.driverid , drivers.driverref ( driver ) , drivers.forename , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.driverstandingsid",
      "driverstandings.*",
      "results.points",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.constructorid",
      "results.*",
      "drivers.surname",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.forename",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards without power are in French? | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | cards : cards.power , cards.name , cards.uuid , cards.artist , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "cards.power",
      "cards.name",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the badge name that user 'SilentGhost' obtained? | badges : badges.name , badges.userid , badges.date , badges.id , badges.* | users : users.displayname ( SilentGhost , name ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.ra , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.ra",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? | patient : patient.birthday , patient.diagnosis ( SJS ) , patient.first date , patient.admission , patient.id , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.hct , laboratory.got , laboratory.* | examination : examination.id , examination.diagnosis ( SjS ) , examination.symptoms , examination.examination date , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20. | team : team.team_long_name ( PEC Zwolle ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationpassingclass , team_attributes.chancecreationpassing , team_attributes.team_fifa_api_id , team_attributes.team_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Is the set of cards with Adarkar Valkyrie only available outside the United States? | cards : cards.name ( Adarkar Valkyrie ) , cards.availability , cards.isonlineonly , cards.facename , cards.id , cards.* | sets : sets.isforeignonly , sets.isonlineonly , sets.code , sets.name , sets.id , sets.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.availability",
      "cards.isonlineonly",
      "cards.facename",
      "cards.id",
      "cards.*",
      "sets.isforeignonly",
      "sets.isonlineonly",
      "sets.code",
      "sets.name",
      "sets.id",
      "sets.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? | laboratory : laboratory.gpt , laboratory.date , laboratory.got , laboratory.id , laboratory.pic , laboratory.* | patient : patient.sex , patient.id , patient.birthday , patient.admission , patient.description , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.gpt",
      "laboratory.date",
      "laboratory.got",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.*",
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.description",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which user added a bounty amount of 50 to the post title mentioning variance? | posts : posts.title , posts.owneruserid , posts.id , posts.tags , posts.score , posts.* | votes : votes.bountyamount , votes.userid , votes.postid , votes.id , votes.creationdate , votes.* | posthistory : posthistory.comment ( Title , variance ) , posthistory.userid , posthistory.postid , posthistory.userdisplayname ( User ) , posthistory.id , posthistory.* | badges : badges.name ( variance ) , badges.userid , badges.id , badges.date , badges.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.owneruserid",
      "posts.id",
      "posts.tags",
      "posts.score",
      "posts.*",
      "votes.bountyamount",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.creationdate",
      "votes.*",
      "posthistory.comment",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.userdisplayname",
      "posthistory.id",
      "posthistory.*",
      "badges.name",
      "badges.userid",
      "badges.id",
      "badges.date",
      "badges.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? | users : users.displayname ( Harvey Motulsky , Noah Snyder ) , users.views , users.upvotes , users.id , users.reputation , users.* | posts : posts.owneruserid , posts.title , posts.id , posts.score , posts.favoritecount , posts.* | posthistory : posthistory.userid , posthistory.postid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.displayname",
      "users.views",
      "users.upvotes",
      "users.id",
      "users.reputation",
      "users.*",
      "posts.owneruserid",
      "posts.title",
      "posts.id",
      "posts.score",
      "posts.favoritecount",
      "posts.*",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? | patient : patient.sex , patient.id , patient.birthday , patient.diagnosis , patient.admission , patient.* | examination : examination.acl iga , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.diagnosis",
      "patient.admission",
      "patient.*",
      "examination.acl iga",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the toxicology and label of molecule TR060? | molecule : molecule.label , molecule.molecule_id ( TR060 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR060 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR060 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.enroll12 , satscores.numtsttakr , satscores.* | schools : schools.streetabr , schools.state , schools.city , schools.zip , schools.street , schools.* | frpm : frpm.low grade , frpm.school name , frpm.cdscode , frpm.high grade , frpm.school code , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numtsttakr",
      "satscores.*",
      "schools.streetabr",
      "schools.state",
      "schools.city",
      "schools.zip",
      "schools.street",
      "schools.*",
      "frpm.low grade",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.high grade",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the score and the link type ID for post ID 395? | posts : posts.score , posts.id , posts.posttypeid , posts.body , posts.title , posts.* | postlinks : postlinks.linktypeid , postlinks.postid , postlinks.relatedpostid , postlinks.id , postlinks.creationdate , postlinks.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment ( link , type ) , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.title",
      "posts.*",
      "postlinks.linktypeid",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.id",
      "postlinks.creationdate",
      "postlinks.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the product description of the products consumed in September, 2013. | products : products.description , products.productid , products.* | yearmonth : yearmonth.date , yearmonth.consumption , yearmonth.customerid , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "products.description",
      "products.productid",
      "products.*",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the owner user id of the most valuable post? | posts : posts.owneruserid , posts.score , posts.id , posts.title , posts.posttypeid , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | votes : votes.postid , votes.userid , votes.id , votes.creationdate , votes.bountyamount , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.score",
      "posts.id",
      "posts.title",
      "posts.posttypeid",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "votes.postid",
      "votes.userid",
      "votes.id",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the owner user id of the most valuable post? | posts : posts.owneruserid , posts.score , posts.id , posts.title , posts.posttypeid , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | votes : votes.postid , votes.userid , votes.id , votes.creationdate , votes.bountyamount , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.score",
      "posts.id",
      "posts.title",
      "posts.posttypeid",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "votes.postid",
      "votes.userid",
      "votes.id",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the hero name and race of Charles Chandler. | race : race.race , race.id , race.* | superhero : superhero.superhero_name , superhero.full_name ( Charles Chandler ) , superhero.race_id , superhero.skin_colour_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "race.race",
      "race.id",
      "race.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team. | team : team.team_short_name , team.team_long_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.buildupplaydribbling , team_attributes.buildupplayspeed , team_attributes.buildupplaypassing , team_attributes.buildupplaydribblingclass , team_attributes.buildupplayspeedclass , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.acceleration , player_attributes.agility , player_attributes.reactions , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_long_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribbling",
      "team_attributes.buildupplayspeed",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.acceleration",
      "player_attributes.agility",
      "player_attributes.reactions",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. | molecule : molecule.label , molecule.molecule_id ( TR006 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR006 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR006 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? | set_translations : set_translations.language ( Japanese ) , set_translations.translation , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.isnonfoilonly , sets.code , sets.id , sets.isfoilonly , sets.isonlineonly , sets.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.availability , cards.name , cards.artist , cards.uuid , cards.id , cards.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.isnonfoilonly",
      "sets.code",
      "sets.id",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.availability",
      "cards.name",
      "cards.artist",
      "cards.uuid",
      "cards.id",
      "cards.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. | races : races.year , races.name ( Monaco Grand Prix ) , races.date , races.time , races.circuitid , races.* | constructorresults : constructorresults.points , constructorresults.constructorid , constructorresults.raceid , constructorresults.constructorresultsid , constructorresults.status , constructorresults.* | constructors : constructors.name , constructors.nationality , constructors.constructorref , constructors.constructorid , constructors.url , constructors.* | constructorstandings : constructorstandings.constructorid , constructorstandings.points , constructorstandings.wins , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.time",
      "races.circuitid",
      "races.*",
      "constructorresults.points",
      "constructorresults.constructorid",
      "constructorresults.raceid",
      "constructorresults.constructorresultsid",
      "constructorresults.status",
      "constructorresults.*",
      "constructors.name",
      "constructors.nationality",
      "constructors.constructorref",
      "constructors.constructorid",
      "constructors.url",
      "constructors.*",
      "constructorstandings.constructorid",
      "constructorstandings.points",
      "constructorstandings.wins",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the product description of the products consumed in September, 2013. | products : products.description , products.productid , products.* | yearmonth : yearmonth.date , yearmonth.consumption , yearmonth.customerid , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "products.description",
      "products.productid",
      "products.*",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which home team had lost the fewest matches in the 2016 season? | match : match.season , match.home_team_api_id , match.away_team_api_id , match.id , match.stage , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.vision , player_attributes.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.season",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.vision",
      "player_attributes.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? | patient : patient.birthday , patient.diagnosis ( SJS ) , patient.first date , patient.admission , patient.id , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.hct , laboratory.got , laboratory.* | examination : examination.id , examination.diagnosis ( SjS ) , examination.symptoms , examination.examination date , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Is the set of cards with Adarkar Valkyrie only available outside the United States? | cards : cards.name ( Adarkar Valkyrie ) , cards.availability , cards.isonlineonly , cards.facename , cards.id , cards.* | sets : sets.isforeignonly , sets.isonlineonly , sets.code , sets.name , sets.id , sets.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.availability",
      "cards.isonlineonly",
      "cards.facename",
      "cards.id",
      "cards.*",
      "sets.isforeignonly",
      "sets.isonlineonly",
      "sets.code",
      "sets.name",
      "sets.id",
      "sets.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. | player : player.player_name , player.birthday , player.id , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.birthday",
      "player.id",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many superheroes with blonde hair are there? | colour : colour.colour ( Blond ) , colour.id , colour.* | superhero : superhero.hair_colour_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. | patient : patient.id , patient.birthday , patient.sex , patient.first date , patient.description , patient.* | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.alp , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.first date",
      "patient.description",
      "patient.*",
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.alp",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "In 2012, who had the least consumption in LAM? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.segment ( LAM ) , customers.customerid , customers.currency , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.segment",
      "customers.customerid",
      "customers.currency",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.numtsttakr , satscores.rtype , satscores.* | schools : schools.admlname3 , schools.admfname3 , schools.admlname1 ( Administration ) , schools.admlname2 , schools.admfname2 , schools.* | frpm : frpm.cdscode , frpm.school name , frpm.school code , frpm.school type , frpm.academic year , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.rtype",
      "satscores.*",
      "schools.admlname3",
      "schools.admfname3",
      "schools.admlname1",
      "schools.admlname2",
      "schools.admfname2",
      "schools.*",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.school code",
      "frpm.school type",
      "frpm.academic year",
      "frpm.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.time ( 16:25:00 ) , transactions_1k.date , transactions_1k.customerid , transactions_1k.amount , transactions_1k.price , transactions_1k.* | yearmonth : yearmonth.date , yearmonth.customerid , yearmonth.consumption , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.customerid",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.*",
      "yearmonth.date",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. | races : races.year , races.name ( Monaco Grand Prix ) , races.date , races.time , races.circuitid , races.* | constructorresults : constructorresults.points , constructorresults.constructorid , constructorresults.raceid , constructorresults.constructorresultsid , constructorresults.status , constructorresults.* | constructors : constructors.name , constructors.nationality , constructors.constructorref , constructors.constructorid , constructors.url , constructors.* | constructorstandings : constructorstandings.constructorid , constructorstandings.points , constructorstandings.wins , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.time",
      "races.circuitid",
      "races.*",
      "constructorresults.points",
      "constructorresults.constructorid",
      "constructorresults.raceid",
      "constructorresults.constructorresultsid",
      "constructorresults.status",
      "constructorresults.*",
      "constructors.name",
      "constructors.nationality",
      "constructors.constructorref",
      "constructors.constructorid",
      "constructors.url",
      "constructors.*",
      "constructorstandings.constructorid",
      "constructorstandings.points",
      "constructorstandings.wins",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. | member : member.last_name , member.first_name , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_description , expense.approved , expense.expense_id , expense.link_to_budget , expense.* | budget : budget.spent , budget.budget_id , budget.amount , budget.category , budget.remaining , budget.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.expense_id",
      "expense.link_to_budget",
      "expense.*",
      "budget.spent",
      "budget.budget_id",
      "budget.amount",
      "budget.category",
      "budget.remaining",
      "budget.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the composition of element chlorine in percentage among the single bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? | patient : patient.sex , patient.diagnosis ( SLE ) , patient.id , patient.birthday , patient.admission , patient.* | laboratory : laboratory.alb , laboratory.pt , laboratory.hgb , laboratory.glu , laboratory.hct , laboratory.* | examination : examination.diagnosis ( SLE ) , examination.lac , examination.kct , examination.symptoms , examination.rvvt , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.*",
      "laboratory.alb",
      "laboratory.pt",
      "laboratory.hgb",
      "laboratory.glu",
      "laboratory.hct",
      "laboratory.*",
      "examination.diagnosis",
      "examination.lac",
      "examination.kct",
      "examination.symptoms",
      "examination.rvvt",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which country is the league Italy Serie A from? | country : country.name ( Italy ) , country.id , country.* | league : league.name ( Italy Serie A ) , league.country_id , league.id , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.* | player : player.id , player.birthday , player.height , player.weight , player.player_api_id , player.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*",
      "player.id",
      "player.birthday",
      "player.height",
      "player.weight",
      "player.player_api_id",
      "player.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many gold-eyed superheroes did Marvel Comics publish? | superhero : superhero.eye_colour_id , superhero.hair_colour_id , superhero.publisher_id , superhero.id , superhero.skin_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.skin_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last name of the members of the club that attended the women's soccer event. | member : member.last_name , member.member_id , member.position ( Member ) , member.zip , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Clubb ) , zip_code.type , zip_code.state , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.member_id",
      "member.position",
      "member.zip",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.state",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.publisher_id , superhero.gender_id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response. | sets : sets.id , sets.isforeignonly , sets.code , sets.isfoilonly , sets.isonlineonly , sets.* | cards : cards.name ( Foil ) , cards.availability , cards.facename ( Response ) , cards.isonlineonly , cards.setcode , cards.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.isforeignonly",
      "sets.code",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "cards.name",
      "cards.availability",
      "cards.facename",
      "cards.isonlineonly",
      "cards.setcode",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. | laboratory : laboratory.date , laboratory.plt , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.birthday , patient.id , patient.sex , patient.admission , patient.diagnosis , patient.* | examination : examination.examination date , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.birthday",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.*",
      "examination.examination date",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. | patient : patient.id , patient.birthday , patient.sex , patient.first date , patient.description , patient.* | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.alp , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.first date",
      "patient.description",
      "patient.*",
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.alp",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many percent of female heroes were published by Marvel Comics? | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.publisher_id , superhero.id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the percentage of carbon in double-bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What percentage of carcinogenic-type molecules does not contain fluorine? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.time , races.circuitid , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.position , results.points , results.* | driverstandings : driverstandings.wins , driverstandings.driverid , driverstandings.position , driverstandings.points , driverstandings.raceid , driverstandings.* | laptimes : laptimes.position , laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.position",
      "results.points",
      "results.*",
      "driverstandings.wins",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.points",
      "driverstandings.raceid",
      "driverstandings.*",
      "laptimes.position",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the element and bond type included in the molecule with molecule ID of TR002. | bond : bond.bond_type , bond.molecule_id ( TR002 ) , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR002 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR002 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? | budget : budget.category ( Advertisement ) , budget.amount , budget.budget_id , budget.link_to_event , budget.spent , budget.* | event : event.event_name ( October Meeting , Yearly Kickoff ) , event.event_id , event.type ( Budget , Meeting ) , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "budget.category",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.spent",
      "budget.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account? | loan : loan.amount , loan.account_id , loan.date , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.amount , trans.date , trans.account_id , trans.trans_id , trans.balance , trans.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.amount",
      "loan.account_id",
      "loan.date",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.amount",
      "trans.date",
      "trans.account_id",
      "trans.trans_id",
      "trans.balance",
      "trans.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic? | bond : bond.bond_type , bond.molecule_id ( TR010 ) , bond.bond_id , bond.* | molecule : molecule.molecule_id ( TR010 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.element , atom.atom_id , atom.molecule_id ( TR010 ) , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many white bordered cards are powerful? | cards : cards.power , cards.bordercolor ( white ) , cards.uuid , cards.id , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.bordercolor",
      "cards.uuid",
      "cards.id",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? | set_translations : set_translations.language ( Japanese ) , set_translations.translation , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.isnonfoilonly , sets.code , sets.id , sets.isfoilonly , sets.isonlineonly , sets.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.availability , cards.name , cards.artist , cards.uuid , cards.id , cards.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.isnonfoilonly",
      "sets.code",
      "sets.id",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.availability",
      "cards.name",
      "cards.artist",
      "cards.uuid",
      "cards.id",
      "cards.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. | bond : bond.bond_id ( TR001_2_4 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_2_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.price , transactions_1k.amount , transactions_1k.customerid , transactions_1k.productid , transactions_1k.date , transactions_1k.* | yearmonth : yearmonth.customerid , yearmonth.consumption , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.price",
      "transactions_1k.amount",
      "transactions_1k.customerid",
      "transactions_1k.productid",
      "transactions_1k.date",
      "transactions_1k.*",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the atoms of TR144_8_19? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR144_8_19 ) , connected.atom_id , connected.atom_id2 , connected.* | bond : bond.bond_id ( TR144_8_19 ) , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? | set_translations : set_translations.language ( Japanese ) , set_translations.translation , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.isnonfoilonly , sets.code , sets.id , sets.isfoilonly , sets.isonlineonly , sets.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.availability , cards.name , cards.artist , cards.uuid , cards.id , cards.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.isnonfoilonly",
      "sets.code",
      "sets.id",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.availability",
      "cards.name",
      "cards.artist",
      "cards.uuid",
      "cards.id",
      "cards.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the long name of teams with above-average build-up play passing in 2012. | team : team.team_long_name , team.team_api_id , team.team_short_name , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.buildupplaypassing , team_attributes.buildupplaypassingclass ( Long ) , team_attributes.buildupplayspeed , team_attributes.team_api_id , team_attributes.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.buildupplaypassing",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.buildupplayspeed",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? | player_attributes : player_attributes.overall_rating , player_attributes.attacking_work_rate , player_attributes.defensive_work_rate , player_attributes.potential , player_attributes.player_api_id , player_attributes.* | match : match.id , match.season , match.stage , match.date , match.home_team_api_id , match.* | player : player.player_api_id , player.player_fifa_api_id , player.id , player.player_name , player.birthday , player.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.attacking_work_rate",
      "player_attributes.defensive_work_rate",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.player_name",
      "player.birthday",
      "player.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? | loan : loan.date , loan.amount , loan.account_id , loan.duration , loan.loan_id , loan.* | client : client.gender , client.client_id , client.birth_date , client.district_id , client.* | account : account.account_id , account.date , account.district_id , account.frequency , account.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.amount",
      "loan.account_id",
      "loan.duration",
      "loan.loan_id",
      "loan.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.frequency",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment ( KAM , LAM ) , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 , district.* | order : order.order_id , order.account_id , order.amount , order.account_to , order.k_symbol , order.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "order.order_id",
      "order.account_id",
      "order.amount",
      "order.account_to",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the toxicology and label of molecule TR060? | molecule : molecule.label , molecule.molecule_id ( TR060 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR060 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR060 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR004_8_9 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What are the player api id of 10 heaviest players? | player : player.weight , player.player_api_id , player.player_fifa_api_id , player.height , player.id , player.* | player_attributes : player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.weight",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.height",
      "player.id",
      "player.*",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? | examination : examination.ana pattern , examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.* | patient : patient.id , patient.admission , patient.sex , patient.birthday , patient.description , patient.* | laboratory : laboratory.t-bil , laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.ana pattern",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 , district.* | order : order.order_id , order.account_id , order.amount , order.account_to , order.k_symbol , order.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "order.order_id",
      "order.account_id",
      "order.amount",
      "order.account_to",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? | laboratory : laboratory.gpt , laboratory.date , laboratory.got , laboratory.id , laboratory.pic , laboratory.* | patient : patient.sex , patient.id , patient.birthday , patient.admission , patient.description , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.gpt",
      "laboratory.date",
      "laboratory.got",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.*",
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.description",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Among all the lap records set on various circuits, what is the time for the fastest one? | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.fastestlaptime , results.fastestlap , results.fastestlapspeed , results.laps , results.time , results.* | circuits : circuits.circuitid , circuits.name , circuits.url , circuits.circuitref , circuits.lat , circuits.* | races : races.circuitid , races.year , races.raceid , races.time , races.name , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlap",
      "results.fastestlapspeed",
      "results.laps",
      "results.time",
      "results.*",
      "circuits.circuitid",
      "circuits.name",
      "circuits.url",
      "circuits.circuitref",
      "circuits.lat",
      "circuits.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.time",
      "races.name",
      "races.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.numtsttakr , satscores.rtype , satscores.* | schools : schools.admlname3 , schools.admfname3 , schools.admlname1 ( Administration ) , schools.admlname2 , schools.admfname2 , schools.* | frpm : frpm.cdscode , frpm.school name , frpm.school code , frpm.school type , frpm.academic year , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.numtsttakr",
      "satscores.rtype",
      "satscores.*",
      "schools.admlname3",
      "schools.admfname3",
      "schools.admlname1",
      "schools.admlname2",
      "schools.admfname2",
      "schools.*",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.school code",
      "frpm.school type",
      "frpm.academic year",
      "frpm.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in? | cards : cards.name ( Tendo Ice Bridge ) , cards.isonlineonly , cards.facename ( Ice ) , cards.uuid , cards.originalreleasedate , cards.* | foreign_data : foreign_data.language ( French ) , foreign_data.uuid , foreign_data.name , foreign_data.id , foreign_data.text , foreign_data.* | sets : sets.name , sets.isonlineonly , sets.code ( ICE ) , sets.id , sets.block , sets.* | set_translations : set_translations.language ( French ) , set_translations.id , set_translations.setcode ( ICE ) , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.uuid",
      "cards.originalreleasedate",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.name",
      "foreign_data.id",
      "foreign_data.text",
      "foreign_data.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.block",
      "sets.*",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.cdscode , frpm.school code , frpm.free meal count (k-12) , frpm.* | satscores : satscores.enroll12 , satscores.sname , satscores.cds , satscores.numge1500 , satscores.dname , satscores.* | schools : schools.school , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.enroll12",
      "satscores.sname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.*",
      "schools.school",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' | posts : posts.title ( Open source tools for visualizing multi-dimensional data? , Visualizing multi-dimensional data (LSI) in 2D ) , posts.lasteditordisplayname , posts.owneruserid , posts.ownerdisplayname , posts.lasteditoruserid , posts.* | badges : badges.name ( Editor ) , badges.userid , badges.date , badges.id , badges.* | posthistory : posthistory.text ( Open source tools for visualizing multi-dimensional data ? , Open source tools for visualizing multi-dimensional data? ) , posthistory.postid , posthistory.userid , posthistory.id , posthistory.comment ( Title , data ) , posthistory.* | users : users.displayname ( editor ) , users.id , users.reputation , users.location , users.views , users.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.lasteditordisplayname",
      "posts.owneruserid",
      "posts.ownerdisplayname",
      "posts.lasteditoruserid",
      "posts.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "posthistory.text",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.comment",
      "posthistory.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in a double type bond? | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the cost of posters for 'September Speaker' event. | expense : expense.cost , expense.expense_description ( Posters ) , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_name ( September Speaker ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Costa ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range? | patient : patient.sex , patient.id , patient.birthday , patient.diagnosis , patient.admission , patient.* | examination : examination.acl iga , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.* | laboratory : laboratory.ua , laboratory.id , laboratory.date , laboratory.pic , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.diagnosis",
      "patient.admission",
      "patient.*",
      "examination.acl iga",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "laboratory.ua",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995? | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | patient : patient.diagnosis , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.diagnosis , examination.examination date , examination.id , examination.thrombosis , examination.symptoms , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? | examination : examination.diagnosis ( thrombosis ) , examination.ana pattern , examination.acl igg , examination.thrombosis , examination.acl iga , examination.* | patient : patient.diagnosis ( ANA ) , patient.id , patient.sex , patient.admission , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.sm , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.acl igg",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*",
      "patient.diagnosis",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many cards available in paper have a positive starting maximum hand size? | cards : cards.availability ( paper ) , cards.hand , cards.uuid , cards.artist , cards.colors , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.availability",
      "cards.hand",
      "cards.uuid",
      "cards.artist",
      "cards.colors",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Based on posts posted by Community, calculate the percentage of posts that use the R language. | posts : posts.owneruserid , posts.id , posts.posttypeid , posts.communityowneddate , posts.title , posts.* | users : users.displayname ( Community ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.postid , posthistory.userid , posthistory.comment , posthistory.id , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.communityowneddate",
      "posts.title",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.comment",
      "posthistory.id",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements with double bond, consisted in molecule TR024. | bond : bond.molecule_id ( TR024 ) , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR024 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR024 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver has the fastest lap time? Please give their forenames and surnames. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.code , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.fastestlaptime , results.fastestlapspeed , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of patients who were born in 1980 and were diagnosed with RA are women? | patient : patient.sex , patient.birthday , patient.diagnosis ( RA ) , patient.first date , patient.id , patient.* | examination : examination.diagnosis ( RA ) , examination.id , examination.symptoms , examination.acl iga , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.acl iga",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.currency ( EUR ) , customers.segment ( LAM ) , customers.customerid , customers.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.currency",
      "customers.segment",
      "customers.customerid",
      "customers.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Give the name of the league had the most goals in the 2016 season? | league : league.name , league.id , league.country_id , league.* | match : match.season , match.league_id , match.home_team_goal , match.away_team_goal , match.id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.balance , player_attributes.strength , player_attributes.vision , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.balance",
      "player_attributes.strength",
      "player_attributes.vision",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. | superhero : superhero.eye_colour_id , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.hair_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.hair_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. | district : district.a13 , district.a12 , district.a2 , district.a3 , district.district_id , district.* | loan : loan.duration , loan.status , loan.loan_id , loan.account_id , loan.date , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a13",
      "district.a12",
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.*",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. | sets : sets.releasedate , sets.code , sets.id , sets.name , sets.block , sets.* | cards : cards.name , cards.uuid , cards.rarity ( common ) , cards.artist , cards.availability , cards.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.releasedate",
      "sets.code",
      "sets.id",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.uuid",
      "cards.rarity",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the name of the closed event whose cost has exceeded the budget the most. | expense : expense.cost , expense.approved , expense.link_to_budget , expense.link_to_member , expense.expense_id , expense.* | event : event.event_name , event.status ( Closed ) , event.event_id , event.notes , event.location , event.* | budget : budget.event_status ( Closed ) , budget.amount , budget.budget_id , budget.link_to_event , budget.category , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.approved",
      "expense.link_to_budget",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.*",
      "event.event_name",
      "event.status",
      "event.event_id",
      "event.notes",
      "event.location",
      "event.*",
      "budget.event_status",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.category",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of the toxicology of the molecule \"TR004\". | molecule : molecule.molecule_id ( TR004 ) , molecule.label , molecule.* | atom : atom.element , atom.molecule_id ( TR004 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR004 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "On average how many carcinogenic molecules are single bonded? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which toxic element can be found in the molecule TR151? | atom : atom.element , atom.molecule_id ( TR151 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR151 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR151 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "How many users are awarded with more than 5 badges? | badges : badges.userid , badges.id , badges.name , badges.date , badges.* | votes : votes.userid , votes.id , votes.postid , votes.creationdate , votes.bountyamount , votes.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.userid",
      "badges.id",
      "badges.name",
      "badges.date",
      "badges.*",
      "votes.userid",
      "votes.id",
      "votes.postid",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? | patient : patient.sex , patient.diagnosis ( PSS ) , patient.id , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( PSS ) , examination.id , examination.symptoms , examination.ana pattern , examination.thrombosis , examination.* | laboratory : laboratory.crp ( 2+ ) , laboratory.cre , laboratory.ra ( 2+ ) , laboratory.cpk , laboratory.t-bil , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.thrombosis",
      "examination.*",
      "laboratory.crp",
      "laboratory.cre",
      "laboratory.ra",
      "laboratory.cpk",
      "laboratory.t-bil",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the unique id of the set that has the highest number of cards? | sets : sets.id , sets.basesetsize , sets.code , sets.totalsetsize , sets.isonlineonly , sets.* | cards : cards.id , cards.setcode , cards.uuid , cards.artist , cards.availability , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.basesetsize",
      "sets.code",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.*",
      "cards.id",
      "cards.setcode",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last names of students under the Elementary Education major and include their phone numbers. | member : member.last_name , member.phone , member.link_to_major , member.member_id , member.zip , member.* | major : major.major_name ( Elementary Education ) , major.major_id , major.department , major.college , major.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.phone",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.*",
      "major.major_name",
      "major.major_id",
      "major.department",
      "major.college",
      "major.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. | molecule : molecule.label , molecule.molecule_id ( TR006 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR006 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR006 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. | laboratory : laboratory.date , laboratory.plt , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.birthday , patient.id , patient.sex , patient.admission , patient.diagnosis , patient.* | examination : examination.examination date , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.birthday",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.*",
      "examination.examination date",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? | comments : comments.score , comments.userid , comments.postid , comments.id , comments.text , comments.* | users : users.upvotes , users.downvotes , users.id , users.views , users.reputation , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userid",
      "comments.postid",
      "comments.id",
      "comments.text",
      "comments.*",
      "users.upvotes",
      "users.downvotes",
      "users.id",
      "users.views",
      "users.reputation",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? | patient : patient.birthday , patient.first date , patient.id , patient.sex , patient.description , patient.* | laboratory : laboratory.t-cho , laboratory.date , laboratory.id , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.examination date , examination.id , examination.symptoms , examination.diagnosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.sex",
      "patient.description",
      "patient.*",
      "laboratory.t-cho",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.examination date",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12? | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.cdscode , frpm.school code , frpm.free meal count (k-12) , frpm.* | satscores : satscores.enroll12 , satscores.sname , satscores.cds , satscores.numge1500 , satscores.dname , satscores.* | schools : schools.school , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.school code",
      "frpm.free meal count (k-12)",
      "frpm.*",
      "satscores.enroll12",
      "satscores.sname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.*",
      "schools.school",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? | patient : patient.diagnosis ( SLE ) , patient.first date , patient.admission , patient.id , patient.sex , patient.* | examination : examination.diagnosis ( SLE ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the difference in the number of crimes committed in East and North Bohemia in 1996? | district : district.a16 , district.a3 ( north Bohemia ) , district.a15 , district.district_id , district.a2 , district.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | client : client.gender , client.client_id , client.district_id , client.birth_date , client.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a16",
      "district.a3",
      "district.a15",
      "district.district_id",
      "district.a2",
      "district.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.description , patient.admission , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.t-cho , laboratory.id , laboratory.date , laboratory.pic , laboratory.sm ( negative ) , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.description",
      "patient.admission",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.t-cho",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the unique id of the set that has the highest number of cards? | sets : sets.id , sets.basesetsize , sets.code , sets.totalsetsize , sets.isonlineonly , sets.* | cards : cards.id , cards.setcode , cards.uuid , cards.artist , cards.availability , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.basesetsize",
      "sets.code",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.*",
      "cards.id",
      "cards.setcode",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR004_8_9 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? | laboratory : laboratory.gpt , laboratory.date , laboratory.got , laboratory.id , laboratory.pic , laboratory.* | patient : patient.sex , patient.id , patient.birthday , patient.admission , patient.description , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.gpt",
      "laboratory.date",
      "laboratory.got",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.*",
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.description",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among all the posts posted by the most influential user, identify the percentage with a score above 50. | posts : posts.score , posts.owneruserid , posts.id , posts.posttypeid , posts.body , posts.* | users : users.reputation , users.id , users.location , users.views , users.age , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "users.reputation",
      "users.id",
      "users.location",
      "users.views",
      "users.age",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many superheroes with blonde hair are there? | colour : colour.colour ( Blond ) , colour.id , colour.* | superhero : superhero.hair_colour_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name chemical elements that form a bond TR001_10_11. | bond : bond.bond_id ( TR001_10_11 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? | examination : examination.ana pattern , examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.* | patient : patient.id , patient.admission , patient.sex , patient.birthday , patient.description , patient.* | laboratory : laboratory.t-bil , laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.ana pattern",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'. | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.milliseconds , laptimes.* | races : races.raceid , races.year , races.name , races.round , races.time , races.* | results : results.fastestlaptime , results.constructorid , results.driverid , results.raceid , results.time , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.raceid",
      "races.year",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.driverid",
      "results.raceid",
      "results.time",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Mention the category of events which were held at MU 215. | event : event.location ( MU 215 ) , event.type , event.event_name , event.event_id , event.event_date , event.* | budget : budget.category , budget.budget_id , budget.spent , budget.remaining , budget.amount , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.location",
      "event.type",
      "event.event_name",
      "event.event_id",
      "event.event_date",
      "event.*",
      "budget.category",
      "budget.budget_id",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? | cards : cards.convertedmanacost , cards.isonlineonly , cards.faceconvertedmanacost , cards.uuid , cards.name , cards.* | sets : sets.name ( Coldsnap ) , sets.isonlineonly , sets.mcmname ( Coldsnap ) , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.isonlineonly",
      "cards.faceconvertedmanacost",
      "cards.uuid",
      "cards.name",
      "cards.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.mcmname",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Describe the display name of the parent ID for child post with the highest score. | posts : posts.score , posts.ownerdisplayname , posts.parentid , posts.id , posts.posttypeid , posts.* | users : users.displayname ( name ) , users.id , users.reputation , users.location , users.views , users.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.ownerdisplayname",
      "posts.parentid",
      "posts.id",
      "posts.posttypeid",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of atoms that can not bond with any other atoms. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the score and the link type ID for post ID 395? | posts : posts.score , posts.id , posts.posttypeid , posts.body , posts.title , posts.* | postlinks : postlinks.linktypeid , postlinks.postid , postlinks.relatedpostid , postlinks.id , postlinks.creationdate , postlinks.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment ( link , type ) , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.title",
      "posts.*",
      "postlinks.linktypeid",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.id",
      "postlinks.creationdate",
      "postlinks.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? | races : races.year , races.name , races.raceid , races.round , races.circuitid , races.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.position , laptimes.* | results : results.fastestlaptime , results.driverid , results.raceid , results.laps , results.rank , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.round",
      "races.circuitid",
      "races.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.position",
      "laptimes.*",
      "results.fastestlaptime",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.rank",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. | races : races.time , races.name , races.date , races.year , races.raceid , races.* | drivers : drivers.dob , drivers.driverid , drivers.surname ( Driver ) , drivers.number , drivers.code , drivers.* | qualifying : qualifying.raceid , qualifying.driverid , qualifying.q1 , qualifying.qualifyid , qualifying.q3 , qualifying.* | results : results.driverid , results.raceid , results.number , results.grid , results.position , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.time",
      "races.name",
      "races.date",
      "races.year",
      "races.raceid",
      "races.*",
      "drivers.dob",
      "drivers.driverid",
      "drivers.surname",
      "drivers.number",
      "drivers.code",
      "drivers.*",
      "qualifying.raceid",
      "qualifying.driverid",
      "qualifying.q1",
      "qualifying.qualifyid",
      "qualifying.q3",
      "qualifying.*",
      "results.driverid",
      "results.raceid",
      "results.number",
      "results.grid",
      "results.position",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? | patient : patient.admission , patient.id , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.rnp , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.rnp",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the bond type of TR007_4_19? | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id , bond.* | connected : connected.bond_id ( TR007_4_19 ) , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races? | laptimes : laptimes.milliseconds , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.* | races : races.year , races.raceid , races.name , races.round , races.time , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.fastestlaptime , results.constructorid , results.milliseconds , results.raceid , results.fastestlap , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.milliseconds",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.milliseconds",
      "results.raceid",
      "results.fastestlap",
      "results.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. | superhero : superhero.eye_colour_id , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.hair_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.hair_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the elements of all the triple bonds. | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of cards whose language is French among the Story Spotlight cards? | foreign_data : foreign_data.language ( French ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.isstoryspotlight , cards.artist , cards.name , cards.uuid , cards.availability , cards.* | set_translations : set_translations.language ( French ) , set_translations.setcode , set_translations.id , set_translations.translation , set_translations.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.isstoryspotlight",
      "cards.artist",
      "cards.name",
      "cards.uuid",
      "cards.availability",
      "cards.*",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.translation",
      "set_translations.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM | comments : comments.score , comments.creationdate , comments.postid , comments.userid , comments.id , comments.* | posts : posts.creaiondate , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.creationdate",
      "comments.postid",
      "comments.userid",
      "comments.id",
      "comments.*",
      "posts.creaiondate",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the toxicology and label of molecule TR060? | molecule : molecule.label , molecule.molecule_id ( TR060 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR060 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR060 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero. | superhero : superhero.eye_colour_id , superhero.publisher_id , superhero.skin_colour_id , superhero.hair_colour_id , superhero.superhero_name , superhero.* | publisher : publisher.publisher_name , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.publisher_id",
      "superhero.skin_colour_id",
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the bad superheroes, what is the percentage of female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | alignment : alignment.alignment ( Bad ) , alignment.id , alignment.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? | patient : patient.diagnosis ( SLE ) , patient.first date , patient.admission , patient.id , patient.sex , patient.* | examination : examination.diagnosis ( SLE ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color. | superhero : superhero.weight_kg , superhero.eye_colour_id , superhero.superhero_name ( Data ) , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.weight_kg",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the unique id of the set that has the highest number of cards? | sets : sets.id , sets.basesetsize , sets.code , sets.totalsetsize , sets.isonlineonly , sets.* | cards : cards.id , cards.setcode , cards.uuid , cards.artist , cards.availability , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.id",
      "sets.basesetsize",
      "sets.code",
      "sets.totalsetsize",
      "sets.isonlineonly",
      "sets.*",
      "cards.id",
      "cards.setcode",
      "cards.uuid",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the difference in the percentage of members in New Jersey and Vermont. | zip_code : zip_code.state ( New Jersey , Vermont ) , zip_code.city ( Jersey , Vermont ) , zip_code.zip_code , zip_code.short_state , zip_code.county , zip_code.* | member : member.member_id , member.zip , member.link_to_major , member.email , member.phone , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.state",
      "zip_code.city",
      "zip_code.zip_code",
      "zip_code.short_state",
      "zip_code.county",
      "zip_code.*",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.email",
      "member.phone",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? | cards : cards.convertedmanacost , cards.isonlineonly , cards.faceconvertedmanacost , cards.uuid , cards.name , cards.* | sets : sets.name ( Coldsnap ) , sets.isonlineonly , sets.mcmname ( Coldsnap ) , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.isonlineonly",
      "cards.faceconvertedmanacost",
      "cards.uuid",
      "cards.name",
      "cards.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.mcmname",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many gold-eyed superheroes did Marvel Comics publish? | superhero : superhero.eye_colour_id , superhero.hair_colour_id , superhero.publisher_id , superhero.id , superhero.skin_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.skin_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. | player : player.birthday , player.player_name , player.player_fifa_api_id , player.player_api_id , player.height , player.* | player_attributes : player_attributes.sprint_speed , player_attributes.date , player_attributes.acceleration , player_attributes.player_api_id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.birthday",
      "player.player_name",
      "player.player_fifa_api_id",
      "player.player_api_id",
      "player.height",
      "player.*",
      "player_attributes.sprint_speed",
      "player_attributes.date",
      "player_attributes.acceleration",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which country is the league Italy Serie A from? | country : country.name ( Italy ) , country.id , country.* | league : league.name ( Italy Serie A ) , league.country_id , league.id , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.* | player : player.id , player.birthday , player.height , player.weight , player.player_api_id , player.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*",
      "player.id",
      "player.birthday",
      "player.height",
      "player.weight",
      "player.player_api_id",
      "player.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Please list the ID of the patient whose RF is normal and who is older than 60. | patient : patient.id , patient.birthday , patient.sex , patient.diagnosis , patient.description , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.lac , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.diagnosis",
      "patient.description",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.lac",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.tg , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.superhero_name , superhero.gender_id , superhero.full_name , superhero.publisher_id , superhero.* | superpower : superpower.id , superpower.power_name , superpower.* | hero_attribute : hero_attribute.attribute_value , hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.*",
      "superpower.id",
      "superpower.power_name",
      "superpower.*",
      "hero_attribute.attribute_value",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? | races : races.raceid , races.name , races.year , races.round , races.date , races.* | results : results.fastestlapspeed , results.raceid , results.driverid , results.fastestlap , results.statusid , results.* | drivers : drivers.surname ( Speed , di Resta ) , drivers.forename ( Paul ) , drivers.driverref ( resta , speed ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.raceid",
      "races.name",
      "races.year",
      "races.round",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.raceid",
      "results.driverid",
      "results.fastestlap",
      "results.statusid",
      "results.*",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? | patient : patient.sex , patient.id , patient.first date , patient.admission , patient.birthday , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | examination : examination.id , examination.examination date , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.examination date",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the description about the ruling of card \"Condemn\"? | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | cards : cards.name ( Condemn ) , cards.uuid , cards.originaltext , cards.originalreleasedate , cards.artist , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "cards.name",
      "cards.uuid",
      "cards.originaltext",
      "cards.originalreleasedate",
      "cards.artist",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the highest eligible free rate for K-12 students in the schools in Alameda County? | frpm : frpm.county name ( Alameda ) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.free meal count (k-12) , frpm.school code , frpm.* | schools : schools.county ( Alameda ) , schools.gsoffered ( K-12 ) , schools.cdscode , schools.gsserved ( K-12 ) , schools.latitude , schools.* | satscores : satscores.numge1500 , satscores.enroll12 , satscores.cds , satscores.cname ( Alameda ) , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.county name",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.free meal count (k-12)",
      "frpm.school code",
      "frpm.*",
      "schools.county",
      "schools.gsoffered",
      "schools.cdscode",
      "schools.gsserved",
      "schools.latitude",
      "schools.*",
      "satscores.numge1500",
      "satscores.enroll12",
      "satscores.cds",
      "satscores.cname",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the football player Francois Affolter header's finishing rate on 18/09/2014? | player : player.player_name ( Francois Affolter ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.finishing , player_attributes.date , player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.finishing",
      "player_attributes.date",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. | races : races.year , races.raceid , races.time , races.date , races.name , races.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.* | drivers : drivers.nationality ( Japanese ) , drivers.driverid , drivers.driverref ( driver ) , drivers.code , drivers.surname , drivers.* | results : results.driverid , results.laps , results.raceid , results.points , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.time",
      "races.date",
      "races.name",
      "races.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.*",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.code",
      "drivers.surname",
      "drivers.*",
      "results.driverid",
      "results.laps",
      "results.raceid",
      "results.points",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which post has the highest score? Please give its id and title's name. | posts : posts.title , posts.score , posts.id , posts.posttypeid , posts.body , posts.* | comments : comments.postid , comments.score , comments.id , comments.text , comments.userid , comments.* | posthistory : posthistory.comment ( Title , title ) , posthistory.postid , posthistory.id , posthistory.userid , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "comments.postid",
      "comments.score",
      "comments.id",
      "comments.text",
      "comments.userid",
      "comments.*",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of blue female superheroes among all female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | colour : colour.colour ( Blue ) , colour.id , colour.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.skin_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.skin_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the percentage difference of student badges given during 2010 and 2011? | badges : badges.date , badges.userid , badges.name ( Student ) , badges.id , badges.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posts : posts.id , posts.score , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.date",
      "badges.userid",
      "badges.name",
      "badges.id",
      "badges.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posts.id",
      "posts.score",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which superhero has the most durability published by Dark Horse Comics? | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | superpower : superpower.power_name ( Durability ) , superpower.id , superpower.* | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.publisher_id , superhero.id , superhero.* | attribute : attribute.attribute_name ( Durability ) , attribute.id , attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.*",
      "attribute.attribute_name",
      "attribute.id",
      "attribute.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the difference in the number of crimes committed in East and North Bohemia in 1996? | district : district.a16 , district.a3 ( north Bohemia ) , district.a15 , district.district_id , district.a2 , district.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | client : client.gender , client.client_id , client.district_id , client.birth_date , client.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a16",
      "district.a3",
      "district.a15",
      "district.district_id",
      "district.a2",
      "district.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male? | patient : patient.sex , patient.id , patient.admission , patient.diagnosis , patient.birthday , patient.* | laboratory : laboratory.ssb , laboratory.centromea , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "laboratory.ssb",
      "laboratory.centromea",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Which user added a bounty amount of 50 to the post title mentioning variance? | posts : posts.title , posts.owneruserid , posts.id , posts.tags , posts.score , posts.* | votes : votes.bountyamount , votes.userid , votes.postid , votes.id , votes.creationdate , votes.* | posthistory : posthistory.comment ( Title , variance ) , posthistory.userid , posthistory.postid , posthistory.userdisplayname ( User ) , posthistory.id , posthistory.* | badges : badges.name ( variance ) , badges.userid , badges.id , badges.date , badges.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.owneruserid",
      "posts.id",
      "posts.tags",
      "posts.score",
      "posts.*",
      "votes.bountyamount",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.creationdate",
      "votes.*",
      "posthistory.comment",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.userdisplayname",
      "posthistory.id",
      "posthistory.*",
      "badges.name",
      "badges.userid",
      "badges.id",
      "badges.date",
      "badges.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? | set_translations : set_translations.language , set_translations.translation ( Mirrodin ) , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.name ( Mirrodin ) , sets.isonlineonly , sets.code , sets.mcmname ( Mirrodin ) , sets.block ( Mirrodin ) , sets.* | cards : cards.name , cards.isonlineonly , cards.subtypes ( Mirrodin ) , cards.uuid , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.mcmname",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.isonlineonly",
      "cards.subtypes",
      "cards.uuid",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. | team : team.team_long_name , team.team_short_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.chancecreationpassingclass ( Normal ) , team_attributes.buildupplaydribblingclass ( Normal ) , team_attributes.chancecreationpassing , team_attributes.date , team_attributes.team_api_id , team_attributes.* | match : match.season , match.id , match.stage , match.date , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.season",
      "match.id",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. | schools : schools.streetabr , schools.street , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( 5-7 , K-12 ) , schools.* | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.enrollment (ages 5-17) , frpm.free meal count (ages 5-17) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.sname , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.streetabr",
      "schools.street",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.enrollment (ages 5-17)",
      "frpm.free meal count (ages 5-17)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How many drivers managed to finish the race in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.circuitid , races.time , races.* | results : results.driverid , results.raceid , results.laps , results.resultid , results.constructorid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | status : status.status ( Finished ) , status.statusid , status.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.circuitid",
      "races.time",
      "races.*",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.resultid",
      "results.constructorid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "status.status",
      "status.statusid",
      "status.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average time in seconds of champion for each year, before year 1975? | races : races.year , races.time , races.date , races.raceid , races.circuitid , races.* | laptimes : laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.* | results : results.time , results.milliseconds , results.laps , results.driverid , results.raceid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.time",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.*",
      "results.time",
      "results.milliseconds",
      "results.laps",
      "results.driverid",
      "results.raceid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in a double type bond? | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? | loan : loan.date , loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.balance , trans.account_id , trans.trans_id , trans.type , trans.amount , trans.* | account : account.account_id , account.date , account.frequency , account.district_id , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.balance",
      "trans.account_id",
      "trans.trans_id",
      "trans.type",
      "trans.amount",
      "trans.*",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? | patient : patient.id , patient.admission , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.cre , laboratory.sc170 , laboratory.cpk , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.cre",
      "laboratory.sc170",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. | races : races.year , races.name ( Canadian Grand Prix ) , races.date , races.raceid , races.circuitid , races.* | drivers : drivers.driverref ( driver ) , drivers.surname ( Driver ) , drivers.forename , drivers.driverid , drivers.code , drivers.* | results : results.rank , results.driverid , results.laps , results.grid , results.raceid , results.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.position , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "drivers.driverref",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.rank",
      "results.driverid",
      "results.laps",
      "results.grid",
      "results.raceid",
      "results.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in the TR004_8_9 bond atoms? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR004_8_9 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR004_8_9 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? | races : races.name ( Spanish Grand Prix ) , races.year , races.circuitid , races.raceid , races.date , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.constructorid , results.statusid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.* | drivers : drivers.driverid , drivers.surname ( Speed ) , drivers.driverref ( driver , speed ) , drivers.number , drivers.code , drivers.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.circuitid",
      "races.raceid",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.constructorid",
      "results.statusid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*",
      "drivers.driverid",
      "drivers.surname",
      "drivers.driverref",
      "drivers.number",
      "drivers.code",
      "drivers.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Ig A level came to the hospital after 1990/1/1? | patient : patient.first date , patient.admission , patient.id , patient.diagnosis , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.examination date , examination.id , examination.lac , examination.thrombosis , examination.* | laboratory : laboratory.date , laboratory.iga , laboratory.igg , laboratory.igm , laboratory.id , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.lac",
      "examination.thrombosis",
      "examination.*",
      "laboratory.date",
      "laboratory.iga",
      "laboratory.igg",
      "laboratory.igm",
      "laboratory.id",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What percentage of carcinogenic-type molecules does not contain fluorine? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22? | team : team.team_long_name ( Hull City ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationcrossingclass , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.id , team_attributes.* | match : match.date , match.season , match.home_team_api_id , match.id , match.stage , match.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.id , player_attributes.potential , player_attributes.finishing , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.home_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? | examination : examination.diagnosis ( thrombosis ) , examination.ana pattern , examination.acl igg , examination.thrombosis , examination.acl iga , examination.* | patient : patient.diagnosis ( ANA ) , patient.id , patient.sex , patient.admission , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.sm , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.acl igg",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*",
      "patient.diagnosis",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? | frpm : frpm.school type ( Intermediate/Middle Schools (Public) ) , frpm.district name ( San Bernardino City Unified ) , frpm.district type , frpm.cdscode , frpm.school name , frpm.* | schools : schools.county ( San Bernardino ) , schools.soctype ( Intermediate/Middle Schools (Public) ) , schools.phone , schools.district ( San Bernardino City Unified , San Bernardino County ROP ) , schools.closeddate , schools.* | satscores : satscores.cds , satscores.numge1500 , satscores.dname ( San Bernardino City Unified ) , satscores.cname ( San Bernardino ) , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.school type",
      "frpm.district name",
      "frpm.district type",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.*",
      "schools.county",
      "schools.soctype",
      "schools.phone",
      "schools.district",
      "schools.closeddate",
      "schools.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.cname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix? | races : races.year , races.name , races.raceid , races.round , races.circuitid , races.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.position , laptimes.* | results : results.fastestlaptime , results.driverid , results.raceid , results.laps , results.rank , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.round",
      "races.circuitid",
      "races.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.position",
      "laptimes.*",
      "results.fastestlaptime",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.rank",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22? | team : team.team_long_name ( Hull City ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationcrossingclass , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.id , team_attributes.* | match : match.date , match.season , match.home_team_api_id , match.id , match.stage , match.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.id , player_attributes.potential , player_attributes.finishing , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.home_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 , district.* | order : order.order_id , order.account_id , order.amount , order.account_to , order.k_symbol , order.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "order.order_id",
      "order.account_id",
      "order.amount",
      "order.account_to",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Based on posts posted by Community, calculate the percentage of posts that use the R language. | posts : posts.owneruserid , posts.id , posts.posttypeid , posts.communityowneddate , posts.title , posts.* | users : users.displayname ( Community ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.postid , posthistory.userid , posthistory.comment , posthistory.id , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.communityowneddate",
      "posts.title",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.comment",
      "posthistory.id",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names. | drivers : drivers.surname ( Driver ) , drivers.forename , drivers.driverref ( driver ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.lap , laptimes.milliseconds , laptimes.* | races : races.raceid , races.year , races.name , races.round , races.time , races.* | results : results.fastestlaptime , results.constructorid , results.driverid , results.raceid , results.time , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.raceid",
      "races.year",
      "races.name",
      "races.round",
      "races.time",
      "races.*",
      "results.fastestlaptime",
      "results.constructorid",
      "results.driverid",
      "results.raceid",
      "results.time",
      "results.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many superheroes with blonde hair are there? | colour : colour.colour ( Blond ) , colour.id , colour.* | superhero : superhero.hair_colour_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.tg , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the skin colour of the superheroes with 100 attribute value. | hero_attribute : hero_attribute.attribute_value , hero_attribute.attribute_id , hero_attribute.hero_id , hero_attribute.* | colour : colour.colour , colour.id , colour.* | superhero : superhero.skin_colour_id , superhero.id , superhero.superhero_name , superhero.gender_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "hero_attribute.attribute_value",
      "hero_attribute.attribute_id",
      "hero_attribute.hero_id",
      "hero_attribute.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.skin_colour_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How was the build up play dribbling class for \"LEI\" on 2015/9/10? | team : team.team_short_name ( LEI ) , team.team_api_id , team.team_fifa_api_id , team.team_long_name , team.id , team.* | team_attributes : team_attributes.buildupplaydribblingclass , team_attributes.date , team_attributes.team_api_id , team_attributes.buildupplaydribbling , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_long_name",
      "team.id",
      "team.*",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplaydribbling",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules without sulphur element is not having double bond? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. | laboratory : laboratory.date , laboratory.plt , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.birthday , patient.id , patient.sex , patient.admission , patient.diagnosis , patient.* | examination : examination.examination date , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.birthday",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.*",
      "examination.examination date",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Ig A level came to the hospital after 1990/1/1? | patient : patient.first date , patient.admission , patient.id , patient.diagnosis , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.examination date , examination.id , examination.lac , examination.thrombosis , examination.* | laboratory : laboratory.date , laboratory.iga , laboratory.igg , laboratory.igm , laboratory.id , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.lac",
      "examination.thrombosis",
      "examination.*",
      "laboratory.date",
      "laboratory.iga",
      "laboratory.igg",
      "laboratory.igm",
      "laboratory.id",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of blue female superheroes among all female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | colour : colour.colour ( Blue ) , colour.id , colour.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.skin_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.skin_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List all the football player with the highest potential score. | player : player.player_name , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.potential , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.player_fifa_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.player_fifa_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? | loan : loan.date , loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.balance , trans.account_id , trans.trans_id , trans.type , trans.amount , trans.* | account : account.account_id , account.date , account.frequency , account.district_id , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.balance",
      "trans.account_id",
      "trans.trans_id",
      "trans.type",
      "trans.amount",
      "trans.*",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the score and the link type ID for post ID 395? | posts : posts.score , posts.id , posts.posttypeid , posts.body , posts.title , posts.* | postlinks : postlinks.linktypeid , postlinks.postid , postlinks.relatedpostid , postlinks.id , postlinks.creationdate , postlinks.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment ( link , type ) , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.title",
      "posts.*",
      "postlinks.linktypeid",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.id",
      "postlinks.creationdate",
      "postlinks.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Among all the lap records set on various circuits, what is the time for the fastest one? | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.fastestlaptime , results.fastestlap , results.fastestlapspeed , results.laps , results.time , results.* | circuits : circuits.circuitid , circuits.name , circuits.url , circuits.circuitref , circuits.lat , circuits.* | races : races.circuitid , races.year , races.raceid , races.time , races.name , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlap",
      "results.fastestlapspeed",
      "results.laps",
      "results.time",
      "results.*",
      "circuits.circuitid",
      "circuits.name",
      "circuits.url",
      "circuits.circuitref",
      "circuits.lat",
      "circuits.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.time",
      "races.name",
      "races.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.currency ( EUR ) , customers.segment ( LAM ) , customers.customerid , customers.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.currency",
      "customers.segment",
      "customers.customerid",
      "customers.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.kct , examination.acl igg , examination.rvvt , examination.* | laboratory : laboratory.hgb , laboratory.id , laboratory.t-bil , laboratory.hct , laboratory.tp , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.kct",
      "examination.acl igg",
      "examination.rvvt",
      "examination.*",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.t-bil",
      "laboratory.hct",
      "laboratory.tp",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements with double bond, consisted in molecule TR024. | bond : bond.molecule_id ( TR024 ) , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR024 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR024 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Is the set of cards with Adarkar Valkyrie only available outside the United States? | cards : cards.name ( Adarkar Valkyrie ) , cards.availability , cards.isonlineonly , cards.facename , cards.id , cards.* | sets : sets.isforeignonly , sets.isonlineonly , sets.code , sets.name , sets.id , sets.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.availability",
      "cards.isonlineonly",
      "cards.facename",
      "cards.id",
      "cards.*",
      "sets.isforeignonly",
      "sets.isonlineonly",
      "sets.code",
      "sets.name",
      "sets.id",
      "sets.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? | drivers : drivers.dob , drivers.number , drivers.driverid , drivers.surname , drivers.code , drivers.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | races : races.year , races.date , races.raceid , races.time , races.round , races.* | results : results.laps , results.fastestlap , results.time , results.driverid , results.points , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.number",
      "drivers.driverid",
      "drivers.surname",
      "drivers.code",
      "drivers.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.date",
      "races.raceid",
      "races.time",
      "races.round",
      "races.*",
      "results.laps",
      "results.fastestlap",
      "results.time",
      "results.driverid",
      "results.points",
      "results.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the atoms of TR144_8_19? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR144_8_19 ) , connected.atom_id , connected.atom_id2 , connected.* | bond : bond.bond_id ( TR144_8_19 ) , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Which district has highest active loan? | district : district.a2 , district.a3 , district.district_id , district.a4 , district.a6 , district.* | loan : loan.status , loan.loan_id , loan.account_id , loan.amount , loan.date , loan.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.a4",
      "district.a6",
      "district.*",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the bad superheroes, what is the percentage of female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | alignment : alignment.alignment ( Bad ) , alignment.id , alignment.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "alignment.alignment",
      "alignment.id",
      "alignment.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many bonds which involved atom 12 does molecule TR009 have? | bond : bond.molecule_id ( TR009 ) , bond.bond_id , bond.bond_type , bond.* | atom : atom.atom_id , atom.molecule_id ( TR009 ) , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id ( TR009 ) , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. | races : races.year , races.raceid , races.time , races.date , races.name , races.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.* | drivers : drivers.nationality ( Japanese ) , drivers.driverid , drivers.driverref ( driver ) , drivers.code , drivers.surname , drivers.* | results : results.driverid , results.laps , results.raceid , results.points , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.time",
      "races.date",
      "races.name",
      "races.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.*",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.code",
      "drivers.surname",
      "drivers.*",
      "results.driverid",
      "results.laps",
      "results.raceid",
      "results.points",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. | cards : cards.artist ( Jim Pavelec ) , cards.name , cards.id , cards.uuid , cards.asciiname , cards.* | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.name",
      "cards.id",
      "cards.uuid",
      "cards.asciiname",
      "cards.*",
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. | player : player.birthday , player.player_name , player.player_fifa_api_id , player.player_api_id , player.height , player.* | player_attributes : player_attributes.sprint_speed , player_attributes.date , player_attributes.acceleration , player_attributes.player_api_id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.birthday",
      "player.player_name",
      "player.player_fifa_api_id",
      "player.player_api_id",
      "player.height",
      "player.*",
      "player_attributes.sprint_speed",
      "player_attributes.date",
      "player_attributes.acceleration",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List all the football player with the highest potential score. | player : player.player_name , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.potential , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.player_fifa_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.player_fifa_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the heights of the heroes whose eye colours are amber. | superhero : superhero.height_cm , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Amber ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. | laboratory : laboratory.date , laboratory.t-bil , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.id , patient.admission , patient.first date , patient.diagnosis , patient.sex , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.examination date , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.id",
      "patient.admission",
      "patient.first date",
      "patient.diagnosis",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.examination date",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. | frpm : frpm.charter funding type ( Locally funded ) , frpm.school name , frpm.enrollment (k-12) , frpm.school type , frpm.free meal count (ages 5-17) , frpm.* | schools : schools.fundingtype ( Locally funded ) , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( K-12 ) , schools.soctype , schools.* | satscores : satscores.sname , satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.charter funding type",
      "frpm.school name",
      "frpm.enrollment (k-12)",
      "frpm.school type",
      "frpm.free meal count (ages 5-17)",
      "frpm.*",
      "schools.fundingtype",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.soctype",
      "schools.*",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? | order : order.amount , order.account_id , order.account_to , order.order_id , order.k_symbol , order.* | account : account.account_id , account.frequency , account.date , account.district_id , account.* | trans : trans.amount , trans.account_id , trans.balance , trans.trans_id , trans.type , trans.* | loan : loan.account_id , loan.amount , loan.date , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "order.amount",
      "order.account_id",
      "order.account_to",
      "order.order_id",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "trans.amount",
      "trans.account_id",
      "trans.balance",
      "trans.trans_id",
      "trans.type",
      "trans.*",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in a double type bond? | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color. | superhero : superhero.eye_colour_id , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.hair_colour_id , superhero.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.hair_colour_id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules without sulphur element is not having double bond? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. | sets : sets.releasedate , sets.code , sets.id , sets.name , sets.block , sets.* | cards : cards.name , cards.uuid , cards.rarity ( common ) , cards.artist , cards.availability , cards.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.releasedate",
      "sets.code",
      "sets.id",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.uuid",
      "cards.rarity",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last name of the members of the club that attended the women's soccer event. | member : member.last_name , member.member_id , member.position ( Member ) , member.zip , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Clubb ) , zip_code.type , zip_code.state , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.member_id",
      "member.position",
      "member.zip",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.state",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123? | patient : patient.sex , patient.diagnosis ( PSS ) , patient.id , patient.admission , patient.birthday , patient.* | examination : examination.diagnosis ( PSS ) , examination.id , examination.symptoms , examination.ana pattern , examination.thrombosis , examination.* | laboratory : laboratory.crp ( 2+ ) , laboratory.cre , laboratory.ra ( 2+ ) , laboratory.cpk , laboratory.t-bil , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.thrombosis",
      "examination.*",
      "laboratory.crp",
      "laboratory.cre",
      "laboratory.ra",
      "laboratory.cpk",
      "laboratory.t-bil",
      "laboratory.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? | loan : loan.date , loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.balance , trans.account_id , trans.trans_id , trans.type , trans.amount , trans.* | account : account.account_id , account.date , account.frequency , account.district_id , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.balance",
      "trans.account_id",
      "trans.trans_id",
      "trans.type",
      "trans.amount",
      "trans.*",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. | molecule : molecule.label , molecule.molecule_id ( TR006 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR006 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR006 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which element is the least numerous in non-carcinogenic molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? | order : order.amount , order.account_id , order.account_to , order.order_id , order.k_symbol , order.* | account : account.account_id , account.frequency , account.date , account.district_id , account.* | trans : trans.amount , trans.account_id , trans.balance , trans.trans_id , trans.type , trans.* | loan : loan.account_id , loan.amount , loan.date , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "order.amount",
      "order.account_id",
      "order.account_to",
      "order.order_id",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "trans.amount",
      "trans.account_id",
      "trans.balance",
      "trans.trans_id",
      "trans.type",
      "trans.*",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many white bordered cards are powerful? | cards : cards.power , cards.bordercolor ( white ) , cards.uuid , cards.id , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.bordercolor",
      "cards.uuid",
      "cards.id",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'. | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many elements are contained in bond_id TR001_3_4? | bond : bond.bond_id ( TR001_3_4 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_3_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Which district has highest active loan? | district : district.a2 , district.a3 , district.district_id , district.a4 , district.a6 , district.* | loan : loan.status , loan.loan_id , loan.account_id , loan.amount , loan.date , loan.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.a4",
      "district.a6",
      "district.*",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.currency ( EUR ) , customers.segment ( LAM ) , customers.customerid , customers.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.currency",
      "customers.segment",
      "customers.customerid",
      "customers.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the atoms' elements that form bond TR000_2_3. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR000_2_3 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR000_2_3 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? | loan : loan.date , loan.amount , loan.account_id , loan.duration , loan.loan_id , loan.* | client : client.gender , client.client_id , client.birth_date , client.district_id , client.* | account : account.account_id , account.date , account.district_id , account.frequency , account.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.amount",
      "loan.account_id",
      "loan.duration",
      "loan.loan_id",
      "loan.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.frequency",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many superheroes with blonde hair are there? | colour : colour.colour ( Blond ) , colour.id , colour.* | superhero : superhero.hair_colour_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? | patient : patient.first date , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.u-pro , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.u-pro",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the skin colour of the superheroes with 100 attribute value. | hero_attribute : hero_attribute.attribute_value , hero_attribute.attribute_id , hero_attribute.hero_id , hero_attribute.* | colour : colour.colour , colour.id , colour.* | superhero : superhero.skin_colour_id , superhero.id , superhero.superhero_name , superhero.gender_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "hero_attribute.attribute_value",
      "hero_attribute.attribute_id",
      "hero_attribute.hero_id",
      "hero_attribute.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.skin_colour_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. | races : races.year , races.name ( Canadian Grand Prix ) , races.date , races.raceid , races.circuitid , races.* | drivers : drivers.driverref ( driver ) , drivers.surname ( Driver ) , drivers.forename , drivers.driverid , drivers.code , drivers.* | results : results.rank , results.driverid , results.laps , results.grid , results.raceid , results.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.position , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "drivers.driverref",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.rank",
      "results.driverid",
      "results.laps",
      "results.grid",
      "results.raceid",
      "results.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. | player : player.player_name , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.attacking_work_rate , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.potential , player_attributes.overall_rating , player_attributes.* | match : match.id , match.season , match.home_team_api_id , match.stage , match.date , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.attacking_work_rate",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.home_team_api_id",
      "match.stage",
      "match.date",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Find the triple-bonded molecules which are carcinogenic. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level. | laboratory : laboratory.date , laboratory.plt , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.birthday , patient.id , patient.sex , patient.admission , patient.diagnosis , patient.* | examination : examination.examination date , examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.birthday",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.*",
      "examination.examination date",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.ana pattern , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? | loan : loan.date , loan.amount , loan.account_id , loan.duration , loan.loan_id , loan.* | client : client.gender , client.client_id , client.birth_date , client.district_id , client.* | account : account.account_id , account.date , account.district_id , account.frequency , account.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.amount",
      "loan.account_id",
      "loan.duration",
      "loan.loan_id",
      "loan.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.frequency",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher's name of Blue Beetle II? | publisher : publisher.publisher_name , publisher.id , publisher.* | superhero : superhero.superhero_name ( Beetle , Blue Beetle ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month? | patient : patient.sex , patient.id , patient.first date , patient.admission , patient.birthday , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.* | examination : examination.id , examination.examination date , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.examination date",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.superhero_name , superhero.gender_id , superhero.full_name , superhero.publisher_id , superhero.* | superpower : superpower.id , superpower.power_name , superpower.* | hero_attribute : hero_attribute.attribute_value , hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.*",
      "superpower.id",
      "superpower.power_name",
      "superpower.*",
      "hero_attribute.attribute_value",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.description , patient.admission , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.t-cho , laboratory.id , laboratory.date , laboratory.pic , laboratory.sm ( negative ) , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.description",
      "patient.admission",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.t-cho",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the badge name that user 'SilentGhost' obtained? | badges : badges.name , badges.userid , badges.date , badges.id , badges.* | users : users.displayname ( SilentGhost , name ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? | driverstandings : driverstandings.wins , driverstandings.points , driverstandings.driverid , driverstandings.position , driverstandings.driverstandingsid , driverstandings.* | results : results.points , results.driverid , results.raceid , results.laps , results.constructorid , results.* | drivers : drivers.surname ( Driver ) , drivers.driverid , drivers.driverref ( driver ) , drivers.forename , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.driverstandingsid",
      "driverstandings.*",
      "results.points",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.constructorid",
      "results.*",
      "drivers.surname",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.forename",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Describe the display name of the parent ID for child post with the highest score. | posts : posts.score , posts.ownerdisplayname , posts.parentid , posts.id , posts.posttypeid , posts.* | users : users.displayname ( name ) , users.id , users.reputation , users.location , users.views , users.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.ownerdisplayname",
      "posts.parentid",
      "posts.id",
      "posts.posttypeid",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements with double bond, consisted in molecule TR024. | bond : bond.molecule_id ( TR024 ) , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id ( TR024 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR024 ) , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital? | patient : patient.admission , patient.id , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.rnp , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.rnp",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy? | cards : cards.artist ( Aaron Miller , Jeremy Jarvis ) , cards.asciiname , cards.name , cards.uuid , cards.id , cards.* | sets : sets.name ( Coldsnap ) , sets.code , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.asciiname",
      "cards.name",
      "cards.uuid",
      "cards.id",
      "cards.*",
      "sets.name",
      "sets.code",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. | team : team.team_long_name , team.team_short_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.chancecreationpassingclass ( Normal ) , team_attributes.buildupplaydribblingclass ( Normal ) , team_attributes.chancecreationpassing , team_attributes.date , team_attributes.team_api_id , team_attributes.* | match : match.season , match.id , match.stage , match.date , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.season",
      "match.id",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)? | patient : patient.sex , patient.birthday , patient.id , patient.first date , patient.admission , patient.* | laboratory : laboratory.pt , laboratory.aptt , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.id , examination.symptoms , examination.diagnosis , examination.thrombosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.birthday",
      "patient.id",
      "patient.first date",
      "patient.admission",
      "patient.*",
      "laboratory.pt",
      "laboratory.aptt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? | users : users.displayname ( Harvey Motulsky , Noah Snyder ) , users.views , users.upvotes , users.id , users.reputation , users.* | posts : posts.owneruserid , posts.title , posts.id , posts.score , posts.favoritecount , posts.* | posthistory : posthistory.userid , posthistory.postid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.displayname",
      "users.views",
      "users.upvotes",
      "users.id",
      "users.reputation",
      "users.*",
      "posts.owneruserid",
      "posts.title",
      "posts.id",
      "posts.score",
      "posts.favoritecount",
      "posts.*",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name chemical elements that form a bond TR001_10_11. | bond : bond.bond_id ( TR001_10_11 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.time , races.circuitid , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.position , results.points , results.* | driverstandings : driverstandings.wins , driverstandings.driverid , driverstandings.position , driverstandings.points , driverstandings.raceid , driverstandings.* | laptimes : laptimes.position , laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.position",
      "results.points",
      "results.*",
      "driverstandings.wins",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.points",
      "driverstandings.raceid",
      "driverstandings.*",
      "laptimes.position",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down at least five full names of superheroes with blue eyes. | superhero : superhero.full_name , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.full_name",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' | posts : posts.title ( Open source tools for visualizing multi-dimensional data? , Visualizing multi-dimensional data (LSI) in 2D ) , posts.lasteditordisplayname , posts.owneruserid , posts.ownerdisplayname , posts.lasteditoruserid , posts.* | badges : badges.name ( Editor ) , badges.userid , badges.date , badges.id , badges.* | posthistory : posthistory.text ( Open source tools for visualizing multi-dimensional data ? , Open source tools for visualizing multi-dimensional data? ) , posthistory.postid , posthistory.userid , posthistory.id , posthistory.comment ( Title , data ) , posthistory.* | users : users.displayname ( editor ) , users.id , users.reputation , users.location , users.views , users.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.lasteditordisplayname",
      "posts.owneruserid",
      "posts.ownerdisplayname",
      "posts.lasteditoruserid",
      "posts.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "posthistory.text",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.comment",
      "posthistory.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Which district has highest active loan? | district : district.a2 , district.a3 , district.district_id , district.a4 , district.a6 , district.* | loan : loan.status , loan.loan_id , loan.account_id , loan.amount , loan.date , loan.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.a4",
      "district.a6",
      "district.*",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. | races : races.year , races.name ( Canadian Grand Prix ) , races.date , races.raceid , races.circuitid , races.* | drivers : drivers.driverref ( driver ) , drivers.surname ( Driver ) , drivers.forename , drivers.driverid , drivers.code , drivers.* | results : results.rank , results.driverid , results.laps , results.grid , results.raceid , results.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.position , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "drivers.driverref",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.rank",
      "results.driverid",
      "results.laps",
      "results.grid",
      "results.raceid",
      "results.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. | drivers : drivers.dob , drivers.nationality ( German ) , drivers.driverid , drivers.surname , drivers.forename , drivers.* | pitstops : pitstops.duration , pitstops.stop , pitstops.driverid , pitstops.milliseconds , pitstops.raceid , pitstops.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.position , laptimes.* | driverstandings : driverstandings.driverid , driverstandings.raceid , driverstandings.points , driverstandings.position , driverstandings.wins , driverstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.surname",
      "drivers.forename",
      "drivers.*",
      "pitstops.duration",
      "pitstops.stop",
      "pitstops.driverid",
      "pitstops.milliseconds",
      "pitstops.raceid",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.position",
      "laptimes.*",
      "driverstandings.driverid",
      "driverstandings.raceid",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.wins",
      "driverstandings.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. | races : races.year , races.name ( Canadian Grand Prix ) , races.date , races.raceid , races.circuitid , races.* | drivers : drivers.driverref ( driver ) , drivers.surname ( Driver ) , drivers.forename , drivers.driverid , drivers.code , drivers.* | results : results.rank , results.driverid , results.laps , results.grid , results.raceid , results.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.position , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "drivers.driverref",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.rank",
      "results.driverid",
      "results.laps",
      "results.grid",
      "results.raceid",
      "results.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. | drivers : drivers.dob , drivers.nationality ( German ) , drivers.driverid , drivers.surname , drivers.forename , drivers.* | pitstops : pitstops.duration , pitstops.stop , pitstops.driverid , pitstops.milliseconds , pitstops.raceid , pitstops.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.position , laptimes.* | driverstandings : driverstandings.driverid , driverstandings.raceid , driverstandings.points , driverstandings.position , driverstandings.wins , driverstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.surname",
      "drivers.forename",
      "drivers.*",
      "pitstops.duration",
      "pitstops.stop",
      "pitstops.driverid",
      "pitstops.milliseconds",
      "pitstops.raceid",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.position",
      "laptimes.*",
      "driverstandings.driverid",
      "driverstandings.raceid",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.wins",
      "driverstandings.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? | patient : patient.first date , patient.sex , patient.diagnosis ( BEHCET ) , patient.admission , patient.id , patient.* | examination : examination.diagnosis ( Behcet ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.sex",
      "patient.diagnosis",
      "patient.admission",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.time ( 16:25:00 ) , transactions_1k.date , transactions_1k.customerid , transactions_1k.amount , transactions_1k.price , transactions_1k.* | yearmonth : yearmonth.date , yearmonth.customerid , yearmonth.consumption , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.customerid",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.*",
      "yearmonth.date",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. | member : member.last_name , member.first_name , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_description , expense.approved , expense.expense_id , expense.link_to_budget , expense.* | budget : budget.spent , budget.budget_id , budget.amount , budget.category , budget.remaining , budget.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.expense_id",
      "expense.link_to_budget",
      "expense.*",
      "budget.spent",
      "budget.budget_id",
      "budget.amount",
      "budget.category",
      "budget.remaining",
      "budget.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? | cards : cards.convertedmanacost , cards.isonlineonly , cards.faceconvertedmanacost , cards.uuid , cards.name , cards.* | sets : sets.name ( Coldsnap ) , sets.isonlineonly , sets.mcmname ( Coldsnap ) , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.isonlineonly",
      "cards.faceconvertedmanacost",
      "cards.uuid",
      "cards.name",
      "cards.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.mcmname",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. | team : team.team_long_name , team.team_short_name , team.team_fifa_api_id , team.team_api_id , team.id , team.* | team_attributes : team_attributes.chancecreationpassingclass ( Normal ) , team_attributes.buildupplaydribblingclass ( Normal ) , team_attributes.chancecreationpassing , team_attributes.date , team_attributes.team_api_id , team_attributes.* | match : match.season , match.id , match.stage , match.date , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_fifa_api_id",
      "team.team_api_id",
      "team.id",
      "team.*",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.buildupplaydribblingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.season",
      "match.id",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "How many users are awarded with more than 5 badges? | badges : badges.userid , badges.id , badges.name , badges.date , badges.* | votes : votes.userid , votes.id , votes.postid , votes.creationdate , votes.bountyamount , votes.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.userid",
      "badges.id",
      "badges.name",
      "badges.date",
      "badges.*",
      "votes.userid",
      "votes.id",
      "votes.postid",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many students of the Student_Club have attended the event \"Women's Soccer\"? | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | member : member.link_to_major , member.member_id , member.zip , member.position , member.first_name , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.position",
      "member.first_name",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team. | races : races.year , races.name ( Monaco Grand Prix ) , races.date , races.time , races.circuitid , races.* | constructorresults : constructorresults.points , constructorresults.constructorid , constructorresults.raceid , constructorresults.constructorresultsid , constructorresults.status , constructorresults.* | constructors : constructors.name , constructors.nationality , constructors.constructorref , constructors.constructorid , constructors.url , constructors.* | constructorstandings : constructorstandings.constructorid , constructorstandings.points , constructorstandings.wins , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.time",
      "races.circuitid",
      "races.*",
      "constructorresults.points",
      "constructorresults.constructorid",
      "constructorresults.raceid",
      "constructorresults.constructorresultsid",
      "constructorresults.status",
      "constructorresults.*",
      "constructors.name",
      "constructors.nationality",
      "constructors.constructorref",
      "constructors.constructorid",
      "constructors.url",
      "constructors.*",
      "constructorstandings.constructorid",
      "constructorstandings.points",
      "constructorstandings.wins",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. | bond : bond.bond_id ( TR001_2_4 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_2_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How many drivers managed to finish the race in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.circuitid , races.time , races.* | results : results.driverid , results.raceid , results.laps , results.resultid , results.constructorid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | status : status.status ( Finished ) , status.statusid , status.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.circuitid",
      "races.time",
      "races.*",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.resultid",
      "results.constructorid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "status.status",
      "status.statusid",
      "status.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements for bond id TR001_10_11? | bond : bond.bond_id ( TR001_10_11 ) , bond.molecule_id , bond.bond_type , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of atoms that can not bond with any other atoms. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the cost of posters for 'September Speaker' event. | expense : expense.cost , expense.expense_description ( Posters ) , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_name ( September Speaker ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Costa ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.kct , examination.* | patient : patient.id , patient.sex , patient.admission , patient.diagnosis , patient.birthday , patient.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996. | district : district.a13 , district.a12 , district.a2 , district.a3 , district.district_id , district.* | loan : loan.duration , loan.status , loan.loan_id , loan.account_id , loan.date , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a13",
      "district.a12",
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.*",
      "loan.duration",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.date",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Give the full name and contact number of members who had to spend more than average on each expense. | member : member.first_name , member.last_name , member.phone , member.email , member.member_id , member.* | expense : expense.cost , expense.expense_id , expense.approved , expense.link_to_member , expense.expense_description , expense.* | zip_code : zip_code.zip_code , zip_code.city ( Given ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.phone",
      "member.email",
      "member.member_id",
      "member.*",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_description",
      "expense.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. | schools : schools.streetabr , schools.street , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( 5-7 , K-12 ) , schools.* | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.enrollment (ages 5-17) , frpm.free meal count (ages 5-17) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.sname , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.streetabr",
      "schools.street",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.enrollment (ages 5-17)",
      "frpm.free meal count (ages 5-17)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "On average how many carcinogenic molecules are single bonded? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the average height of a non-human superhero in Dark Horse Comics? | superhero : superhero.height_cm , superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.* | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.* | race : race.race , race.id , race.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "race.race",
      "race.id",
      "race.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. | laboratory : laboratory.date , laboratory.t-bil , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.id , patient.admission , patient.first date , patient.diagnosis , patient.sex , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.examination date , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.id",
      "patient.admission",
      "patient.first date",
      "patient.diagnosis",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.examination date",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which country is the league Italy Serie A from? | country : country.name ( Italy ) , country.id , country.* | league : league.name ( Italy Serie A ) , league.country_id , league.id , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.* | player : player.id , player.birthday , player.height , player.weight , player.player_api_id , player.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*",
      "player.id",
      "player.birthday",
      "player.height",
      "player.weight",
      "player.player_api_id",
      "player.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last names of students under the Elementary Education major and include their phone numbers. | member : member.last_name , member.phone , member.link_to_major , member.member_id , member.zip , member.* | major : major.major_name ( Elementary Education ) , major.major_id , major.department , major.college , major.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.phone",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.*",
      "major.major_name",
      "major.major_id",
      "major.department",
      "major.college",
      "major.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the difference in the number of crimes committed in East and North Bohemia in 1996? | district : district.a16 , district.a3 ( north Bohemia ) , district.a15 , district.district_id , district.a2 , district.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | client : client.gender , client.client_id , client.district_id , client.birth_date , client.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a16",
      "district.a3",
      "district.a15",
      "district.district_id",
      "district.a2",
      "district.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. | atom : atom.element , atom.molecule_id ( TR000 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR000 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR000 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the atoms' elements that form bond TR000_2_3. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR000_2_3 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR000_2_3 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.kct , examination.* | patient : patient.id , patient.sex , patient.admission , patient.diagnosis , patient.birthday , patient.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Based on posts posted by Community, calculate the percentage of posts that use the R language. | posts : posts.owneruserid , posts.id , posts.posttypeid , posts.communityowneddate , posts.title , posts.* | users : users.displayname ( Community ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.postid , posthistory.userid , posthistory.comment , posthistory.id , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.communityowneddate",
      "posts.title",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.comment",
      "posthistory.id",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of the toxicology of the molecule \"TR004\". | molecule : molecule.molecule_id ( TR004 ) , molecule.label , molecule.* | atom : atom.element , atom.molecule_id ( TR004 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR004 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What percentage of carcinogenic-type molecules does not contain fluorine? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? | legalities : legalities.format ( legacy ) , legalities.status , legalities.uuid , legalities.id , legalities.* | cards : cards.frameversion , cards.artist ( D. Alexander Gregory ) , cards.name , cards.hascontentwarning , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.id",
      "legalities.*",
      "cards.frameversion",
      "cards.artist",
      "cards.name",
      "cards.hascontentwarning",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Describe the display name of the parent ID for child post with the highest score. | posts : posts.score , posts.ownerdisplayname , posts.parentid , posts.id , posts.posttypeid , posts.* | users : users.displayname ( name ) , users.id , users.reputation , users.location , users.views , users.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.ownerdisplayname",
      "posts.parentid",
      "posts.id",
      "posts.posttypeid",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name chemical elements that form a bond TR001_10_11. | bond : bond.bond_id ( TR001_10_11 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id ( TR001_10_11 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the atoms of TR144_8_19? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR144_8_19 ) , connected.atom_id , connected.atom_id2 , connected.* | bond : bond.bond_id ( TR144_8_19 ) , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997? | loan : loan.date , loan.amount , loan.account_id , loan.duration , loan.loan_id , loan.* | client : client.gender , client.client_id , client.birth_date , client.district_id , client.* | account : account.account_id , account.date , account.district_id , account.frequency , account.* | disp : disp.client_id , disp.account_id , disp.type , disp.disp_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.amount",
      "loan.account_id",
      "loan.duration",
      "loan.loan_id",
      "loan.*",
      "client.gender",
      "client.client_id",
      "client.birth_date",
      "client.district_id",
      "client.*",
      "account.account_id",
      "account.date",
      "account.district_id",
      "account.frequency",
      "account.*",
      "disp.client_id",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20. | team : team.team_long_name ( PEC Zwolle ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationpassingclass , team_attributes.chancecreationpassing , team_attributes.team_fifa_api_id , team_attributes.team_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n? | player : player.player_name ( Aaron Appindangoye , Abdou Diallo ) , player.player_api_id , player.id , player.player_fifa_api_id , player.birthday , player.* | player_attributes : player_attributes.ball_control , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.*",
      "player_attributes.ball_control",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? | cards : cards.manacost , cards.availability ( mtgo , paper ) , cards.bordercolor ( black ) , cards.frameversion , cards.layout ( normal ) , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.uuid , foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.manacost",
      "cards.availability",
      "cards.bordercolor",
      "cards.frameversion",
      "cards.layout",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"? | budget : budget.category ( Advertisement ) , budget.amount , budget.budget_id , budget.link_to_event , budget.spent , budget.* | event : event.event_name ( October Meeting , Yearly Kickoff ) , event.event_id , event.type ( Budget , Meeting ) , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "budget.category",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.spent",
      "budget.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Find the triple-bonded molecules which are carcinogenic. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes created by George Lucas, identify the percentage of female superheroes. | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( George Lucas ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.superhero_name , superhero.full_name , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many percent of female heroes were published by Marvel Comics? | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.publisher_id , superhero.id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET? | patient : patient.first date , patient.sex , patient.diagnosis ( BEHCET ) , patient.admission , patient.id , patient.* | examination : examination.diagnosis ( Behcet ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.sex",
      "patient.diagnosis",
      "patient.admission",
      "patient.id",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? | set_translations : set_translations.language , set_translations.translation ( Mirrodin ) , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.name ( Mirrodin ) , sets.isonlineonly , sets.code , sets.mcmname ( Mirrodin ) , sets.block ( Mirrodin ) , sets.* | cards : cards.name , cards.isonlineonly , cards.subtypes ( Mirrodin ) , cards.uuid , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.mcmname",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.isonlineonly",
      "cards.subtypes",
      "cards.uuid",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher's name of Blue Beetle II? | publisher : publisher.publisher_name , publisher.id , publisher.* | superhero : superhero.superhero_name ( Beetle , Blue Beetle ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the hero name and race of Charles Chandler. | race : race.race , race.id , race.* | superhero : superhero.superhero_name , superhero.full_name ( Charles Chandler ) , superhero.race_id , superhero.skin_colour_id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "race.race",
      "race.id",
      "race.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. | races : races.name ( Singapore Grand Prix ) , races.year , races.raceid , races.circuitid , races.date , races.* | constructors : constructors.constructorref , constructors.name , constructors.constructorid , constructors.url , constructors.nationality , constructors.* | driverstandings : driverstandings.raceid , driverstandings.driverid , driverstandings.wins , driverstandings.points , driverstandings.position , driverstandings.* | constructorstandings : constructorstandings.constructorid , constructorstandings.wins , constructorstandings.points , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.raceid",
      "races.circuitid",
      "races.date",
      "races.*",
      "constructors.constructorref",
      "constructors.name",
      "constructors.constructorid",
      "constructors.url",
      "constructors.nationality",
      "constructors.*",
      "driverstandings.raceid",
      "driverstandings.driverid",
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.*",
      "constructorstandings.constructorid",
      "constructorstandings.wins",
      "constructorstandings.points",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who have a normal platelet level, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last names of students under the Elementary Education major and include their phone numbers. | member : member.last_name , member.phone , member.link_to_major , member.member_id , member.zip , member.* | major : major.major_name ( Elementary Education ) , major.major_id , major.department , major.college , major.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.phone",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.*",
      "major.major_name",
      "major.major_id",
      "major.department",
      "major.college",
      "major.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27? | loan : loan.date , loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.* | client : client.client_id , client.gender , client.district_id , client.birth_date , client.* | trans : trans.balance , trans.account_id , trans.trans_id , trans.type , trans.amount , trans.* | account : account.account_id , account.date , account.frequency , account.district_id , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "loan.date",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.*",
      "client.client_id",
      "client.gender",
      "client.district_id",
      "client.birth_date",
      "client.*",
      "trans.balance",
      "trans.account_id",
      "trans.trans_id",
      "trans.type",
      "trans.amount",
      "trans.*",
      "account.account_id",
      "account.date",
      "account.frequency",
      "account.district_id",
      "account.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race? | races : races.name ( Austrian Grand Prix ) , races.date , races.raceid , races.time , races.circuitid , races.* | pitstops : pitstops.duration , pitstops.raceid , pitstops.stop , pitstops.lap , pitstops.time , pitstops.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | results : results.laps , results.raceid , results.time , results.driverid , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.date",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "pitstops.duration",
      "pitstops.raceid",
      "pitstops.stop",
      "pitstops.lap",
      "pitstops.time",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "results.laps",
      "results.raceid",
      "results.time",
      "results.driverid",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap? | cards : cards.convertedmanacost , cards.isonlineonly , cards.faceconvertedmanacost , cards.uuid , cards.name , cards.* | sets : sets.name ( Coldsnap ) , sets.isonlineonly , sets.mcmname ( Coldsnap ) , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.isonlineonly",
      "cards.faceconvertedmanacost",
      "cards.uuid",
      "cards.name",
      "cards.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.mcmname",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total? | order : order.amount , order.account_id , order.account_to , order.order_id , order.k_symbol , order.* | account : account.account_id , account.frequency , account.date , account.district_id , account.* | trans : trans.amount , trans.account_id , trans.balance , trans.trans_id , trans.type , trans.* | loan : loan.account_id , loan.amount , loan.date , loan.duration , loan.status , loan.*",
    "output_sequence": " | ",
    "tc_original": [
      "order.amount",
      "order.account_id",
      "order.account_to",
      "order.order_id",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.district_id",
      "account.*",
      "trans.amount",
      "trans.account_id",
      "trans.balance",
      "trans.trans_id",
      "trans.type",
      "trans.*",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.duration",
      "loan.status",
      "loan.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.ana pattern , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' | posts : posts.title ( Open source tools for visualizing multi-dimensional data? , Visualizing multi-dimensional data (LSI) in 2D ) , posts.lasteditordisplayname , posts.owneruserid , posts.ownerdisplayname , posts.lasteditoruserid , posts.* | badges : badges.name ( Editor ) , badges.userid , badges.date , badges.id , badges.* | posthistory : posthistory.text ( Open source tools for visualizing multi-dimensional data ? , Open source tools for visualizing multi-dimensional data? ) , posthistory.postid , posthistory.userid , posthistory.id , posthistory.comment ( Title , data ) , posthistory.* | users : users.displayname ( editor ) , users.id , users.reputation , users.location , users.views , users.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.lasteditordisplayname",
      "posts.owneruserid",
      "posts.ownerdisplayname",
      "posts.lasteditoruserid",
      "posts.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "posthistory.text",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.comment",
      "posthistory.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? | examination : examination.ana pattern , examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.* | patient : patient.id , patient.admission , patient.sex , patient.birthday , patient.description , patient.* | laboratory : laboratory.t-bil , laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.ana pattern",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? | match : match.date , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | league : league.name , league.country_id , league.id , league.* | country : country.name , country.id , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.agility , player_attributes.balance , player_attributes.jumping , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.date",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.jumping",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Ig A level came to the hospital after 1990/1/1? | patient : patient.first date , patient.admission , patient.id , patient.diagnosis , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.examination date , examination.id , examination.lac , examination.thrombosis , examination.* | laboratory : laboratory.date , laboratory.iga , laboratory.igg , laboratory.igm , laboratory.id , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.lac",
      "examination.thrombosis",
      "examination.*",
      "laboratory.date",
      "laboratory.iga",
      "laboratory.igg",
      "laboratory.igm",
      "laboratory.id",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Among all the lap records set on various circuits, what is the time for the fastest one? | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.fastestlaptime , results.fastestlap , results.fastestlapspeed , results.laps , results.time , results.* | circuits : circuits.circuitid , circuits.name , circuits.url , circuits.circuitref , circuits.lat , circuits.* | races : races.circuitid , races.year , races.raceid , races.time , races.name , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlap",
      "results.fastestlapspeed",
      "results.laps",
      "results.time",
      "results.*",
      "circuits.circuitid",
      "circuits.name",
      "circuits.url",
      "circuits.circuitref",
      "circuits.lat",
      "circuits.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.time",
      "races.name",
      "races.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? | driverstandings : driverstandings.wins , driverstandings.points , driverstandings.driverid , driverstandings.position , driverstandings.driverstandingsid , driverstandings.* | results : results.points , results.driverid , results.raceid , results.laps , results.constructorid , results.* | drivers : drivers.surname ( Driver ) , drivers.driverid , drivers.driverref ( driver ) , drivers.forename , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.driverstandingsid",
      "driverstandings.*",
      "results.points",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.constructorid",
      "results.*",
      "drivers.surname",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.forename",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing? | player_attributes : player_attributes.overall_rating , player_attributes.attacking_work_rate , player_attributes.defensive_work_rate , player_attributes.potential , player_attributes.player_api_id , player_attributes.* | match : match.id , match.season , match.stage , match.date , match.home_team_api_id , match.* | player : player.player_api_id , player.player_fifa_api_id , player.id , player.player_name , player.birthday , player.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.attacking_work_rate",
      "player_attributes.defensive_work_rate",
      "player_attributes.potential",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.stage",
      "match.date",
      "match.home_team_api_id",
      "match.*",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.player_name",
      "player.birthday",
      "player.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm? | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.publisher_id , superhero.id , superhero.gender_id , superhero.eye_colour_id , superhero.superhero_name , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.publisher_id",
      "superhero.id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "How many users are awarded with more than 5 badges? | badges : badges.userid , badges.id , badges.name , badges.date , badges.* | votes : votes.userid , votes.id , votes.postid , votes.creationdate , votes.bountyamount , votes.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.userid",
      "badges.id",
      "badges.name",
      "badges.date",
      "badges.*",
      "votes.userid",
      "votes.id",
      "votes.postid",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.description , patient.admission , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.t-cho , laboratory.id , laboratory.date , laboratory.pic , laboratory.sm ( negative ) , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.description",
      "patient.admission",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.t-cho",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Provide the heights of the heroes whose eye colours are amber. | superhero : superhero.height_cm , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Amber ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the percentage difference of student badges given during 2010 and 2011? | badges : badges.date , badges.userid , badges.name ( Student ) , badges.id , badges.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posts : posts.id , posts.score , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.date",
      "badges.userid",
      "badges.name",
      "badges.id",
      "badges.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posts.id",
      "posts.score",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards with format commander and legal status do not have a content warning? | legalities : legalities.status ( Legal ) , legalities.format ( commander ) , legalities.id , legalities.uuid , legalities.* | cards : cards.hascontentwarning , cards.uuid , cards.name ( Warning ) , cards.isonlineonly , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.status",
      "legalities.format",
      "legalities.id",
      "legalities.uuid",
      "legalities.*",
      "cards.hascontentwarning",
      "cards.uuid",
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "When was the first time did Kevin Constant have his highest crossing score? Give the date. | player : player.player_name ( Kevin Constant ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.player_api_id , player_attributes.overall_rating , player_attributes.potential , player_attributes.* | team_attributes : team_attributes.chancecreationcrossingclass , team_attributes.date , team_attributes.id , team_attributes.chancecreationcrossing , team_attributes.team_fifa_api_id , team_attributes.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.*",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.date",
      "team_attributes.id",
      "team_attributes.chancecreationcrossing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. | patient : patient.id , patient.birthday , patient.sex , patient.first date , patient.description , patient.* | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.alp , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.first date",
      "patient.description",
      "patient.*",
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.alp",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? | examination : examination.diagnosis ( thrombosis ) , examination.ana pattern , examination.acl igg , examination.thrombosis , examination.acl iga , examination.* | patient : patient.diagnosis ( ANA ) , patient.id , patient.sex , patient.admission , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.sm , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.acl igg",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*",
      "patient.diagnosis",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the difference in the percentage of members in New Jersey and Vermont. | zip_code : zip_code.state ( New Jersey , Vermont ) , zip_code.city ( Jersey , Vermont ) , zip_code.zip_code , zip_code.short_state , zip_code.county , zip_code.* | member : member.member_id , member.zip , member.link_to_major , member.email , member.phone , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.state",
      "zip_code.city",
      "zip_code.zip_code",
      "zip_code.short_state",
      "zip_code.county",
      "zip_code.*",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.email",
      "member.phone",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which molecules have triple bonds and list all the elements they contain. | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name. | player : player.player_name , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.attacking_work_rate , player_attributes.player_api_id , player_attributes.preferred_foot , player_attributes.potential , player_attributes.overall_rating , player_attributes.* | match : match.id , match.season , match.home_team_api_id , match.stage , match.date , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.attacking_work_rate",
      "player_attributes.player_api_id",
      "player_attributes.preferred_foot",
      "player_attributes.potential",
      "player_attributes.overall_rating",
      "player_attributes.*",
      "match.id",
      "match.season",
      "match.home_team_api_id",
      "match.stage",
      "match.date",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. | patient : patient.sex , patient.admission , patient.birthday , patient.id , patient.diagnosis , patient.* | laboratory : laboratory.rbc , laboratory.hgb , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis , examination.thrombosis , examination.symptoms , examination.id , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.id",
      "patient.diagnosis",
      "patient.*",
      "laboratory.rbc",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.id",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.ana pattern , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Based on posts posted by Community, calculate the percentage of posts that use the R language. | posts : posts.owneruserid , posts.id , posts.posttypeid , posts.communityowneddate , posts.title , posts.* | users : users.displayname ( Community ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.postid , posthistory.userid , posthistory.comment , posthistory.id , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.communityowneddate",
      "posts.title",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.comment",
      "posthistory.id",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? | patient : patient.id , patient.admission , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.cre , laboratory.sc170 , laboratory.cpk , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.cre",
      "laboratory.sc170",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.time , races.circuitid , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.position , results.points , results.* | driverstandings : driverstandings.wins , driverstandings.driverid , driverstandings.position , driverstandings.points , driverstandings.raceid , driverstandings.* | laptimes : laptimes.position , laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.time",
      "races.circuitid",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.position",
      "results.points",
      "results.*",
      "driverstandings.wins",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.points",
      "driverstandings.raceid",
      "driverstandings.*",
      "laptimes.position",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What are the player api id of 10 heaviest players? | player : player.weight , player.player_api_id , player.player_fifa_api_id , player.height , player.id , player.* | player_attributes : player_attributes.player_api_id , player_attributes.player_fifa_api_id , player_attributes.id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.weight",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.height",
      "player.id",
      "player.*",
      "player_attributes.player_api_id",
      "player_attributes.player_fifa_api_id",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What percentage of carcinogenic-type molecules does not contain fluorine? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the description about the ruling of card \"Condemn\"? | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | cards : cards.name ( Condemn ) , cards.uuid , cards.originaltext , cards.originalreleasedate , cards.artist , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "cards.name",
      "cards.uuid",
      "cards.originaltext",
      "cards.originalreleasedate",
      "cards.artist",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How many matches in the 2015/2016 season were held in Scotland Premier League\n? | league : league.name ( Scotland Premier League ) , league.country_id , league.id , league.* | match : match.season ( 2015/2016 ) , match.league_id , match.id , match.stage , match.date , match.* | country : country.name ( Scotland ) , country.id , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.id",
      "match.stage",
      "match.date",
      "match.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20. | team : team.team_long_name ( PEC Zwolle ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationpassingclass , team_attributes.chancecreationpassing , team_attributes.team_fifa_api_id , team_attributes.team_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationpassingclass",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.team_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the atoms' elements that form bond TR000_2_3. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR000_2_3 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR000_2_3 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the percentage difference of student badges given during 2010 and 2011? | badges : badges.date , badges.userid , badges.name ( Student ) , badges.id , badges.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posts : posts.id , posts.score , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.date",
      "badges.userid",
      "badges.name",
      "badges.id",
      "badges.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posts.id",
      "posts.score",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE? | patient : patient.sex , patient.diagnosis ( SLE ) , patient.id , patient.birthday , patient.admission , patient.* | laboratory : laboratory.alb , laboratory.pt , laboratory.hgb , laboratory.glu , laboratory.hct , laboratory.* | examination : examination.diagnosis ( SLE ) , examination.lac , examination.kct , examination.symptoms , examination.rvvt , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.diagnosis",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.*",
      "laboratory.alb",
      "laboratory.pt",
      "laboratory.hgb",
      "laboratory.glu",
      "laboratory.hct",
      "laboratory.*",
      "examination.diagnosis",
      "examination.lac",
      "examination.kct",
      "examination.symptoms",
      "examination.rvvt",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among all the posts posted by the most influential user, identify the percentage with a score above 50. | posts : posts.score , posts.owneruserid , posts.id , posts.posttypeid , posts.body , posts.* | users : users.reputation , users.id , users.location , users.views , users.age , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "users.reputation",
      "users.id",
      "users.location",
      "users.views",
      "users.age",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In which years did Lewis Hamilton participate in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.circuitid , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.constructorid , results.raceid , results.driverid , results.number , results.grid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.circuitid",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.constructorid",
      "results.raceid",
      "results.driverid",
      "results.number",
      "results.grid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which element is the least numerous in non-carcinogenic molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in a double type bond? | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?' | posts : posts.title ( Open source tools for visualizing multi-dimensional data? , Visualizing multi-dimensional data (LSI) in 2D ) , posts.lasteditordisplayname , posts.owneruserid , posts.ownerdisplayname , posts.lasteditoruserid , posts.* | badges : badges.name ( Editor ) , badges.userid , badges.date , badges.id , badges.* | posthistory : posthistory.text ( Open source tools for visualizing multi-dimensional data ? , Open source tools for visualizing multi-dimensional data? ) , posthistory.postid , posthistory.userid , posthistory.id , posthistory.comment ( Title , data ) , posthistory.* | users : users.displayname ( editor ) , users.id , users.reputation , users.location , users.views , users.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.title",
      "posts.lasteditordisplayname",
      "posts.owneruserid",
      "posts.ownerdisplayname",
      "posts.lasteditoruserid",
      "posts.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "posthistory.text",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.comment",
      "posthistory.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? | patient : patient.diagnosis ( SLE ) , patient.first date , patient.admission , patient.id , patient.sex , patient.* | examination : examination.diagnosis ( SLE ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the cost of posters for 'September Speaker' event. | expense : expense.cost , expense.expense_description ( Posters ) , expense.approved , expense.link_to_member , expense.link_to_budget , expense.* | event : event.event_name ( September Speaker ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Costa ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.link_to_member",
      "expense.link_to_budget",
      "expense.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? | patient : patient.birthday , patient.diagnosis ( SJS ) , patient.first date , patient.admission , patient.id , patient.* | laboratory : laboratory.date , laboratory.id , laboratory.pic , laboratory.hct , laboratory.got , laboratory.* | examination : examination.id , examination.diagnosis ( SjS ) , examination.symptoms , examination.examination date , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.*",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.got",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.examination date",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo? | cards : cards.manacost , cards.availability ( mtgo , paper ) , cards.bordercolor ( black ) , cards.frameversion , cards.layout ( normal ) , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.uuid , foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.manacost",
      "cards.availability",
      "cards.bordercolor",
      "cards.frameversion",
      "cards.layout",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Determine the bond type that is formed in the chemical compound containing element Carbon. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic. | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. | races : races.name ( Singapore Grand Prix ) , races.year , races.raceid , races.circuitid , races.date , races.* | constructors : constructors.constructorref , constructors.name , constructors.constructorid , constructors.url , constructors.nationality , constructors.* | driverstandings : driverstandings.raceid , driverstandings.driverid , driverstandings.wins , driverstandings.points , driverstandings.position , driverstandings.* | constructorstandings : constructorstandings.constructorid , constructorstandings.wins , constructorstandings.points , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.raceid",
      "races.circuitid",
      "races.date",
      "races.*",
      "constructors.constructorref",
      "constructors.name",
      "constructors.constructorid",
      "constructors.url",
      "constructors.nationality",
      "constructors.*",
      "driverstandings.raceid",
      "driverstandings.driverid",
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.*",
      "constructorstandings.constructorid",
      "constructorstandings.wins",
      "constructorstandings.points",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the name of the closed event whose cost has exceeded the budget the most. | expense : expense.cost , expense.approved , expense.link_to_budget , expense.link_to_member , expense.expense_id , expense.* | event : event.event_name , event.status ( Closed ) , event.event_id , event.notes , event.location , event.* | budget : budget.event_status ( Closed ) , budget.amount , budget.budget_id , budget.link_to_event , budget.category , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.approved",
      "expense.link_to_budget",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.*",
      "event.event_name",
      "event.status",
      "event.event_id",
      "event.notes",
      "event.location",
      "event.*",
      "budget.event_status",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.category",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME? | customers : customers.currency ( CZK ) , customers.customerid , customers.segment ( KAM , LAM ) , customers.* | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | gasstations : gasstations.country , gasstations.segment , gasstations.gasstationid , gasstations.chainid , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.segment",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22? | team : team.team_long_name ( Hull City ) , team.team_api_id , team.team_fifa_api_id , team.team_short_name , team.id , team.* | team_attributes : team_attributes.date , team_attributes.chancecreationcrossingclass , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.id , team_attributes.* | match : match.date , match.season , match.home_team_api_id , match.id , match.stage , match.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.id , player_attributes.potential , player_attributes.finishing , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.team_short_name",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.home_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.id",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? | patient : patient.sex , patient.id , patient.diagnosis , patient.birthday , patient.description , patient.* | laboratory : laboratory.fg , laboratory.wbc , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.fg",
      "laboratory.wbc",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21? | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | player : player.player_name ( Marko Arnautovic ) , player.player_api_id , player.player_fifa_api_id , player.birthday , player.id , player.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.birthday",
      "player.id",
      "player.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Please list the superhero names of all the superheroes that have blue eyes and blond hair. | superhero : superhero.superhero_name , superhero.eye_colour_id , superhero.full_name , superhero.hair_colour_id , superhero.gender_id , superhero.* | colour : colour.colour ( Blond , Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? | patient : patient.sex , patient.id , patient.diagnosis , patient.birthday , patient.description , patient.* | laboratory : laboratory.fg , laboratory.wbc , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.fg",
      "laboratory.wbc",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please list the lap records for the circuits in Italy. | circuits : circuits.country ( Italy ) , circuits.circuitid , circuits.name , circuits.circuitref , circuits.location , circuits.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.laps , results.fastestlap , results.fastestlaptime , results.fastestlapspeed , results.time , results.* | races : races.circuitid , races.year , races.raceid , races.name , races.date , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "circuits.country",
      "circuits.circuitid",
      "circuits.name",
      "circuits.circuitref",
      "circuits.location",
      "circuits.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.laps",
      "results.fastestlap",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.time",
      "results.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.name",
      "races.date",
      "races.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card. | sets : sets.releasedate , sets.code , sets.id , sets.name , sets.block , sets.* | cards : cards.name , cards.uuid , cards.rarity ( common ) , cards.artist , cards.availability , cards.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "sets.releasedate",
      "sets.code",
      "sets.id",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.uuid",
      "cards.rarity",
      "cards.artist",
      "cards.availability",
      "cards.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? | schools : schools.soctype ( Youth Authority Facilities ) , schools.closeddate , schools.county , schools.soc , schools.cdscode , schools.* | frpm : frpm.county name , frpm.school type ( Youth Authority Facilities ) , frpm.county code , frpm.school code , frpm.cdscode , frpm.* | satscores : satscores.numge1500 , satscores.cds , satscores.cname , satscores.rtype , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.soctype",
      "schools.closeddate",
      "schools.county",
      "schools.soc",
      "schools.cdscode",
      "schools.*",
      "frpm.county name",
      "frpm.school type",
      "frpm.county code",
      "frpm.school code",
      "frpm.cdscode",
      "frpm.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.cname",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? | set_translations : set_translations.translation , set_translations.language , set_translations.id , set_translations.setcode , set_translations.* | sets : sets.isonlineonly , sets.id , sets.code , sets.name , sets.block , sets.* | cards : cards.isonlineonly , cards.name , cards.artist , cards.availability , cards.uuid , cards.* | foreign_data : foreign_data.language , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.translation",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.*",
      "sets.isonlineonly",
      "sets.id",
      "sets.code",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.isonlineonly",
      "cards.name",
      "cards.artist",
      "cards.availability",
      "cards.uuid",
      "cards.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Determine the bond type that is formed in the chemical compound containing element Carbon. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "When was the first time did Kevin Constant have his highest crossing score? Give the date. | player : player.player_name ( Kevin Constant ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.player_api_id , player_attributes.overall_rating , player_attributes.potential , player_attributes.* | team_attributes : team_attributes.chancecreationcrossingclass , team_attributes.date , team_attributes.id , team_attributes.chancecreationcrossing , team_attributes.team_fifa_api_id , team_attributes.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.*",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.date",
      "team_attributes.id",
      "team_attributes.chancecreationcrossing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. | patient : patient.id , patient.birthday , patient.sex , patient.first date , patient.description , patient.* | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.alp , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.first date",
      "patient.description",
      "patient.*",
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.alp",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools. | schools : schools.streetabr , schools.street , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( 5-7 , K-12 ) , schools.* | frpm : frpm.enrollment (k-12) , frpm.school name , frpm.enrollment (ages 5-17) , frpm.free meal count (ages 5-17) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.sname , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.streetabr",
      "schools.street",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.*",
      "frpm.enrollment (k-12)",
      "frpm.school name",
      "frpm.enrollment (ages 5-17)",
      "frpm.free meal count (ages 5-17)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What was the difference in the number of crimes committed in East and North Bohemia in 1996? | district : district.a16 , district.a3 ( north Bohemia ) , district.a15 , district.district_id , district.a2 , district.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | client : client.gender , client.client_id , client.district_id , client.birth_date , client.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a16",
      "district.a3",
      "district.a15",
      "district.district_id",
      "district.a2",
      "district.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "client.gender",
      "client.client_id",
      "client.district_id",
      "client.birth_date",
      "client.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List all the elements of the toxicology of the molecule \"TR004\". | molecule : molecule.molecule_id ( TR004 ) , molecule.label , molecule.* | atom : atom.element , atom.molecule_id ( TR004 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR004 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range. | patient : patient.id , patient.birthday , patient.sex , patient.first date , patient.description , patient.* | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.alp , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.first date",
      "patient.description",
      "patient.*",
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.alp",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? | cards : cards.convertedmanacost , cards.power , cards.name , cards.manacost , cards.isonlineonly , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.power",
      "cards.name",
      "cards.manacost",
      "cards.isonlineonly",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the average number of bonds the atoms with the element iodine have? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? | patient : patient.first date , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.u-pro , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.u-pro",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? | match : match.date , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | league : league.name , league.country_id , league.id , league.* | country : country.name , country.id , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.agility , player_attributes.balance , player_attributes.jumping , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.date",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.jumping",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last names of students under the Elementary Education major and include their phone numbers. | member : member.last_name , member.phone , member.link_to_major , member.member_id , member.zip , member.* | major : major.major_name ( Elementary Education ) , major.major_id , major.department , major.college , major.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.phone",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.*",
      "major.major_name",
      "major.major_id",
      "major.department",
      "major.college",
      "major.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online? | set_translations : set_translations.translation , set_translations.language , set_translations.id , set_translations.setcode , set_translations.* | sets : sets.isonlineonly , sets.id , sets.code , sets.name , sets.block , sets.* | cards : cards.isonlineonly , cards.name , cards.artist , cards.availability , cards.uuid , cards.* | foreign_data : foreign_data.language , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.translation",
      "set_translations.language",
      "set_translations.id",
      "set_translations.setcode",
      "set_translations.*",
      "sets.isonlineonly",
      "sets.id",
      "sets.code",
      "sets.name",
      "sets.block",
      "sets.*",
      "cards.isonlineonly",
      "cards.name",
      "cards.artist",
      "cards.availability",
      "cards.uuid",
      "cards.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. | molecule : molecule.label , molecule.molecule_id ( TR006 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR006 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR006 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "How many drivers managed to finish the race in the 2008 Australian Grand Prix? | races : races.year , races.name ( Australian Grand Prix ) , races.raceid , races.circuitid , races.time , races.* | results : results.driverid , results.raceid , results.laps , results.resultid , results.constructorid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.* | status : status.status ( Finished ) , status.statusid , status.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.raceid",
      "races.circuitid",
      "races.time",
      "races.*",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.resultid",
      "results.constructorid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "status.status",
      "status.statusid",
      "status.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination? | examination : examination.ana pattern , examination.id , examination.diagnosis ( Normal ) , examination.symptoms , examination.thrombosis , examination.* | patient : patient.id , patient.admission , patient.sex , patient.birthday , patient.description , patient.* | laboratory : laboratory.t-bil , laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.ana pattern",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Indicate the name of the closed event whose cost has exceeded the budget the most. | expense : expense.cost , expense.approved , expense.link_to_budget , expense.link_to_member , expense.expense_id , expense.* | event : event.event_name , event.status ( Closed ) , event.event_id , event.notes , event.location , event.* | budget : budget.event_status ( Closed ) , budget.amount , budget.budget_id , budget.link_to_event , budget.category , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.cost",
      "expense.approved",
      "expense.link_to_budget",
      "expense.link_to_member",
      "expense.expense_id",
      "expense.*",
      "event.event_name",
      "event.status",
      "event.event_id",
      "event.notes",
      "event.location",
      "event.*",
      "budget.event_status",
      "budget.amount",
      "budget.budget_id",
      "budget.link_to_event",
      "budget.category",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the score and the link type ID for post ID 395? | posts : posts.score , posts.id , posts.posttypeid , posts.body , posts.title , posts.* | postlinks : postlinks.linktypeid , postlinks.postid , postlinks.relatedpostid , postlinks.id , postlinks.creationdate , postlinks.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment ( link , type ) , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.title",
      "posts.*",
      "postlinks.linktypeid",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.id",
      "postlinks.creationdate",
      "postlinks.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. | league : league.name , league.id , league.country_id , league.* | match : match.season ( 2009/2010 ) , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? | client : client.gender , client.district_id , client.client_id , client.birth_date , client.* | district : district.a3 ( south Bohemia ) , district.a4 , district.district_id , district.a5 , district.a2 , district.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.client_id , disp.type , disp.disp_id , disp.account_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "client.gender",
      "client.district_id",
      "client.client_id",
      "client.birth_date",
      "client.*",
      "district.a3",
      "district.a4",
      "district.district_id",
      "district.a5",
      "district.a2",
      "district.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.client_id",
      "disp.type",
      "disp.disp_id",
      "disp.account_id",
      "disp.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the football player Francois Affolter header's finishing rate on 18/09/2014? | player : player.player_name ( Francois Affolter ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.finishing , player_attributes.date , player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.finishing",
      "player_attributes.date",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How many matches in the 2015/2016 season were held in Scotland Premier League\n? | league : league.name ( Scotland Premier League ) , league.country_id , league.id , league.* | match : match.season ( 2015/2016 ) , match.league_id , match.id , match.stage , match.date , match.* | country : country.name ( Scotland ) , country.id , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.id",
      "match.stage",
      "match.date",
      "match.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many students of the Student_Club have attended the event \"Women's Soccer\"? | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | member : member.link_to_major , member.member_id , member.zip , member.position , member.first_name , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "member.link_to_major",
      "member.member_id",
      "member.zip",
      "member.position",
      "member.first_name",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.ana pattern , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the football player Francois Affolter header's finishing rate on 18/09/2014? | player : player.player_name ( Francois Affolter ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.finishing , player_attributes.date , player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.finishing",
      "player_attributes.date",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981? | patient : patient.birthday , patient.first date , patient.id , patient.sex , patient.description , patient.* | laboratory : laboratory.t-cho , laboratory.date , laboratory.id , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.examination date , examination.id , examination.symptoms , examination.diagnosis , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.birthday",
      "patient.first date",
      "patient.id",
      "patient.sex",
      "patient.description",
      "patient.*",
      "laboratory.t-cho",
      "laboratory.date",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.examination date",
      "examination.id",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time? | patient : patient.diagnosis ( SLE ) , patient.first date , patient.admission , patient.id , patient.sex , patient.* | examination : examination.diagnosis ( SLE ) , examination.symptoms , examination.id , examination.thrombosis , examination.examination date , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.hct , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.diagnosis",
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.id",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.hct",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.molecule_id , atom.element , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.element",
      "atom.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.superhero_name , superhero.gender_id , superhero.full_name , superhero.publisher_id , superhero.* | superpower : superpower.id , superpower.power_name , superpower.* | hero_attribute : hero_attribute.attribute_value , hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.gender_id",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.*",
      "superpower.id",
      "superpower.power_name",
      "superpower.*",
      "hero_attribute.attribute_value",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "In 2012, who had the least consumption in LAM? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.segment ( LAM ) , customers.customerid , customers.currency , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.segment",
      "customers.customerid",
      "customers.currency",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State. | satscores : satscores.numge1500 , satscores.cds , satscores.sname , satscores.enroll12 , satscores.numtsttakr , satscores.* | schools : schools.streetabr , schools.state , schools.city , schools.zip , schools.street , schools.* | frpm : frpm.low grade , frpm.school name , frpm.cdscode , frpm.high grade , frpm.school code , frpm.*",
    "output_sequence": " | ",
    "tc_original": [
      "satscores.numge1500",
      "satscores.cds",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numtsttakr",
      "satscores.*",
      "schools.streetabr",
      "schools.state",
      "schools.city",
      "schools.zip",
      "schools.street",
      "schools.*",
      "frpm.low grade",
      "frpm.school name",
      "frpm.cdscode",
      "frpm.high grade",
      "frpm.school code",
      "frpm.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down at least five full names of superheroes with blue eyes. | superhero : superhero.full_name , superhero.eye_colour_id , superhero.superhero_name , superhero.id , superhero.gender_id , superhero.* | colour : colour.colour ( Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.full_name",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please list the lap records for the circuits in Italy. | circuits : circuits.country ( Italy ) , circuits.circuitid , circuits.name , circuits.circuitref , circuits.location , circuits.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.laps , results.fastestlap , results.fastestlaptime , results.fastestlapspeed , results.time , results.* | races : races.circuitid , races.year , races.raceid , races.name , races.date , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "circuits.country",
      "circuits.circuitid",
      "circuits.name",
      "circuits.circuitref",
      "circuits.location",
      "circuits.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.laps",
      "results.fastestlap",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.time",
      "results.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.name",
      "races.date",
      "races.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010. | races : races.year , races.circuitid , races.time , races.date , races.raceid , races.* | drivers : drivers.surname ( Hamilton ) , drivers.driverref ( hamilton ) , drivers.driverid , drivers.forename , drivers.code , drivers.* | circuits : circuits.name , circuits.circuitid , circuits.circuitref , circuits.alt , circuits.location , circuits.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.milliseconds , laptimes.raceid , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.circuitid",
      "races.time",
      "races.date",
      "races.raceid",
      "races.*",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.forename",
      "drivers.code",
      "drivers.*",
      "circuits.name",
      "circuits.circuitid",
      "circuits.circuitref",
      "circuits.alt",
      "circuits.location",
      "circuits.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.raceid",
      "laptimes.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the product description of the products consumed in September, 2013. | products : products.description , products.productid , products.* | yearmonth : yearmonth.date , yearmonth.consumption , yearmonth.customerid , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "products.description",
      "products.productid",
      "products.*",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What elements are in a double type bond? | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Determine the bond type that is formed in the chemical compound containing element Carbon. | bond : bond.bond_type , bond.bond_id , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? | races : races.raceid , races.name , races.year , races.round , races.date , races.* | results : results.fastestlapspeed , results.raceid , results.driverid , results.fastestlap , results.statusid , results.* | drivers : drivers.surname ( Speed , di Resta ) , drivers.forename ( Paul ) , drivers.driverref ( resta , speed ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.raceid",
      "races.name",
      "races.year",
      "races.round",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.raceid",
      "results.driverid",
      "results.fastestlap",
      "results.statusid",
      "results.*",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes? | comments : comments.score , comments.userid , comments.postid , comments.id , comments.text , comments.* | users : users.upvotes , users.downvotes , users.id , users.views , users.reputation , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userid",
      "comments.postid",
      "comments.id",
      "comments.text",
      "comments.*",
      "users.upvotes",
      "users.downvotes",
      "users.id",
      "users.views",
      "users.reputation",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11. | transactions_1k : transactions_1k.time , transactions_1k.date , transactions_1k.amount , transactions_1k.price , transactions_1k.transactionid , transactions_1k.* | gasstations : gasstations.chainid , gasstations.segment , gasstations.country , gasstations.gasstationid , gasstations.* | yearmonth : yearmonth.customerid , yearmonth.date , yearmonth.consumption , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.*",
    "output_sequence": " | ",
    "tc_original": [
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.transactionid",
      "transactions_1k.*",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.*",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "How many users are awarded with more than 5 badges? | badges : badges.userid , badges.id , badges.name , badges.date , badges.* | votes : votes.userid , votes.id , votes.postid , votes.creationdate , votes.bountyamount , votes.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "badges.userid",
      "badges.id",
      "badges.name",
      "badges.date",
      "badges.*",
      "votes.userid",
      "votes.id",
      "votes.postid",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is reference name of Robert Kubica? | drivers : drivers.surname ( Kubica ) , drivers.driverref ( kubica ) , drivers.forename , drivers.driverid , drivers.dob , drivers.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.milliseconds , laptimes.* | races : races.year , races.raceid , races.name , races.time , races.round , races.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.surname",
      "drivers.driverref",
      "drivers.forename",
      "drivers.driverid",
      "drivers.dob",
      "drivers.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.raceid",
      "races.name",
      "races.time",
      "races.round",
      "races.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Which countries have zip codes with post office boxes? | zip_code : zip_code.county , zip_code.zip_code , zip_code.city ( Post ) , zip_code.state , zip_code.type , zip_code.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.link_to_event , budget.* | member : member.zip , member.member_id , member.email , member.position , member.phone , member.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.county",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.link_to_event",
      "budget.*",
      "member.zip",
      "member.member_id",
      "member.email",
      "member.position",
      "member.phone",
      "member.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital. | patient : patient.sex , patient.admission , patient.birthday , patient.id , patient.diagnosis , patient.* | laboratory : laboratory.rbc , laboratory.hgb , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis , examination.thrombosis , examination.symptoms , examination.id , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.id",
      "patient.diagnosis",
      "patient.*",
      "laboratory.rbc",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.symptoms",
      "examination.id",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Please list the superhero names of all the superheroes that have blue eyes and blond hair. | superhero : superhero.superhero_name , superhero.eye_colour_id , superhero.full_name , superhero.hair_colour_id , superhero.gender_id , superhero.* | colour : colour.colour ( Blond , Blue ) , colour.id , colour.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix? | races : races.name ( Spanish Grand Prix ) , races.year , races.circuitid , races.raceid , races.date , races.* | results : results.fastestlapspeed , results.driverid , results.raceid , results.constructorid , results.statusid , results.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.* | drivers : drivers.driverid , drivers.surname ( Speed ) , drivers.driverref ( driver , speed ) , drivers.number , drivers.code , drivers.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.circuitid",
      "races.raceid",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.driverid",
      "results.raceid",
      "results.constructorid",
      "results.statusid",
      "results.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*",
      "drivers.driverid",
      "drivers.surname",
      "drivers.driverref",
      "drivers.number",
      "drivers.code",
      "drivers.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired? | driverstandings : driverstandings.wins , driverstandings.points , driverstandings.driverid , driverstandings.position , driverstandings.driverstandingsid , driverstandings.* | results : results.points , results.driverid , results.raceid , results.laps , results.constructorid , results.* | drivers : drivers.surname ( Driver ) , drivers.driverid , drivers.driverref ( driver ) , drivers.forename , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.driverid",
      "driverstandings.position",
      "driverstandings.driverstandingsid",
      "driverstandings.*",
      "results.points",
      "results.driverid",
      "results.raceid",
      "results.laps",
      "results.constructorid",
      "results.*",
      "drivers.surname",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.forename",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "What is the district Id of the account that placed the order with the id 33333? | district : district.a2 , district.district_id , district.a3 , district.a4 , district.a5 , district.* | order : order.order_id , order.account_id , order.amount , order.account_to , order.k_symbol , order.* | account : account.account_id , account.district_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.district_id",
      "district.a3",
      "district.a4",
      "district.a5",
      "district.*",
      "order.order_id",
      "order.account_id",
      "order.amount",
      "order.account_to",
      "order.k_symbol",
      "order.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last name of the members of the club that attended the women's soccer event. | member : member.last_name , member.member_id , member.position ( Member ) , member.zip , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Clubb ) , zip_code.type , zip_code.state , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.member_id",
      "member.position",
      "member.zip",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.state",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\". | member : member.phone , member.member_id , member.zip , member.link_to_major , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.phone",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published. | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | superhero : superhero.id , superhero.publisher_id , superhero.gender_id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.id",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What percentage of carcinogenic-type molecules does not contain fluorine? | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.atom_id , connected.bond_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.atom_id",
      "connected.bond_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\". | member : member.phone , member.member_id , member.zip , member.link_to_major , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.phone",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. | cards : cards.artist ( Jim Pavelec ) , cards.name , cards.id , cards.uuid , cards.asciiname , cards.* | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.name",
      "cards.id",
      "cards.uuid",
      "cards.asciiname",
      "cards.*",
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which toxic element can be found in the molecule TR151? | atom : atom.element , atom.molecule_id ( TR151 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR151 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR151 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the elements that comprise the atoms of bond TR001_2_4. | bond : bond.bond_id ( TR001_2_4 ) , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR001_2_4 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Among the members who incurred expenses in more than one event, who paid the most amount? | expense : expense.link_to_member , expense.cost , expense.expense_id , expense.approved , expense.expense_date , expense.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.first_name , member.email , member.link_to_major , member.* | budget : budget.link_to_event , budget.amount , budget.budget_id , budget.category , budget.spent , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "expense.link_to_member",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.expense_date",
      "expense.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.link_to_major",
      "member.*",
      "budget.link_to_event",
      "budget.amount",
      "budget.budget_id",
      "budget.category",
      "budget.spent",
      "budget.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label. | molecule : molecule.label , molecule.molecule_id ( TR006 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR006 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR006 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics. | publisher : publisher.publisher_name ( Dark Horse Comics ) , publisher.id , publisher.* | gender : gender.gender ( Female ) , gender.id , gender.* | superhero : superhero.skin_colour_id , superhero.eye_colour_id , superhero.hair_colour_id , superhero.gender_id , superhero.publisher_id , superhero.* | colour : colour.colour , colour.id , colour.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "superhero.skin_colour_id",
      "superhero.eye_colour_id",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.publisher_id",
      "superhero.*",
      "colour.colour",
      "colour.id",
      "colour.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "Please list the product description of the products consumed in September, 2013. | products : products.description , products.productid , products.* | yearmonth : yearmonth.date , yearmonth.consumption , yearmonth.customerid , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "products.description",
      "products.productid",
      "products.*",
      "yearmonth.date",
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? | patient : patient.id , patient.admission , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.cre , laboratory.sc170 , laboratory.cpk , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.cre",
      "laboratory.sc170",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. | races : races.name ( Singapore Grand Prix ) , races.year , races.raceid , races.circuitid , races.date , races.* | constructors : constructors.constructorref , constructors.name , constructors.constructorid , constructors.url , constructors.nationality , constructors.* | driverstandings : driverstandings.raceid , driverstandings.driverid , driverstandings.wins , driverstandings.points , driverstandings.position , driverstandings.* | constructorstandings : constructorstandings.constructorid , constructorstandings.wins , constructorstandings.points , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.raceid",
      "races.circuitid",
      "races.date",
      "races.*",
      "constructors.constructorref",
      "constructors.name",
      "constructors.constructorid",
      "constructors.url",
      "constructors.nationality",
      "constructors.*",
      "driverstandings.raceid",
      "driverstandings.driverid",
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.*",
      "constructorstandings.constructorid",
      "constructorstandings.wins",
      "constructorstandings.points",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the composition of element chlorine in percentage among the single bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? | team : team.team_long_name ( Hannover 96 ) , team.team_short_name , team.team_api_id , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.defenceaggressionclass , team_attributes.defenceaggression , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.defenceaggressionclass",
      "team_attributes.defenceaggression",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? | frpm : frpm.school type ( Intermediate/Middle Schools (Public) ) , frpm.district name ( San Bernardino City Unified ) , frpm.district type , frpm.cdscode , frpm.school name , frpm.* | schools : schools.county ( San Bernardino ) , schools.soctype ( Intermediate/Middle Schools (Public) ) , schools.phone , schools.district ( San Bernardino City Unified , San Bernardino County ROP ) , schools.closeddate , schools.* | satscores : satscores.cds , satscores.numge1500 , satscores.dname ( San Bernardino City Unified ) , satscores.cname ( San Bernardino ) , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.school type",
      "frpm.district name",
      "frpm.district type",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.*",
      "schools.county",
      "schools.soctype",
      "schools.phone",
      "schools.district",
      "schools.closeddate",
      "schools.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.cname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.? | event : event.event_name , event.location ( 900 E. Washington St. ) , event.type ( Social ) , event.event_id , event.status , event.* | member : member.position ( President , Vice President ) , member.member_id , member.zip , member.first_name , member.email , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | zip_code : zip_code.zip_code , zip_code.city ( Washington ) , zip_code.state ( Washington ) , zip_code.type , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.location",
      "event.type",
      "event.event_id",
      "event.status",
      "event.*",
      "member.position",
      "member.member_id",
      "member.zip",
      "member.first_name",
      "member.email",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.state",
      "zip_code.type",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal Ig A level came to the hospital after 1990/1/1? | patient : patient.first date , patient.admission , patient.id , patient.diagnosis , patient.birthday , patient.* | examination : examination.diagnosis ( Normal ) , examination.examination date , examination.id , examination.lac , examination.thrombosis , examination.* | laboratory : laboratory.date , laboratory.iga , laboratory.igg , laboratory.igm , laboratory.id , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.admission",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*",
      "examination.diagnosis",
      "examination.examination date",
      "examination.id",
      "examination.lac",
      "examination.thrombosis",
      "examination.*",
      "laboratory.date",
      "laboratory.iga",
      "laboratory.igg",
      "laboratory.igm",
      "laboratory.id",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the percentage of blue female superheroes among all female superheroes? | gender : gender.gender ( Female ) , gender.id , gender.* | colour : colour.colour ( Blue ) , colour.id , colour.* | superhero : superhero.gender_id , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.skin_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.skin_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the football player Francois Affolter header's finishing rate on 18/09/2014? | player : player.player_name ( Francois Affolter ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.finishing , player_attributes.date , player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.finishing",
      "player_attributes.date",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? | set_translations : set_translations.language ( Japanese ) , set_translations.translation , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.isnonfoilonly , sets.code , sets.id , sets.isfoilonly , sets.isonlineonly , sets.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.availability , cards.name , cards.artist , cards.uuid , cards.id , cards.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.isnonfoilonly",
      "sets.code",
      "sets.id",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.availability",
      "cards.name",
      "cards.artist",
      "cards.uuid",
      "cards.id",
      "cards.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013? | yearmonth : yearmonth.consumption , yearmonth.customerid , yearmonth.date , yearmonth.* | customers : customers.customerid , customers.currency , customers.segment , customers.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.* | products : products.description , products.productid , products.*",
    "output_sequence": " | ",
    "tc_original": [
      "yearmonth.consumption",
      "yearmonth.customerid",
      "yearmonth.date",
      "yearmonth.*",
      "customers.customerid",
      "customers.currency",
      "customers.segment",
      "customers.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*",
      "products.description",
      "products.productid",
      "products.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the total atoms consisting of the element carbon and hydrogen. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Among all superheroes created by George Lucas, identify the percentage of female superheroes. | gender : gender.gender ( Female ) , gender.id , gender.* | publisher : publisher.publisher_name ( George Lucas ) , publisher.id , publisher.* | superhero : superhero.gender_id , superhero.superhero_name , superhero.full_name , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID. | patient : patient.id , patient.diagnosis , patient.sex , patient.admission , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.kct , examination.acl igg , examination.rvvt , examination.* | laboratory : laboratory.hgb , laboratory.id , laboratory.t-bil , laboratory.hct , laboratory.tp , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.kct",
      "examination.acl igg",
      "examination.rvvt",
      "examination.*",
      "laboratory.hgb",
      "laboratory.id",
      "laboratory.t-bil",
      "laboratory.hct",
      "laboratory.tp",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many cards available in paper have a positive starting maximum hand size? | cards : cards.availability ( paper ) , cards.hand , cards.uuid , cards.artist , cards.colors , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.availability",
      "cards.hand",
      "cards.uuid",
      "cards.artist",
      "cards.colors",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. | atom : atom.element , atom.molecule_id ( TR000 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR000 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR000 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Give the full name and contact number of members who had to spend more than average on each expense. | member : member.first_name , member.last_name , member.phone , member.email , member.member_id , member.* | expense : expense.cost , expense.expense_id , expense.approved , expense.link_to_member , expense.expense_description , expense.* | zip_code : zip_code.zip_code , zip_code.city ( Given ) , zip_code.type , zip_code.county , zip_code.state , zip_code.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.first_name",
      "member.last_name",
      "member.phone",
      "member.email",
      "member.member_id",
      "member.*",
      "expense.cost",
      "expense.expense_id",
      "expense.approved",
      "expense.link_to_member",
      "expense.expense_description",
      "expense.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "What is the owner user id of the most valuable post? | posts : posts.owneruserid , posts.score , posts.id , posts.title , posts.posttypeid , posts.* | posthistory : posthistory.postid , posthistory.userid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | votes : votes.postid , votes.userid , votes.id , votes.creationdate , votes.bountyamount , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.score",
      "posts.id",
      "posts.title",
      "posts.posttypeid",
      "posts.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "votes.postid",
      "votes.userid",
      "votes.id",
      "votes.creationdate",
      "votes.bountyamount",
      "votes.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What is the football player Francois Affolter header's finishing rate on 18/09/2014? | player : player.player_name ( Francois Affolter ) , player.player_api_id , player.player_fifa_api_id , player.id , player.birthday , player.* | player_attributes : player_attributes.finishing , player_attributes.date , player_attributes.heading_accuracy , player_attributes.overall_rating , player_attributes.player_api_id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.name , league.country_id , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.birthday",
      "player.*",
      "player_attributes.finishing",
      "player_attributes.date",
      "player_attributes.heading_accuracy",
      "player_attributes.overall_rating",
      "player_attributes.player_api_id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.name",
      "league.country_id",
      "league.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Which district has highest active loan? | district : district.a2 , district.a3 , district.district_id , district.a4 , district.a6 , district.* | loan : loan.status , loan.loan_id , loan.account_id , loan.amount , loan.date , loan.* | account : account.district_id , account.account_id , account.frequency , account.date , account.* | disp : disp.account_id , disp.type , disp.disp_id , disp.client_id , disp.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a2",
      "district.a3",
      "district.district_id",
      "district.a4",
      "district.a6",
      "district.*",
      "loan.status",
      "loan.loan_id",
      "loan.account_id",
      "loan.amount",
      "loan.date",
      "loan.*",
      "account.district_id",
      "account.account_id",
      "account.frequency",
      "account.date",
      "account.*",
      "disp.account_id",
      "disp.type",
      "disp.disp_id",
      "disp.client_id",
      "disp.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began? | patient : patient.first date , patient.id , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.u-pro , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.first date",
      "patient.id",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.u-pro",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity? | users : users.displayname ( Harvey Motulsky , Noah Snyder ) , users.views , users.upvotes , users.id , users.reputation , users.* | posts : posts.owneruserid , posts.title , posts.id , posts.score , posts.favoritecount , posts.* | posthistory : posthistory.userid , posthistory.postid , posthistory.id , posthistory.text , posthistory.comment , posthistory.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.displayname",
      "users.views",
      "users.upvotes",
      "users.id",
      "users.reputation",
      "users.*",
      "posts.owneruserid",
      "posts.title",
      "posts.id",
      "posts.score",
      "posts.favoritecount",
      "posts.*",
      "posthistory.userid",
      "posthistory.postid",
      "posthistory.id",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools? | frpm : frpm.school type ( Intermediate/Middle Schools (Public) ) , frpm.district name ( San Bernardino City Unified ) , frpm.district type , frpm.cdscode , frpm.school name , frpm.* | schools : schools.county ( San Bernardino ) , schools.soctype ( Intermediate/Middle Schools (Public) ) , schools.phone , schools.district ( San Bernardino City Unified , San Bernardino County ROP ) , schools.closeddate , schools.* | satscores : satscores.cds , satscores.numge1500 , satscores.dname ( San Bernardino City Unified ) , satscores.cname ( San Bernardino ) , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.school type",
      "frpm.district name",
      "frpm.district type",
      "frpm.cdscode",
      "frpm.school name",
      "frpm.*",
      "schools.county",
      "schools.soctype",
      "schools.phone",
      "schools.district",
      "schools.closeddate",
      "schools.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.dname",
      "satscores.cname",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. | patient : patient.sex , patient.id , patient.birthday , patient.description , patient.diagnosis , patient.* | laboratory : laboratory.glu , laboratory.t-cho , laboratory.tg , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.description",
      "patient.diagnosis",
      "patient.*",
      "laboratory.glu",
      "laboratory.t-cho",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? | patient : patient.sex , patient.id , patient.diagnosis , patient.birthday , patient.description , patient.* | laboratory : laboratory.fg , laboratory.wbc , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.fg",
      "laboratory.wbc",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among all the posts posted by the most influential user, identify the percentage with a score above 50. | posts : posts.score , posts.owneruserid , posts.id , posts.posttypeid , posts.body , posts.* | users : users.reputation , users.id , users.location , users.views , users.age , users.* | posthistory : posthistory.userid , posthistory.id , posthistory.postid , posthistory.text , posthistory.comment , posthistory.* | comments : comments.postid , comments.score , comments.userid , comments.id , comments.text , comments.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.score",
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.body",
      "posts.*",
      "users.reputation",
      "users.id",
      "users.location",
      "users.views",
      "users.age",
      "users.*",
      "posthistory.userid",
      "posthistory.id",
      "posthistory.postid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.*",
      "comments.postid",
      "comments.score",
      "comments.userid",
      "comments.id",
      "comments.text",
      "comments.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List down Ajax's superpowers. | superpower : superpower.power_name , superpower.id , superpower.* | superhero : superhero.superhero_name ( Ajax ) , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | hero_power : hero_power.power_id , hero_power.hero_id , hero_power.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "hero_power.power_id",
      "hero_power.hero_id",
      "hero_power.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which home team had lost the fewest matches in the 2016 season? | match : match.season , match.home_team_api_id , match.away_team_api_id , match.id , match.stage , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.vision , player_attributes.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.season",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.id",
      "match.stage",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.vision",
      "player_attributes.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the last name of the members of the club that attended the women's soccer event. | member : member.last_name , member.member_id , member.position ( Member ) , member.zip , member.first_name , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | event : event.event_name ( Women's Soccer ) , event.event_id , event.type , event.notes , event.location , event.* | zip_code : zip_code.zip_code , zip_code.city ( Clubb ) , zip_code.type , zip_code.state , zip_code.county , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.member_id",
      "member.position",
      "member.zip",
      "member.first_name",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "event.event_name",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.location",
      "event.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.state",
      "zip_code.county",
      "zip_code.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many cards available in paper have a positive starting maximum hand size? | cards : cards.availability ( paper ) , cards.hand , cards.uuid , cards.artist , cards.colors , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.availability",
      "cards.hand",
      "cards.uuid",
      "cards.artist",
      "cards.colors",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player. | player : player.player_name , player.birthday , player.id , player.player_api_id , player.player_fifa_api_id , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.id , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.birthday",
      "player.id",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.id",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. | member : member.last_name , member.first_name , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_description , expense.approved , expense.expense_id , expense.link_to_budget , expense.* | budget : budget.spent , budget.budget_id , budget.amount , budget.category , budget.remaining , budget.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.expense_id",
      "expense.link_to_budget",
      "expense.*",
      "budget.spent",
      "budget.budget_id",
      "budget.amount",
      "budget.category",
      "budget.remaining",
      "budget.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average? | examination : examination.diagnosis ( thrombosis ) , examination.ana pattern , examination.acl igg , examination.thrombosis , examination.acl iga , examination.* | patient : patient.diagnosis ( ANA ) , patient.id , patient.sex , patient.admission , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.sm , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.ana pattern",
      "examination.acl igg",
      "examination.thrombosis",
      "examination.acl iga",
      "examination.*",
      "patient.diagnosis",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level? | patient : patient.sex , patient.id , patient.diagnosis , patient.birthday , patient.description , patient.* | laboratory : laboratory.fg , laboratory.wbc , laboratory.id , laboratory.date , laboratory.pic , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.diagnosis",
      "patient.birthday",
      "patient.description",
      "patient.*",
      "laboratory.fg",
      "laboratory.wbc",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. | event : event.event_name , event.status ( Closed ) , event.type ( Game ) , event.event_date , event.event_id , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.county , zip_code.type , zip_code.state , zip_code.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.status",
      "event.type",
      "event.event_date",
      "event.event_id",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.county",
      "zip_code.type",
      "zip_code.state",
      "zip_code.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? | schools : schools.county ( Los Angeles ) , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.* | frpm : frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.cname ( Los Angeles ) , satscores.cds , satscores.numge1500 , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.cname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What percentage of cards with format commander and legal status do not have a content warning? | legalities : legalities.status ( Legal ) , legalities.format ( commander ) , legalities.id , legalities.uuid , legalities.* | cards : cards.hascontentwarning , cards.uuid , cards.name ( Warning ) , cards.isonlineonly , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.status",
      "legalities.format",
      "legalities.id",
      "legalities.uuid",
      "legalities.*",
      "cards.hascontentwarning",
      "cards.uuid",
      "cards.name",
      "cards.isonlineonly",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers. | users : users.age , users.id , users.reputation , users.location , users.views , users.* | badges : badges.name ( Organizer ) , badges.userid , badges.date , badges.id , badges.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.id , posthistory.userid , posthistory.text , posthistory.comment , posthistory.postid , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.age",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast? | legalities : legalities.format ( legacy ) , legalities.status , legalities.uuid , legalities.id , legalities.* | cards : cards.frameversion , cards.artist ( D. Alexander Gregory ) , cards.name , cards.hascontentwarning , cards.facename ( Status ) , cards.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.id",
      "legalities.*",
      "cards.frameversion",
      "cards.artist",
      "cards.name",
      "cards.hascontentwarning",
      "cards.facename",
      "cards.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Calculate the average height for each superhero. | superhero : superhero.height_cm , superhero.superhero_name , superhero.id , superhero.full_name , superhero.gender_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.* | hero_attribute : hero_attribute.hero_id , hero_attribute.attribute_id , hero_attribute.attribute_value , hero_attribute.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.height_cm",
      "superhero.superhero_name",
      "superhero.id",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_id",
      "hero_attribute.attribute_value",
      "hero_attribute.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the atoms of TR144_8_19? | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id ( TR144_8_19 ) , connected.atom_id , connected.atom_id2 , connected.* | bond : bond.bond_id ( TR144_8_19 ) , bond.molecule_id , bond.bond_type , bond.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who have a normal platelet level, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed? | races : races.raceid , races.name , races.year , races.round , races.date , races.* | results : results.fastestlapspeed , results.raceid , results.driverid , results.fastestlap , results.statusid , results.* | drivers : drivers.surname ( Speed , di Resta ) , drivers.forename ( Paul ) , drivers.driverref ( resta , speed ) , drivers.driverid , drivers.number , drivers.* | laptimes : laptimes.driverid , laptimes.raceid , laptimes.lap , laptimes.position , laptimes.time , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.raceid",
      "races.name",
      "races.year",
      "races.round",
      "races.date",
      "races.*",
      "results.fastestlapspeed",
      "results.raceid",
      "results.driverid",
      "results.fastestlap",
      "results.statusid",
      "results.*",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.number",
      "drivers.*",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "What is the publisher's name of Blue Beetle II? | publisher : publisher.publisher_name , publisher.id , publisher.* | superhero : superhero.superhero_name ( Beetle , Blue Beetle ) , superhero.full_name , superhero.publisher_id , superhero.gender_id , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.publisher_id",
      "superhero.gender_id",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Based on posts posted by Community, calculate the percentage of posts that use the R language. | posts : posts.owneruserid , posts.id , posts.posttypeid , posts.communityowneddate , posts.title , posts.* | users : users.displayname ( Community ) , users.id , users.reputation , users.location , users.views , users.* | posthistory : posthistory.postid , posthistory.userid , posthistory.comment , posthistory.id , posthistory.text , posthistory.* | postlinks : postlinks.postid , postlinks.id , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.*",
    "output_sequence": " | ",
    "tc_original": [
      "posts.owneruserid",
      "posts.id",
      "posts.posttypeid",
      "posts.communityowneddate",
      "posts.title",
      "posts.*",
      "users.displayname",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "posthistory.postid",
      "posthistory.userid",
      "posthistory.comment",
      "posthistory.id",
      "posthistory.text",
      "posthistory.*",
      "postlinks.postid",
      "postlinks.id",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"? | set_translations : set_translations.language , set_translations.translation ( Mirrodin ) , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.name ( Mirrodin ) , sets.isonlineonly , sets.code , sets.mcmname ( Mirrodin ) , sets.block ( Mirrodin ) , sets.* | cards : cards.name , cards.isonlineonly , cards.subtypes ( Mirrodin ) , cards.uuid , cards.artist , cards.* | legalities : legalities.id , legalities.format , legalities.status , legalities.uuid , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.name",
      "sets.isonlineonly",
      "sets.code",
      "sets.mcmname",
      "sets.block",
      "sets.*",
      "cards.name",
      "cards.isonlineonly",
      "cards.subtypes",
      "cards.uuid",
      "cards.artist",
      "cards.*",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "legalities.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50? | drivers : drivers.dob , drivers.number , drivers.driverid , drivers.surname , drivers.code , drivers.* | laptimes : laptimes.lap , laptimes.driverid , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.* | races : races.year , races.date , races.raceid , races.time , races.round , races.* | results : results.laps , results.fastestlap , results.time , results.driverid , results.points , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.number",
      "drivers.driverid",
      "drivers.surname",
      "drivers.code",
      "drivers.*",
      "laptimes.lap",
      "laptimes.driverid",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "races.year",
      "races.date",
      "races.raceid",
      "races.time",
      "races.round",
      "races.*",
      "results.laps",
      "results.fastestlap",
      "results.time",
      "results.driverid",
      "results.points",
      "results.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Please list the ID of the patient whose RF is normal and who is older than 60. | patient : patient.id , patient.birthday , patient.sex , patient.diagnosis , patient.description , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.lac , examination.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.got , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.birthday",
      "patient.sex",
      "patient.diagnosis",
      "patient.description",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.lac",
      "examination.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.got",
      "laboratory.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website. | races : races.name ( Singapore Grand Prix ) , races.year , races.raceid , races.circuitid , races.date , races.* | constructors : constructors.constructorref , constructors.name , constructors.constructorid , constructors.url , constructors.nationality , constructors.* | driverstandings : driverstandings.raceid , driverstandings.driverid , driverstandings.wins , driverstandings.points , driverstandings.position , driverstandings.* | constructorstandings : constructorstandings.constructorid , constructorstandings.wins , constructorstandings.points , constructorstandings.raceid , constructorstandings.position , constructorstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.name",
      "races.year",
      "races.raceid",
      "races.circuitid",
      "races.date",
      "races.*",
      "constructors.constructorref",
      "constructors.name",
      "constructors.constructorid",
      "constructors.url",
      "constructors.nationality",
      "constructors.*",
      "driverstandings.raceid",
      "driverstandings.driverid",
      "driverstandings.wins",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.*",
      "constructorstandings.constructorid",
      "constructorstandings.wins",
      "constructorstandings.points",
      "constructorstandings.raceid",
      "constructorstandings.position",
      "constructorstandings.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009. | races : races.year , races.raceid , races.time , races.date , races.name , races.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.time , laptimes.raceid , laptimes.position , laptimes.* | drivers : drivers.nationality ( Japanese ) , drivers.driverid , drivers.driverref ( driver ) , drivers.code , drivers.surname , drivers.* | results : results.driverid , results.laps , results.raceid , results.points , results.constructorid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.time",
      "races.date",
      "races.name",
      "races.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.position",
      "laptimes.*",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.driverref",
      "drivers.code",
      "drivers.surname",
      "drivers.*",
      "results.driverid",
      "results.laps",
      "results.raceid",
      "results.points",
      "results.constructorid",
      "results.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "How many members did attend the event 'Community Theater' in 2019? | event : event.event_name ( Community Theater ) , event.event_date , event.event_id , event.type , event.notes , event.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | member : member.member_id , member.zip , member.email , member.phone , member.link_to_major , member.* | zip_code : zip_code.zip_code , zip_code.city ( Many ) , zip_code.type , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.event_date",
      "event.event_id",
      "event.type",
      "event.notes",
      "event.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.phone",
      "member.link_to_major",
      "member.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.type",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)? | schools : schools.soctype ( Youth Authority Facilities ) , schools.closeddate , schools.county , schools.soc , schools.cdscode , schools.* | frpm : frpm.county name , frpm.school type ( Youth Authority Facilities ) , frpm.county code , frpm.school code , frpm.cdscode , frpm.* | satscores : satscores.numge1500 , satscores.cds , satscores.cname , satscores.rtype , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.soctype",
      "schools.closeddate",
      "schools.county",
      "schools.soc",
      "schools.cdscode",
      "schools.*",
      "frpm.county name",
      "frpm.school type",
      "frpm.county code",
      "frpm.school code",
      "frpm.cdscode",
      "frpm.*",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.cname",
      "satscores.rtype",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? | team : team.team_long_name ( Hannover 96 ) , team.team_short_name , team.team_api_id , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.defenceaggressionclass , team_attributes.defenceaggression , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.defenceaggressionclass",
      "team_attributes.defenceaggression",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range. | laboratory : laboratory.date , laboratory.t-bil , laboratory.id , laboratory.pic , laboratory.glu , laboratory.* | patient : patient.id , patient.admission , patient.first date , patient.diagnosis , patient.sex , patient.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.examination date , examination.symptoms , examination.thrombosis , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.date",
      "laboratory.t-bil",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.*",
      "patient.id",
      "patient.admission",
      "patient.first date",
      "patient.diagnosis",
      "patient.sex",
      "patient.*",
      "examination.diagnosis",
      "examination.id",
      "examination.examination date",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "How many matches in the 2015/2016 season were held in Scotland Premier League\n? | league : league.name ( Scotland Premier League ) , league.country_id , league.id , league.* | match : match.season ( 2015/2016 ) , match.league_id , match.id , match.stage , match.date , match.* | country : country.name ( Scotland ) , country.id , country.* | player_attributes : player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.positioning , player_attributes.id , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "match.season",
      "match.league_id",
      "match.id",
      "match.stage",
      "match.date",
      "match.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.positioning",
      "player_attributes.id",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city. | schools : schools.gsoffered , schools.city , schools.magnet , schools.gsserved , schools.cdscode , schools.* | frpm : frpm.nslp provision status ( Multiple Provision Types , Provision 3 ) , frpm.cdscode , frpm.school type , frpm.school name , frpm.irc , frpm.* | satscores : satscores.cds , satscores.numge1500 , satscores.rtype , satscores.sname , satscores.dname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.gsoffered",
      "schools.city",
      "schools.magnet",
      "schools.gsserved",
      "schools.cdscode",
      "schools.*",
      "frpm.nslp provision status",
      "frpm.cdscode",
      "frpm.school type",
      "frpm.school name",
      "frpm.irc",
      "frpm.*",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.rtype",
      "satscores.sname",
      "satscores.dname",
      "satscores.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "How many patients with a normal RF don't have thrombosis? | examination : examination.diagnosis ( Normal , thrombosis ) , examination.thrombosis , examination.id , examination.symptoms , examination.kct , examination.* | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.id , laboratory.date , laboratory.pic , laboratory.glu , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.symptoms",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.glu",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12? | player : player.player_name ( Jordan Bowery , Landon Donovan ) , player.player_api_id , player.id , player.player_fifa_api_id , player.height , player.* | player_attributes : player_attributes.overall_rating , player_attributes.date , player_attributes.player_api_id , player_attributes.potential , player_attributes.preferred_foot , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.id",
      "player.player_fifa_api_id",
      "player.height",
      "player.*",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.preferred_foot",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10? | team : team.team_long_name ( Hannover 96 ) , team.team_short_name , team.team_api_id , team.team_fifa_api_id , team.id , team.* | team_attributes : team_attributes.date , team_attributes.defenceaggressionclass , team_attributes.defenceaggression , team_attributes.team_api_id , team_attributes.team_fifa_api_id , team_attributes.* | match : match.date , match.season , match.id , match.stage , match.home_team_api_id , match.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "team.team_long_name",
      "team.team_short_name",
      "team.team_api_id",
      "team.team_fifa_api_id",
      "team.id",
      "team.*",
      "team_attributes.date",
      "team_attributes.defenceaggressionclass",
      "team_attributes.defenceaggression",
      "team_attributes.team_api_id",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "match.date",
      "match.season",
      "match.id",
      "match.stage",
      "match.home_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "How many unknown power cards contain info about the triggered ability | cards : cards.power , cards.name , cards.id , cards.life , cards.uuid , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.* | foreign_data : foreign_data.id , foreign_data.language , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.power",
      "cards.name",
      "cards.id",
      "cards.life",
      "cards.uuid",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*",
      "foreign_data.id",
      "foreign_data.language",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Calculate the difference in the percentage of members in New Jersey and Vermont. | zip_code : zip_code.state ( New Jersey , Vermont ) , zip_code.city ( Jersey , Vermont ) , zip_code.zip_code , zip_code.short_state , zip_code.county , zip_code.* | member : member.member_id , member.zip , member.link_to_major , member.email , member.phone , member.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "zip_code.state",
      "zip_code.city",
      "zip_code.zip_code",
      "zip_code.short_state",
      "zip_code.county",
      "zip_code.*",
      "member.member_id",
      "member.zip",
      "member.link_to_major",
      "member.email",
      "member.phone",
      "member.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What are the elements of the toxicology and label of molecule TR060? | molecule : molecule.label , molecule.molecule_id ( TR060 ) , molecule.* | atom : atom.element , atom.molecule_id ( TR060 ) , atom.atom_id , atom.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id ( TR060 ) , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*",
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. | patient : patient.sex , patient.id , patient.birthday , patient.description , patient.diagnosis , patient.* | laboratory : laboratory.glu , laboratory.t-cho , laboratory.tg , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.description",
      "patient.diagnosis",
      "patient.*",
      "laboratory.glu",
      "laboratory.t-cho",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet? | patient : patient.id , patient.admission , patient.diagnosis , patient.sex , patient.birthday , patient.* | laboratory : laboratory.cre , laboratory.sc170 , laboratory.cpk , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.admission",
      "patient.diagnosis",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.cre",
      "laboratory.sc170",
      "laboratory.cpk",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Is the set of cards with Adarkar Valkyrie only available outside the United States? | cards : cards.name ( Adarkar Valkyrie ) , cards.availability , cards.isonlineonly , cards.facename , cards.id , cards.* | sets : sets.isforeignonly , sets.isonlineonly , sets.code , sets.name , sets.id , sets.* | foreign_data : foreign_data.language , foreign_data.uuid , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.name",
      "cards.availability",
      "cards.isonlineonly",
      "cards.facename",
      "cards.id",
      "cards.*",
      "sets.isforeignonly",
      "sets.isonlineonly",
      "sets.code",
      "sets.name",
      "sets.id",
      "sets.*",
      "foreign_data.language",
      "foreign_data.uuid",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? | schools : schools.county ( Los Angeles ) , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.* | frpm : frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.cname ( Los Angeles ) , satscores.cds , satscores.numge1500 , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.cname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order. | atom : atom.element , atom.molecule_id ( TR000 ) , atom.atom_id , atom.* | molecule : molecule.molecule_id ( TR000 ) , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.molecule_id ( TR000 ) , bond.bond_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "List the elements of all the triple bonds. | bond : bond.bond_id , bond.bond_type , bond.molecule_id , bond.* | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the bond type of TR007_4_19? | bond : bond.bond_type , bond.bond_id ( TR007_4_19 ) , bond.molecule_id , bond.* | connected : connected.bond_id ( TR007_4_19 ) , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.atom_id , atom.element , atom.molecule_id , atom.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.atom_id",
      "atom.element",
      "atom.molecule_id",
      "atom.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season. | league : league.name , league.id , league.country_id , league.* | match : match.season ( 2009/2010 ) , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | country : country.id , country.name , country.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "league.name",
      "league.id",
      "league.country_id",
      "league.*",
      "match.season",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "country.id",
      "country.name",
      "country.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which element is the least numerous in non-carcinogenic molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "In which years did Lewis Hamilton participate in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.circuitid , races.* | drivers : drivers.forename ( Lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.constructorid , results.raceid , results.driverid , results.number , results.grid , results.* | seasons : seasons.year , seasons.url , seasons.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.circuitid",
      "races.*",
      "drivers.forename",
      "drivers.surname",
      "drivers.driverref",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.constructorid",
      "results.raceid",
      "results.driverid",
      "results.number",
      "results.grid",
      "results.*",
      "seasons.year",
      "seasons.url",
      "seasons.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985. | drivers : drivers.dob , drivers.nationality ( German ) , drivers.driverid , drivers.surname , drivers.forename , drivers.* | pitstops : pitstops.duration , pitstops.stop , pitstops.driverid , pitstops.milliseconds , pitstops.raceid , pitstops.* | laptimes : laptimes.lap , laptimes.time , laptimes.raceid , laptimes.driverid , laptimes.position , laptimes.* | driverstandings : driverstandings.driverid , driverstandings.raceid , driverstandings.points , driverstandings.position , driverstandings.wins , driverstandings.*",
    "output_sequence": " | ",
    "tc_original": [
      "drivers.dob",
      "drivers.nationality",
      "drivers.driverid",
      "drivers.surname",
      "drivers.forename",
      "drivers.*",
      "pitstops.duration",
      "pitstops.stop",
      "pitstops.driverid",
      "pitstops.milliseconds",
      "pitstops.raceid",
      "pitstops.*",
      "laptimes.lap",
      "laptimes.time",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.position",
      "laptimes.*",
      "driverstandings.driverid",
      "driverstandings.raceid",
      "driverstandings.points",
      "driverstandings.position",
      "driverstandings.wins",
      "driverstandings.*"
    ]
  },
  {
    "db_id": "financial",
    "input_sequence": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000. | district : district.a11 , district.district_id , district.a3 , district.a2 , district.a8 , district.* | loan : loan.account_id , loan.amount , loan.loan_id , loan.duration , loan.status , loan.* | disp : disp.type , disp.account_id , disp.disp_id , disp.client_id , disp.* | account : account.account_id , account.district_id , account.frequency , account.date , account.*",
    "output_sequence": " | ",
    "tc_original": [
      "district.a11",
      "district.district_id",
      "district.a3",
      "district.a2",
      "district.a8",
      "district.*",
      "loan.account_id",
      "loan.amount",
      "loan.loan_id",
      "loan.duration",
      "loan.status",
      "loan.*",
      "disp.type",
      "disp.account_id",
      "disp.disp_id",
      "disp.client_id",
      "disp.*",
      "account.account_id",
      "account.district_id",
      "account.frequency",
      "account.date",
      "account.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "How many superheroes with blonde hair are there? | colour : colour.colour ( Blond ) , colour.id , colour.* | superhero : superhero.hair_colour_id , superhero.gender_id , superhero.id , superhero.superhero_name , superhero.eye_colour_id , superhero.* | gender : gender.gender , gender.id , gender.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "colour.colour",
      "colour.id",
      "colour.*",
      "superhero.hair_colour_id",
      "superhero.gender_id",
      "superhero.id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.*",
      "gender.gender",
      "gender.id",
      "gender.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Which element is the least numerous in non-carcinogenic molecules? | atom : atom.element , atom.molecule_id , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.* | connected : connected.atom_id , connected.atom_id2 , connected.bond_id , connected.* | bond : bond.bond_id , bond.molecule_id , bond.bond_type , bond.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.bond_id",
      "connected.*",
      "bond.bond_id",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name. | races : races.year , races.name ( Canadian Grand Prix ) , races.date , races.raceid , races.circuitid , races.* | drivers : drivers.driverref ( driver ) , drivers.surname ( Driver ) , drivers.forename , drivers.driverid , drivers.code , drivers.* | results : results.rank , results.driverid , results.laps , results.grid , results.raceid , results.* | laptimes : laptimes.driverid , laptimes.lap , laptimes.position , laptimes.time , laptimes.milliseconds , laptimes.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.name",
      "races.date",
      "races.raceid",
      "races.circuitid",
      "races.*",
      "drivers.driverref",
      "drivers.surname",
      "drivers.forename",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.rank",
      "results.driverid",
      "results.laps",
      "results.grid",
      "results.raceid",
      "results.*",
      "laptimes.driverid",
      "laptimes.lap",
      "laptimes.position",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. | event : event.event_name , event.status ( Closed ) , event.type ( Game ) , event.event_date , event.event_id , event.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.city , zip_code.county , zip_code.type , zip_code.state , zip_code.* | budget : budget.category , budget.spent , budget.remaining , budget.amount , budget.budget_id , budget.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.event_name",
      "event.status",
      "event.type",
      "event.event_date",
      "event.event_id",
      "event.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.city",
      "zip_code.county",
      "zip_code.type",
      "zip_code.state",
      "zip_code.*",
      "budget.category",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.budget_id",
      "budget.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Mention the category of events which were held at MU 215. | event : event.location ( MU 215 ) , event.type , event.event_name , event.event_id , event.event_date , event.* | budget : budget.category , budget.budget_id , budget.spent , budget.remaining , budget.amount , budget.* | attendance : attendance.link_to_event , attendance.link_to_member , attendance.* | zip_code : zip_code.zip_code , zip_code.type , zip_code.city , zip_code.county , zip_code.state , zip_code.*",
    "output_sequence": " | ",
    "tc_original": [
      "event.location",
      "event.type",
      "event.event_name",
      "event.event_id",
      "event.event_date",
      "event.*",
      "budget.category",
      "budget.budget_id",
      "budget.spent",
      "budget.remaining",
      "budget.amount",
      "budget.*",
      "attendance.link_to_event",
      "attendance.link_to_member",
      "attendance.*",
      "zip_code.zip_code",
      "zip_code.type",
      "zip_code.city",
      "zip_code.county",
      "zip_code.state",
      "zip_code.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12? | laboratory : laboratory.gpt , laboratory.date , laboratory.got , laboratory.id , laboratory.pic , laboratory.* | patient : patient.sex , patient.id , patient.birthday , patient.admission , patient.description , patient.* | examination : examination.examination date , examination.id , examination.diagnosis , examination.symptoms , examination.acl igg , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.gpt",
      "laboratory.date",
      "laboratory.got",
      "laboratory.id",
      "laboratory.pic",
      "laboratory.*",
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.admission",
      "patient.description",
      "patient.*",
      "examination.examination date",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.acl igg",
      "examination.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation? | patient : patient.id , patient.diagnosis , patient.sex , patient.description , patient.admission , patient.* | examination : examination.kct , examination.lac , examination.diagnosis ( Normal ) , examination.rvvt , examination.id , examination.* | laboratory : laboratory.t-cho , laboratory.id , laboratory.date , laboratory.pic , laboratory.sm ( negative ) , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.sex",
      "patient.description",
      "patient.admission",
      "patient.*",
      "examination.kct",
      "examination.lac",
      "examination.diagnosis",
      "examination.rvvt",
      "examination.id",
      "examination.*",
      "laboratory.t-cho",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.sm",
      "laboratory.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range. | laboratory : laboratory.ldh , laboratory.id , laboratory.date , laboratory.pic , laboratory.t-bil , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.lac , examination.kct , examination.* | patient : patient.id , patient.sex , patient.admission , patient.diagnosis , patient.birthday , patient.*",
    "output_sequence": " | ",
    "tc_original": [
      "laboratory.ldh",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.t-bil",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.lac",
      "examination.kct",
      "examination.*",
      "patient.id",
      "patient.sex",
      "patient.admission",
      "patient.diagnosis",
      "patient.birthday",
      "patient.*"
    ]
  },
  {
    "db_id": "student_club",
    "input_sequence": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it. | member : member.last_name , member.first_name , member.member_id , member.zip , member.email , member.* | expense : expense.cost , expense.expense_description , expense.approved , expense.expense_id , expense.link_to_budget , expense.* | budget : budget.spent , budget.budget_id , budget.amount , budget.category , budget.remaining , budget.* | attendance : attendance.link_to_member , attendance.link_to_event , attendance.*",
    "output_sequence": " | ",
    "tc_original": [
      "member.last_name",
      "member.first_name",
      "member.member_id",
      "member.zip",
      "member.email",
      "member.*",
      "expense.cost",
      "expense.expense_description",
      "expense.approved",
      "expense.expense_id",
      "expense.link_to_budget",
      "expense.*",
      "budget.spent",
      "budget.budget_id",
      "budget.amount",
      "budget.category",
      "budget.remaining",
      "budget.*",
      "attendance.link_to_member",
      "attendance.link_to_event",
      "attendance.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers. | users : users.age , users.id , users.reputation , users.location , users.views , users.* | badges : badges.name ( Organizer ) , badges.userid , badges.date , badges.id , badges.* | postlinks : postlinks.id , postlinks.postid , postlinks.relatedpostid , postlinks.creationdate , postlinks.linktypeid , postlinks.* | posthistory : posthistory.id , posthistory.userid , posthistory.text , posthistory.comment , posthistory.postid , posthistory.*",
    "output_sequence": " | ",
    "tc_original": [
      "users.age",
      "users.id",
      "users.reputation",
      "users.location",
      "users.views",
      "users.*",
      "badges.name",
      "badges.userid",
      "badges.date",
      "badges.id",
      "badges.*",
      "postlinks.id",
      "postlinks.postid",
      "postlinks.relatedpostid",
      "postlinks.creationdate",
      "postlinks.linktypeid",
      "postlinks.*",
      "posthistory.id",
      "posthistory.userid",
      "posthistory.text",
      "posthistory.comment",
      "posthistory.postid",
      "posthistory.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team? | match : match.date , match.home_team_goal , match.away_team_goal , match.home_team_api_id , match.away_team_api_id , match.* | league : league.name , league.country_id , league.id , league.* | country : country.name , country.id , country.* | player_attributes : player_attributes.potential , player_attributes.finishing , player_attributes.agility , player_attributes.balance , player_attributes.jumping , player_attributes.*",
    "output_sequence": " | ",
    "tc_original": [
      "match.date",
      "match.home_team_goal",
      "match.away_team_goal",
      "match.home_team_api_id",
      "match.away_team_api_id",
      "match.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "country.name",
      "country.id",
      "country.*",
      "player_attributes.potential",
      "player_attributes.finishing",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.jumping",
      "player_attributes.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.tg , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "Identify the gender of the superhero who has the ability of Phoenix Force. | gender : gender.gender , gender.id , gender.* | superpower : superpower.power_name ( Phoenix Force ) , superpower.id , superpower.* | superhero : superhero.gender_id , superhero.superhero_name ( Phoenix ) , superhero.eye_colour_id , superhero.id , superhero.hair_colour_id , superhero.* | hero_power : hero_power.hero_id , hero_power.power_id , hero_power.*",
    "output_sequence": " | ",
    "tc_original": [
      "gender.gender",
      "gender.id",
      "gender.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "superhero.gender_id",
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "superhero.id",
      "superhero.hair_colour_id",
      "superhero.*",
      "hero_power.hero_id",
      "hero_power.power_id",
      "hero_power.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms. | bond : bond.bond_type , bond.molecule_id , bond.bond_id , bond.* | molecule : molecule.molecule_id , molecule.label , molecule.* | atom : atom.molecule_id , atom.atom_id , atom.element , atom.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.bond_type",
      "bond.molecule_id",
      "bond.bond_id",
      "bond.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "atom.molecule_id",
      "atom.atom_id",
      "atom.element",
      "atom.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order. | molecule : molecule.molecule_id , molecule.label , molecule.* | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.*",
    "output_sequence": " | ",
    "tc_original": [
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*",
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Among all the lap records set on various circuits, what is the time for the fastest one? | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.fastestlaptime , results.fastestlap , results.fastestlapspeed , results.laps , results.time , results.* | circuits : circuits.circuitid , circuits.name , circuits.url , circuits.circuitref , circuits.lat , circuits.* | races : races.circuitid , races.year , races.raceid , races.time , races.name , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.fastestlaptime",
      "results.fastestlap",
      "results.fastestlapspeed",
      "results.laps",
      "results.time",
      "results.*",
      "circuits.circuitid",
      "circuits.name",
      "circuits.url",
      "circuits.circuitref",
      "circuits.lat",
      "circuits.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.time",
      "races.name",
      "races.*"
    ]
  },
  {
    "db_id": "superhero",
    "input_sequence": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'. | superhero : superhero.superhero_name , superhero.full_name , superhero.gender_id , superhero.id , superhero.eye_colour_id , superhero.* | superpower : superpower.power_name ( Super Strength ) , superpower.id , superpower.* | publisher : publisher.publisher_name ( Marvel Comics ) , publisher.id , publisher.* | gender : gender.gender , gender.id , gender.*",
    "output_sequence": " | ",
    "tc_original": [
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.gender_id",
      "superhero.id",
      "superhero.eye_colour_id",
      "superhero.*",
      "superpower.power_name",
      "superpower.id",
      "superpower.*",
      "publisher.publisher_name",
      "publisher.id",
      "publisher.*",
      "gender.gender",
      "gender.id",
      "gender.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range. | patient : patient.sex , patient.id , patient.birthday , patient.description , patient.diagnosis , patient.* | laboratory : laboratory.glu , laboratory.t-cho , laboratory.tg , laboratory.id , laboratory.date , laboratory.* | examination : examination.diagnosis ( Normal ) , examination.id , examination.symptoms , examination.thrombosis , examination.examination date , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.sex",
      "patient.id",
      "patient.birthday",
      "patient.description",
      "patient.diagnosis",
      "patient.*",
      "laboratory.glu",
      "laboratory.t-cho",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.*",
      "examination.diagnosis",
      "examination.id",
      "examination.symptoms",
      "examination.thrombosis",
      "examination.examination date",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%? | schools : schools.county ( Los Angeles ) , schools.charter , schools.cdscode , schools.gsserved , schools.gsoffered , schools.* | frpm : frpm.county name ( Los Angeles ) , frpm.free meal count (k-12) , frpm.enrollment (k-12) , frpm.percent (%) eligible free (k-12) , frpm.cdscode , frpm.* | satscores : satscores.enroll12 , satscores.cname ( Los Angeles ) , satscores.cds , satscores.numge1500 , satscores.sname , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "schools.county",
      "schools.charter",
      "schools.cdscode",
      "schools.gsserved",
      "schools.gsoffered",
      "schools.*",
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)",
      "frpm.percent (%) eligible free (k-12)",
      "frpm.cdscode",
      "frpm.*",
      "satscores.enroll12",
      "satscores.cname",
      "satscores.cds",
      "satscores.numge1500",
      "satscores.sname",
      "satscores.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "When was the first time did Kevin Constant have his highest crossing score? Give the date. | player : player.player_name ( Kevin Constant ) , player.player_api_id , player.player_fifa_api_id , player.id , player.height , player.* | player_attributes : player_attributes.date , player_attributes.crossing , player_attributes.player_api_id , player_attributes.overall_rating , player_attributes.potential , player_attributes.* | team_attributes : team_attributes.chancecreationcrossingclass , team_attributes.date , team_attributes.id , team_attributes.chancecreationcrossing , team_attributes.team_fifa_api_id , team_attributes.* | country : country.id , country.name , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.player_name",
      "player.player_api_id",
      "player.player_fifa_api_id",
      "player.id",
      "player.height",
      "player.*",
      "player_attributes.date",
      "player_attributes.crossing",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.potential",
      "player_attributes.*",
      "team_attributes.chancecreationcrossingclass",
      "team_attributes.date",
      "team_attributes.id",
      "team_attributes.chancecreationcrossing",
      "team_attributes.team_fifa_api_id",
      "team_attributes.*",
      "country.id",
      "country.name",
      "country.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values. | cards : cards.artist ( Jim Pavelec ) , cards.name , cards.id , cards.uuid , cards.asciiname , cards.* | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.translation , set_translations.setcode , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.artist",
      "cards.name",
      "cards.id",
      "cards.uuid",
      "cards.asciiname",
      "cards.*",
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "Please list the lap records for the circuits in Italy. | circuits : circuits.country ( Italy ) , circuits.circuitid , circuits.name , circuits.circuitref , circuits.location , circuits.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.time , laptimes.milliseconds , laptimes.driverid , laptimes.* | results : results.laps , results.fastestlap , results.fastestlaptime , results.fastestlapspeed , results.time , results.* | races : races.circuitid , races.year , races.raceid , races.name , races.date , races.*",
    "output_sequence": " | ",
    "tc_original": [
      "circuits.country",
      "circuits.circuitid",
      "circuits.name",
      "circuits.circuitref",
      "circuits.location",
      "circuits.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.driverid",
      "laptimes.*",
      "results.laps",
      "results.fastestlap",
      "results.fastestlaptime",
      "results.fastestlapspeed",
      "results.time",
      "results.*",
      "races.circuitid",
      "races.year",
      "races.raceid",
      "races.name",
      "races.date",
      "races.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients who have a normal platelet level, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "What is the description about the ruling of card \"Condemn\"? | rulings : rulings.text , rulings.uuid , rulings.id , rulings.date , rulings.* | cards : cards.name ( Condemn ) , cards.uuid , cards.originaltext , cards.originalreleasedate , cards.artist , cards.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "rulings.text",
      "rulings.uuid",
      "rulings.id",
      "rulings.date",
      "rulings.*",
      "cards.name",
      "cards.uuid",
      "cards.originaltext",
      "cards.originalreleasedate",
      "cards.artist",
      "cards.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race. | races : races.time , races.name , races.date , races.year , races.raceid , races.* | drivers : drivers.dob , drivers.driverid , drivers.surname ( Driver ) , drivers.number , drivers.code , drivers.* | qualifying : qualifying.raceid , qualifying.driverid , qualifying.q1 , qualifying.qualifyid , qualifying.q3 , qualifying.* | results : results.driverid , results.raceid , results.number , results.grid , results.position , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.time",
      "races.name",
      "races.date",
      "races.year",
      "races.raceid",
      "races.*",
      "drivers.dob",
      "drivers.driverid",
      "drivers.surname",
      "drivers.number",
      "drivers.code",
      "drivers.*",
      "qualifying.raceid",
      "qualifying.driverid",
      "qualifying.q1",
      "qualifying.qualifyid",
      "qualifying.q3",
      "qualifying.*",
      "results.driverid",
      "results.raceid",
      "results.number",
      "results.grid",
      "results.position",
      "results.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "What is the percentage of carbon in double-bond molecules? | bond : bond.molecule_id , bond.bond_type , bond.bond_id , bond.* | connected : connected.bond_id , connected.atom_id , connected.atom_id2 , connected.* | atom : atom.molecule_id , atom.element , atom.atom_id , atom.* | molecule : molecule.molecule_id , molecule.label , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "bond.molecule_id",
      "bond.bond_type",
      "bond.bond_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "atom.molecule_id",
      "atom.element",
      "atom.atom_id",
      "atom.*",
      "molecule.molecule_id",
      "molecule.label",
      "molecule.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | examination : examination.symptoms , examination.diagnosis ( Normal ) , examination.thrombosis , examination.id , examination.lac , examination.* | laboratory : laboratory.tg , laboratory.id , laboratory.date , laboratory.pic , laboratory.dna-ii , laboratory.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "examination.symptoms",
      "examination.diagnosis",
      "examination.thrombosis",
      "examination.id",
      "examination.lac",
      "examination.*",
      "laboratory.tg",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.dna-ii",
      "laboratory.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil? | set_translations : set_translations.language ( Japanese ) , set_translations.translation , set_translations.setcode , set_translations.id , set_translations.* | sets : sets.isnonfoilonly , sets.code , sets.id , sets.isfoilonly , sets.isonlineonly , sets.* | foreign_data : foreign_data.language ( Japanese ) , foreign_data.id , foreign_data.name , foreign_data.text , foreign_data.type , foreign_data.* | cards : cards.availability , cards.name , cards.artist , cards.uuid , cards.id , cards.*",
    "output_sequence": " | ",
    "tc_original": [
      "set_translations.language",
      "set_translations.translation",
      "set_translations.setcode",
      "set_translations.id",
      "set_translations.*",
      "sets.isnonfoilonly",
      "sets.code",
      "sets.id",
      "sets.isfoilonly",
      "sets.isonlineonly",
      "sets.*",
      "foreign_data.language",
      "foreign_data.id",
      "foreign_data.name",
      "foreign_data.text",
      "foreign_data.type",
      "foreign_data.*",
      "cards.availability",
      "cards.name",
      "cards.artist",
      "cards.uuid",
      "cards.id",
      "cards.*"
    ]
  },
  {
    "db_id": "debit_card_specializing",
    "input_sequence": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24? | customers : customers.currency , customers.customerid , customers.segment , customers.* | transactions_1k : transactions_1k.time ( 16:25:00 ) , transactions_1k.date , transactions_1k.customerid , transactions_1k.amount , transactions_1k.price , transactions_1k.* | yearmonth : yearmonth.date , yearmonth.customerid , yearmonth.consumption , yearmonth.* | gasstations : gasstations.country , gasstations.gasstationid , gasstations.chainid , gasstations.segment , gasstations.*",
    "output_sequence": " | ",
    "tc_original": [
      "customers.currency",
      "customers.customerid",
      "customers.segment",
      "customers.*",
      "transactions_1k.time",
      "transactions_1k.date",
      "transactions_1k.customerid",
      "transactions_1k.amount",
      "transactions_1k.price",
      "transactions_1k.*",
      "yearmonth.date",
      "yearmonth.customerid",
      "yearmonth.consumption",
      "yearmonth.*",
      "gasstations.country",
      "gasstations.gasstationid",
      "gasstations.chainid",
      "gasstations.segment",
      "gasstations.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "Which country is the league Italy Serie A from? | country : country.name ( Italy ) , country.id , country.* | league : league.name ( Italy Serie A ) , league.country_id , league.id , league.* | player_attributes : player_attributes.potential , player_attributes.agility , player_attributes.balance , player_attributes.stamina , player_attributes.strength , player_attributes.* | player : player.id , player.birthday , player.height , player.weight , player.player_api_id , player.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.id",
      "country.*",
      "league.name",
      "league.country_id",
      "league.id",
      "league.*",
      "player_attributes.potential",
      "player_attributes.agility",
      "player_attributes.balance",
      "player_attributes.stamina",
      "player_attributes.strength",
      "player_attributes.*",
      "player.id",
      "player.birthday",
      "player.height",
      "player.weight",
      "player.player_api_id",
      "player.*"
    ]
  },
  {
    "db_id": "thrombosis_prediction",
    "input_sequence": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range? | patient : patient.id , patient.diagnosis , patient.admission , patient.sex , patient.birthday , patient.* | laboratory : laboratory.plt , laboratory.id , laboratory.date , laboratory.pic , laboratory.pt , laboratory.* | examination : examination.id , examination.diagnosis , examination.symptoms , examination.ana pattern , examination.acl iga , examination.*",
    "output_sequence": " | ",
    "tc_original": [
      "patient.id",
      "patient.diagnosis",
      "patient.admission",
      "patient.sex",
      "patient.birthday",
      "patient.*",
      "laboratory.plt",
      "laboratory.id",
      "laboratory.date",
      "laboratory.pic",
      "laboratory.pt",
      "laboratory.*",
      "examination.id",
      "examination.diagnosis",
      "examination.symptoms",
      "examination.ana pattern",
      "examination.acl iga",
      "examination.*"
    ]
  },
  {
    "db_id": "california_schools",
    "input_sequence": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average. | frpm : frpm.charter funding type ( Locally funded ) , frpm.school name , frpm.enrollment (k-12) , frpm.school type , frpm.free meal count (ages 5-17) , frpm.* | schools : schools.fundingtype ( Locally funded ) , schools.school , schools.gsoffered ( K-12 ) , schools.gsserved ( K-12 ) , schools.soctype , schools.* | satscores : satscores.sname , satscores.enroll12 , satscores.numge1500 , satscores.cds , satscores.rtype , satscores.*",
    "output_sequence": " | ",
    "tc_original": [
      "frpm.charter funding type",
      "frpm.school name",
      "frpm.enrollment (k-12)",
      "frpm.school type",
      "frpm.free meal count (ages 5-17)",
      "frpm.*",
      "schools.fundingtype",
      "schools.school",
      "schools.gsoffered",
      "schools.gsserved",
      "schools.soctype",
      "schools.*",
      "satscores.sname",
      "satscores.enroll12",
      "satscores.numge1500",
      "satscores.cds",
      "satscores.rtype",
      "satscores.*"
    ]
  },
  {
    "db_id": "codebase_community",
    "input_sequence": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes. | comments : comments.score , comments.userdisplayname , comments.userid , comments.id , comments.postid , comments.* | users : users.downvotes , users.upvotes , users.displayname , users.id , users.views , users.* | votes : votes.userid , votes.postid , votes.id , votes.votetypeid , votes.creationdate , votes.* | posts : posts.score , posts.id , posts.body , posts.owneruserid , posts.title , posts.*",
    "output_sequence": " | ",
    "tc_original": [
      "comments.score",
      "comments.userdisplayname",
      "comments.userid",
      "comments.id",
      "comments.postid",
      "comments.*",
      "users.downvotes",
      "users.upvotes",
      "users.displayname",
      "users.id",
      "users.views",
      "users.*",
      "votes.userid",
      "votes.postid",
      "votes.id",
      "votes.votetypeid",
      "votes.creationdate",
      "votes.*",
      "posts.score",
      "posts.id",
      "posts.body",
      "posts.owneruserid",
      "posts.title",
      "posts.*"
    ]
  },
  {
    "db_id": "formula_1",
    "input_sequence": "What is the lap record set by Lewis Hamilton in a Formula_1 race? | races : races.year , races.raceid , races.name , races.round , races.date , races.* | laptimes : laptimes.lap , laptimes.raceid , laptimes.driverid , laptimes.time , laptimes.milliseconds , laptimes.* | drivers : drivers.forename ( Lewis ) , drivers.driverref ( hamilton , lewis ) , drivers.surname ( Hamilton , Lewis ) , drivers.driverid , drivers.code , drivers.* | results : results.laps , results.constructorid , results.fastestlap , results.raceid , results.driverid , results.*",
    "output_sequence": " | ",
    "tc_original": [
      "races.year",
      "races.raceid",
      "races.name",
      "races.round",
      "races.date",
      "races.*",
      "laptimes.lap",
      "laptimes.raceid",
      "laptimes.driverid",
      "laptimes.time",
      "laptimes.milliseconds",
      "laptimes.*",
      "drivers.forename",
      "drivers.driverref",
      "drivers.surname",
      "drivers.driverid",
      "drivers.code",
      "drivers.*",
      "results.laps",
      "results.constructorid",
      "results.fastestlap",
      "results.raceid",
      "results.driverid",
      "results.*"
    ]
  },
  {
    "db_id": "card_games",
    "input_sequence": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power? | cards : cards.convertedmanacost , cards.power , cards.name , cards.manacost , cards.isonlineonly , cards.* | sets : sets.name ( Coldsnap ) , sets.mcmname ( Coldsnap ) , sets.isonlineonly , sets.code , sets.id , sets.* | legalities : legalities.uuid , legalities.id , legalities.format , legalities.status , legalities.* | set_translations : set_translations.id , set_translations.language , set_translations.setcode , set_translations.translation ( Coldsnap ) , set_translations.*",
    "output_sequence": " | ",
    "tc_original": [
      "cards.convertedmanacost",
      "cards.power",
      "cards.name",
      "cards.manacost",
      "cards.isonlineonly",
      "cards.*",
      "sets.name",
      "sets.mcmname",
      "sets.isonlineonly",
      "sets.code",
      "sets.id",
      "sets.*",
      "legalities.uuid",
      "legalities.id",
      "legalities.format",
      "legalities.status",
      "legalities.*",
      "set_translations.id",
      "set_translations.language",
      "set_translations.setcode",
      "set_translations.translation",
      "set_translations.*"
    ]
  },
  {
    "db_id": "toxicology",
    "input_sequence": "Name the atoms' elements that form bond TR000_2_3. | atom : atom.element , atom.atom_id , atom.molecule_id , atom.* | bond : bond.bond_id ( TR000_2_3 ) , bond.bond_type , bond.molecule_id , bond.* | connected : connected.bond_id ( TR000_2_3 ) , connected.atom_id , connected.atom_id2 , connected.* | molecule : molecule.label , molecule.molecule_id , molecule.*",
    "output_sequence": " | ",
    "tc_original": [
      "atom.element",
      "atom.atom_id",
      "atom.molecule_id",
      "atom.*",
      "bond.bond_id",
      "bond.bond_type",
      "bond.molecule_id",
      "bond.*",
      "connected.bond_id",
      "connected.atom_id",
      "connected.atom_id2",
      "connected.*",
      "molecule.label",
      "molecule.molecule_id",
      "molecule.*"
    ]
  },
  {
    "db_id": "european_football_2",
    "input_sequence": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015. | player : player.birthday , player.player_name , player.player_fifa_api_id , player.player_api_id , player.height , player.* | player_attributes : player_attributes.sprint_speed , player_attributes.date , player_attributes.acceleration , player_attributes.player_api_id , player_attributes.potential , player_attributes.* | country : country.id , country.name , country.* | league : league.id , league.country_id , league.name , league.*",
    "output_sequence": " | ",
    "tc_original": [
      "player.birthday",
      "player.player_name",
      "player.player_fifa_api_id",
      "player.player_api_id",
      "player.height",
      "player.*",
      "player_attributes.sprint_speed",
      "player_attributes.date",
      "player_attributes.acceleration",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.*",
      "country.id",
      "country.name",
      "country.*",
      "league.id",
      "league.country_id",
      "league.name",
      "league.*"
    ]
  }
]