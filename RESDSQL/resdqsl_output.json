[
    {
        "input": "What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial | city : city.id , city.name , city.district , city.population , city.countrycode | city.countrycode = country.code | countrylanguage.countrycode = country.code",
        "db_id": "world_1",
        "sql": "select name from country where continent = 'Afrika' and population < ( select min ( population ) from country where continent = 'Asia' )"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | car_names : car_names.makeid , car_names.make , car_names.model | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | model_list : model_list.maker , model_list.model , model_list.modelid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970"
    },
    {
        "input": "List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id",
        "db_id": "orchestra",
        "sql": "select title from conductor order by age asc"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.city , addresses.country | students : students.current_address_id , students.permanent_address_id , students.student_id , students.first_name , students.middle_name | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id",
        "db_id": "student_transcripts_tracking",
        "sql": "select current_address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by current_address_id order by count ( * ) desc limit 1"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial | city : city.id , city.name , city.district , city.population , city.countrycode | city.countrycode = country.code | countrylanguage.countrycode = country.code",
        "db_id": "world_1",
        "sql": "select name from country where continent = 'Afrika' and population < ( select min ( population ) from country where continent = 'Asia' )"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.city , addresses.country | students : students.current_address_id , students.permanent_address_id , students.student_id , students.first_name , students.middle_name | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id",
        "db_id": "student_transcripts_tracking",
        "sql": "select current_address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by current_address_id order by count ( * ) desc limit 1"
    },
    {
        "input": "Return the number of flights departing from Aberdeen. | flights : flights.sourceairport , flights.airline , flights.destairport , flights.flightno | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode",
        "db_id": "flight_2",
        "sql": "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Abbotton'"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.city , addresses.country | students : students.current_address_id , students.permanent_address_id , students.student_id , students.first_name , students.middle_name | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id",
        "db_id": "student_transcripts_tracking",
        "sql": "select current_address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by current_address_id order by count ( * ) desc limit 1"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.professional_id , professionals.role_code , professionals.email_address , professionals.street , professionals.city | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment | dogs : dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.weight | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id",
        "db_id": "dog_kennels",
        "sql": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.pro_id = treatments.professional_id"
    },
    {
        "input": "What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position | song.singer_id = singer.singer_id",
        "db_id": "singer",
        "sql": "select name from singer order by net_worth_milions desc limit 1"
    },
    {
        "input": "Return the number of flights departing from Aberdeen. | flights : flights.sourceairport , flights.airline , flights.destairport , flights.flightno | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode",
        "db_id": "flight_2",
        "sql": "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Abbotton'"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | car_names : car_names.makeid , car_names.make , car_names.model | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | model_list : model_list.maker , model_list.model , model_list.modelid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970"
    },
    {
        "input": "Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id",
        "db_id": "network_1",
        "sql": "select student_id from high schooler except select student_id from friend"
    },
    {
        "input": "List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id",
        "db_id": "orchestra",
        "sql": "select title from conductor order by age asc"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.city , addresses.country | students : students.current_address_id , students.permanent_address_id , students.student_id , students.first_name , students.middle_name | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id",
        "db_id": "student_transcripts_tracking",
        "sql": "select current_address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by current_address_id order by count ( * ) desc limit 1"
    },
    {
        "input": "Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id",
        "db_id": "network_1",
        "sql": "select student_id from high schooler except select student_id from friend"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | car_names : car_names.makeid , car_names.make , car_names.model | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | model_list : model_list.maker , model_list.model , model_list.modelid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.name , singer.is_male , singer.singer_id | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id",
        "db_id": "concert_singer",
        "sql": "select country from singer where age > 40 intersect select country from singer where age 30"
    },
    {
        "input": "Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id",
        "db_id": "network_1",
        "sql": "select student_id from high schooler except select student_id from friend"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.name , singer.is_male , singer.singer_id | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id",
        "db_id": "concert_singer",
        "sql": "select country from singer where age > 40 intersect select country from singer where age 30"
    },
    {
        "input": "Return the number of flights departing from Aberdeen. | flights : flights.sourceairport , flights.airline , flights.destairport , flights.flightno | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode",
        "db_id": "flight_2",
        "sql": "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Abbotton'"
    },
    {
        "input": "Which distinct car models are the produced after 1980? | car_names : car_names.model , car_names.make , car_names.makeid | model_list : model_list.model , model_list.modelid , model_list.maker | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct model from car_names join cars_data on car_names.make = cars_data.id where cars_data.year > 1980"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.professional_id , professionals.role_code , professionals.email_address , professionals.street , professionals.city | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment | dogs : dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.weight | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id",
        "db_id": "dog_kennels",
        "sql": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.pro_id = treatments.professional_id"
    },
    {
        "input": "Return the number of flights departing from Aberdeen. | flights : flights.sourceairport , flights.airline , flights.destairport , flights.flightno | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode",
        "db_id": "flight_2",
        "sql": "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Abbotton'"
    },
    {
        "input": "List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id",
        "db_id": "orchestra",
        "sql": "select title from conductor order by age asc"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial | city : city.id , city.name , city.district , city.population , city.countrycode | city.countrycode = country.code | countrylanguage.countrycode = country.code",
        "db_id": "world_1",
        "sql": "select name from country where continent = 'Afrika' and population < ( select min ( population ) from country where continent = 'Asia' )"
    },
    {
        "input": "List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id",
        "db_id": "orchestra",
        "sql": "select title from conductor order by age asc"
    },
    {
        "input": "What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position | song.singer_id = singer.singer_id",
        "db_id": "singer",
        "sql": "select name from singer order by net_worth_milions desc limit 1"
    },
    {
        "input": "Return the number of flights departing from Aberdeen. | flights : flights.sourceairport , flights.airline , flights.destairport , flights.flightno | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation | flights.destairport = airports.airportcode | flights.sourceairport = airports.airportcode",
        "db_id": "flight_2",
        "sql": "select count ( * ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Abbotton'"
    },
    {
        "input": "Which distinct car models are the produced after 1980? | car_names : car_names.model , car_names.make , car_names.makeid | model_list : model_list.model , model_list.modelid , model_list.maker | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct model from car_names join cars_data on car_names.make = cars_data.id where cars_data.year > 1980"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | car_names : car_names.makeid , car_names.make , car_names.model | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | model_list : model_list.maker , model_list.model , model_list.modelid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970"
    },
    {
        "input": "Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id",
        "db_id": "network_1",
        "sql": "select student_id from high schooler except select student_id from friend"
    },
    {
        "input": "What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position | song.singer_id = singer.singer_id",
        "db_id": "singer",
        "sql": "select name from singer order by net_worth_milions desc limit 1"
    },
    {
        "input": "What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position | song.singer_id = singer.singer_id",
        "db_id": "singer",
        "sql": "select name from singer order by net_worth_milions desc limit 1"
    },
    {
        "input": "Which distinct car models are the produced after 1980? | car_names : car_names.model , car_names.make , car_names.makeid | model_list : model_list.model , model_list.modelid , model_list.maker | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct model from car_names join cars_data on car_names.make = cars_data.id where cars_data.year > 1980"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.professional_id , professionals.role_code , professionals.email_address , professionals.street , professionals.city | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment | dogs : dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.weight | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id",
        "db_id": "dog_kennels",
        "sql": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.pro_id = treatments.professional_id"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.name , singer.is_male , singer.singer_id | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id",
        "db_id": "concert_singer",
        "sql": "select country from singer where age > 40 intersect select country from singer where age 30"
    },
    {
        "input": "What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | car_names : car_names.makeid , car_names.make , car_names.model | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | model_list : model_list.maker , model_list.model , model_list.modelid | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.professional_id , professionals.role_code , professionals.email_address , professionals.street , professionals.city | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment | dogs : dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.weight | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id",
        "db_id": "dog_kennels",
        "sql": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.pro_id = treatments.professional_id"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.name , singer.is_male , singer.singer_id | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id",
        "db_id": "concert_singer",
        "sql": "select country from singer where age > 40 intersect select country from singer where age 30"
    },
    {
        "input": "What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position | song.singer_id = singer.singer_id",
        "db_id": "singer",
        "sql": "select name from singer order by net_worth_milions desc limit 1"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial | city : city.id , city.name , city.district , city.population , city.countrycode | city.countrycode = country.code | countrylanguage.countrycode = country.code",
        "db_id": "world_1",
        "sql": "select name from country where continent = 'Afrika' and population < ( select min ( population ) from country where continent = 'Asia' )"
    },
    {
        "input": "Which distinct car models are the produced after 1980? | car_names : car_names.model , car_names.make , car_names.makeid | model_list : model_list.model , model_list.modelid , model_list.maker | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct model from car_names join cars_data on car_names.make = cars_data.id where cars_data.year > 1980"
    },
    {
        "input": "List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded | orchestra.conductor_id = conductor.conductor_id | performance.orchestra_id = orchestra.orchestra_id | show.performance_id = performance.performance_id",
        "db_id": "orchestra",
        "sql": "select title from conductor order by age asc"
    },
    {
        "input": "Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.name , singer.is_male , singer.singer_id | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id | concert.stadium_id = stadium.stadium_id | singer_in_concert.singer_id = singer.singer_id | singer_in_concert.concert_id = concert.concert_id",
        "db_id": "concert_singer",
        "sql": "select country from singer where age > 40 intersect select country from singer where age 30"
    },
    {
        "input": "What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial | city : city.id , city.name , city.district , city.population , city.countrycode | city.countrycode = country.code | countrylanguage.countrycode = country.code",
        "db_id": "world_1",
        "sql": "select name from country where continent = 'Afrika' and population < ( select min ( population ) from country where continent = 'Asia' )"
    },
    {
        "input": "What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.city , addresses.country | students : students.current_address_id , students.permanent_address_id , students.student_id , students.first_name , students.middle_name | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details | students.permanent_address_id = addresses.address_id | students.current_address_id = addresses.address_id | student_enrolment.student_id = students.student_id",
        "db_id": "student_transcripts_tracking",
        "sql": "select current_address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by current_address_id order by count ( * ) desc limit 1"
    },
    {
        "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.professional_id , professionals.role_code , professionals.email_address , professionals.street , professionals.city | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment | dogs : dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.weight | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name | dogs.owner_id = owners.owner_id | dogs.owner_id = owners.owner_id | treatments.dog_id = dogs.dog_id | treatments.professional_id = professionals.professional_id",
        "db_id": "dog_kennels",
        "sql": "select professional_id , role_code , email_address from professionals except select professionals.professional_id , professionals.role_code , professionals.email_address from professionals join treatments on professionals.pro_id = treatments.professional_id"
    },
    {
        "input": "Which distinct car models are the produced after 1980? | car_names : car_names.model , car_names.make , car_names.makeid | model_list : model_list.model , model_list.modelid , model_list.maker | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country | model_list.maker = car_makers.id | car_names.model = model_list.model | cars_data.id = car_names.makeid",
        "db_id": "car_1",
        "sql": "select distinct model from car_names join cars_data on car_names.make = cars_data.id where cars_data.year > 1980"
    },
    {
        "input": "Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade | friend : friend.student_id , friend.friend_id | likes : likes.student_id , likes.liked_id | friend.friend_id = highschooler.id | friend.student_id = highschooler.id | likes.student_id = highschooler.id | likes.liked_id = highschooler.id",
        "db_id": "network_1",
        "sql": "select student_id from high schooler except select student_id from friend"
    }
]